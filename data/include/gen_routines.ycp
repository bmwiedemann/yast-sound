{
    define integer find_pair(string input, integer start) {
        integer pos = start+1;
        integer siz = size(input);
        integer cnter = 1;
        while (pos < siz && cnter > 0)
        {
            if (substring(input, pos, 1) == "{")
            {
                cnter = cnter + 1;
            }
            else if (substring(input, pos, 1) == "}")
            {
                cnter = cnter -1;
            }
            pos = pos + 1;
        }
        return pos -1;
    }

    define list parse_bracket(string input) {
        integer pos = 0;
        string inner = input; // substring(input, 1, size(input)-2);
        integer siz = size(inner);
        string tmp = "";

        list output = [];

        integer oldpos = 0;

        while(pos < siz)
        {
            if (substring(inner, pos, 1) == "{")
            {
                oldpos = pos;
                pos = pos + 1;
                integer cnter = 1;
                // let's find the pair bracket for '{'
                while((cnter > 0) && (pos < siz))
                {
                    if (substring(inner, pos, 1) == "}")
                    {
                        cnter = cnter - 1;
                    }
                    else if (substring(inner, pos, 1) == "{")
                    {
                        cnter = cnter + 1;
                    }
                    pos = pos + 1;
                }
                output = add(output, parse_bracket(substring(inner, oldpos + 1, pos - oldpos - 2)));
                pos = pos + 1;
            }
            else
            {
                oldpos = pos;
                while ((substring(inner, pos, 1) != ",") && pos < siz)
                {
                    pos = pos + 1;
                }
                output = add(output, substring(inner, oldpos, pos - oldpos));
                pos = pos + 1;
            }
        }
        return output;
    }

    define map parse_line(string input) {
        string token = "";
        integer pos = 0;
        integer siz = size(input);

        list tokens = [];

        string value = "";

        integer mode = 0; // 0 reading key, 1 reading value

        while (pos < siz)
        {
            if (substring(input, pos, 1) == ",")
            {
                if (value != "")
                {
                    tokens = add(tokens, value);
                    value = "";
                }
            }
            else if (substring(input, pos, 1) == "{")
            {
                integer p = find_pair(input, pos);
                value = value + substring(input, pos, p - pos + 1);
                pos = p;
            }
            else
            {
                value = value + substring(input, pos, 1);
            }
            pos = pos + 1;
        }
        if (value != "")
        {
            tokens = add(tokens, value);
            value = "";
        }

        map output = $[];

        // now let's split tokens to "key": "value" pairs.
        foreach(string e, (list<string>) tokens,
        ``{
            list l = splitstring(e, ":");
            if (size(l) == 2)
            {
                output [ l[0]:"" ]	= l[1]:"";
            }
            else
            {
                output [ l[0]:"" ]	= "";
            }
        });

        return output;
    }


}
