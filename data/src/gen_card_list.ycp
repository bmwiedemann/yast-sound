{
    include "./include/gen_routines.ycp";
    import "String";

    define list<string> get_card_list(string str) {

        string pattern = "([^ \t]*)[\t ]*info_devices=[\{](.*)[\}]";
        list l = regexptokenize ( str, pattern );

        if (size(l) == 0)
        {
            return [];
        }


        string second = l[1]:"";
        string token = "";

	list output = [];

	list cards = parse_bracket (second);

	if (size(cards) > 0)
	{
	    output = maplist (list e, (list<list>) cards, ``{
		if (size(e) > 1)
		{
		    return e[1]:"" + ", " + e[0]:"";
		}
		else
		{
		    return e[0]:"";
		}
	    });
	}

	output = toset (output);

	return (list<string>) output;
    }


    map<integer,string> mod_idx	=
	(map<integer,string>) SCR::Read (.target.ycp, "./src/module_index.ycp");

    // we need 'reverse' map od module index:

    map<string,integer> index	=
	(map<string,integer>) mapmap (integer k, string v, mod_idx, ``($[v:k]));


    // let's open input file...
    map out	= (map) SCR::Execute (.target.bash_output, "uname -r", $[]);
    string kernel_ver = out["stdout"]:"";
    kernel_ver = String::FirstChunk(kernel_ver, "\n");

//    string s	= (string) SCR::Read(.target.string, "/lib/modules/"+kernel_ver+"/modules.generic_string");
    string s = (string) SCR::Read(.target.string, "./alsa-module-syntax");
    if (s == nil) s = "";

    list<string> l	= splitstring(s, "\n");

    map output = $[];
    map vendors_cards = $[];

    list toks = [];

    maplist(string e, l, {

	toks = regexptokenize(e, "(snd-[^ \t]*)[\t ]*info_devices=");
	if (lookup(index, toks[0]:" ", -1) == -1)
	{
	    return;
	}
	if (size(toks) > 0)
	{
	    list<string> cardlist = get_card_list(e);
	    foreach (string cardname, cardlist, ``{
		list card = splitstring (cardname, ",");
		string vendor = card[1]:"other";
		if (substring (vendor, 0, 1) == " ")
		    vendor = substring (vendor, 1);
		if (haskey (vendors_cards, vendor))
		    vendors_cards [vendor] = add (vendors_cards[vendor]:[],
			card[0]:"");
		else
		    vendors_cards [vendor] = [ card[0]:"" ];
	    });
	    output = add (output, lookup(index, toks[0]:" ", -1), cardlist);
	}

    });

    // now add manual add-ons if available
    list<list> ladd	=
	(list<list>)SCR::Read(.target.ycp, "./addons/card_addons.ycp");

    foreach (list e, ladd,
    {
	integer i = lookup(index, e[0]:"", -1);
	if (i == -1)
	{
	    y2error("module %1 not defined in module_index.ycp file!", e[0]:"");
	}
	string cardname	= e[1]:"";
	list card	= splitstring (cardname, ",");
	string vendor	= card[1]:"other";
	if (substring (vendor, 0, 1) == " ")
	    vendor = substring (vendor, 1);
	if (haskey (vendors_cards, vendor))
	    vendors_cards [vendor] = add (vendors_cards[vendor]:[],
		card[0]:"");
	else
	    vendors_cards [vendor] = [ card[0]:"" ];

	if (haskey(output, i))
	{
	    list oldlist = lookup(output, i, []);
	    oldlist = add(oldlist, cardname);
	    output = add(output, i, oldlist);
	}
	else
	{
	    output = add(output, i, [cardname]);
	}
    });

    SCR::Write(.target.ycp, "./cardlist.ycp", output);

    SCR::Write(.target.ycp, "./vendors.ycp", vendors_cards);
}
