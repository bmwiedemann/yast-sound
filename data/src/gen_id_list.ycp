{
    include "./include/gen_routines.ycp";
    import "String";

    string pattern = "(snd-[^ \t]*)[\t ]*(0x[0-9a-f]*)[\t ]*(0x[0-9a-f]*).*";

    map out	= (map) SCR::Execute (.target.bash_output, "uname -r", $[]);
    string kernel_ver = out["stdout"]:"";
    kernel_ver = String::FirstChunk(kernel_ver, "\n");

    string s	= (string) SCR::Read(.target.string, "/lib/modules/"+kernel_ver+"/modules.pcimap");

    if (s == nil) s = "";

    // pci map:
    // ========
    list<string> lpci_s	= splitstring(s, "\n");

    list<list> lpci	= maplist (string e, lpci_s,
	``(regexptokenize(e, pattern))
    );
    lpci		= filter (list e, lpci, ``(e!=[]));

    // now we have tripples: [modname, vendor_id, device_id]

    // isapnp map:

    s = (string)
    SCR::Read(.target.string, "/lib/modules/"+kernel_ver+"/modules.isapnpmap");
    if (s == nil) s = "";

    list<string> lpnp_s	= splitstring(s, "\n");

    // we need those double dots to change the order of bytes (they are in LSB in modules.isapnpmap)
    pattern = "(snd-[^ \t]*)[\t ]*0x(..)(..)[\t ]*0x(..)(..).*";

    list<list> lpnp	= maplist (string e, lpnp_s,
	``(regexptokenize(e, pattern)));

    lpnp = filter (list e, lpnp, ``(e!=[]));

    // change LSB to MSB
    lpnp = maplist (list e, lpnp, ``(
	[
	    e[0]:nil,
	    "0x" + e[2]:"" + e[1]:"",
	    "0x" + e[4]:"" + e[3]:""
	]
    ));


    // open the module index database
    map<integer,string> mod_idx	=
	(map<integer,string>) SCR::Read (.target.ycp, "./src/module_index.ycp");

    // we need 'reverse' map od module index:
    map<string,integer> index	=
	(map<string,integer>) mapmap (integer k, string v, mod_idx, ``($[v:k]));

    map output		= $[];
    integer vendor_id	= 0;
    integer device_id	= 0;
    integer mod_id	= 0;

    // finally let's include some manually defined add-ons from the
    // id_addons.ycp file

    list<list> addons = [];

    if (SCR::Read(.target.size, "./addons/id_addons.ycp") > 0)
    {
	addons = (list<list>) SCR::Read(.target.ycp, "./addons/id_addons.ycp");
    }

    list<list> l = flatten ([lpci, lpnp, addons]);

    maplist(list e, l,
    {
	vendor_id	= tointeger(e[1]:"");
	device_id	= tointeger(e[2]:"");
	mod_id		= index[e[0]:""]:-1;
	if (mod_id == -1)
	{
	    return;
	}
	if (haskey(output, vendor_id))
	{
	    map oldmap = output[vendor_id]:$[];
	    oldmap = add(oldmap, device_id, mod_id);
	    output = add(output, vendor_id, oldmap);
	}
	else
	{
	    output = add(output, vendor_id, add($[], device_id, mod_id));
	}
    });

    SCR::Write(.target.ycp, "./idlist.ycp", output);
}
