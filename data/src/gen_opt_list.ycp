{
    include "./include/gen_routines.ycp";

    global define translate_descr(string descr) ``{
	list matches = [
	    "(.*for) (.*) (soundcard.)",
            "(.*for) (.*) (driver.)",
            "(.*for) (.*) (interface.)",
            "(.*for) (.*) (MIDI.)",
            "(.*for) (.*) (bridge.)" ];

	list guess = maplist(`e, matches,
	    ``(regexptokenize(descr, e))
	);

	guess = filter(`e, guess, ``(size(e)==3));

	if (size(guess) >= 1)
	{
	    list l = select(guess, 0, []);
	    y2error("translating %1...", descr);
	    string s = sformat("%1 %%1 %2", select(l, 0, ""), select(l, 2, ""));
	    any a = s;
	    locale loc = a;
	    return [loc, select(l, 1, "")];
	}
	any a = descr;
	locale l = a;
	return l;
    }

    // collect param descriptions of all snd-card-* modules

    map mod_idx = SCR::Read(.target.ycp, "./src/module_index.ycp");
    map mixer   = SCR::Read(.target.ycp, "./addons/mixer.ycp");

    map joy_mods = SCR::Read(.target.ycp, "./addons/joy_mods.ycp");


    list mods = maplist(`k, `v, mod_idx, ``(v)); // SCR::Dir(.modinfo.misc);

//    mods = filter(`e, mods, ``(regexpmatch(e, "^snd-card-.*")));
    map modopts = $[];
    map subopt = $[];


    foreach(`e, mods, 
    ``{
	subopt = SCR::Read(add(.modinfo, e));
	modopts = add(modopts, e, subopt);
    });

    string mod_name = "";
    string mod_descr = "";
    map mod_params = $[];

    map database = $[];

    map mod_data = $[];

    foreach (`e, mods,
    ``{
	mod_name = e;
	mod_descr = lookup(lookup(modopts, mod_name, $[]), "module_description", "");
	mod_params = $[];

	mod_data = $["description" : mod_descr,
                     "params" : mod_params
                     ];

	maplist(`k, `v, lookup(mixer, mod_name, $[]), ``{mod_data[k]=v;});

	database = add(database, mod_name, mod_data);
//			$[
//			    "description" : mod_descr,
//			    "params" : mod_params
//			]);
    });

    string kernel_ver = lookup(SCR::Execute(.target.bash_output, "uname -r", $[]), "stdout", "");

    kernel_ver = select(splitstring(kernel_ver, "\n"), 0, "");
    string generic_string = SCR::Read(.target.string, "/lib/modules/"+kernel_ver+"/modules.generic_string");
    list gs = splitstring(generic_string, "\n");

//    string pattern = "(snd-[^ \t]*)[\t ]*info_parm_(snd_[^=]*)=enable:\\(snd_enable\\)(.*)";
    string pattern = "(snd-[^ \t]*)[\t ]*info_parm_([^=]*)=enable:\\(enable\\)(.*)";

    list ltmp = [];
    list lx = [];

    map tmpmap = $[];
    string modname = "";
    string parmname = "";
    string descr = "";


    maplist(`e, gs,
    ``{
	lx = regexptokenize(e, pattern);
	parmname = select(lx, 1, "");
	if (substring (parmname, 0, 4) != "snd_" && parmname != "")
	{
	    parmname = "snd_" + parmname;
	}
	if (size(lx) > 0 &&
        !contains(["snd_index", "snd_enable", "snd_id"], parmname))
	{
	    tmpmap = parse_line(select(lx, 2, ""));
	    modname = select(lx, 0, "");
	    if (!contains(mods, modname))
	    {
		return;
	    }
	    descr = lookup(lookup(modopts, modname, $[]), parmname, " ");

	    // these two declaration must be here
	    any anydescr = translate_descr(descr);

	    if (is(anydescr, list) && size(anydescr) > 1)
	    {
		if (select(anydescr, 1, "") == "specified")
		{
		    anydescr[1] = lookup(lookup(database, modname, $[]), "description", "");
		}
	    }
//	    locale locdescr = anydescr;

//	    y2error("%1 %2 %3", modname, parmname, tmpmap);

	    map oldmap = lookup(database, modname, $[]);
	    map oldopts = lookup(oldmap, "params", $[]);

	    tmpmap = add (tmpmap, "descr", anydescr); //locdescr);

	    oldopts = add(oldopts, parmname, tmpmap);
	    oldmap = add(oldmap, "params", oldopts);

//	    if (haskey(joy_mods, modname))
//	    {
//		oldmap = add(oldmap, "joystick", lookup(joy_mods, modname, $[]));
//	    }
	    database = add(database, modname, oldmap);
	}
    });

    // now merge stuff from ../addons/mod_addons.ycp

    map addm = SCR::Read(.target.ycp, "./addons/mod_addons.ycp");

    foreach(`k, `v, addm,
    ``{
	database = add(database, k, v);
    });

    // now add joystick data

    map outdb= $[];

    foreach(`k, `v, database,
    ``{
	if (haskey(joy_mods, k))
	{
	    v = add(v, "joystick", lookup(joy_mods, k, $[]));
	}
	outdb = add(outdb, k, v);
    });

    SCR::Write(.target.ycp, "./modlist.ycp", outdb);
}
