/**
 * File:
 *   modules/Sound.ycp
 *
 * Package:
 *   Configuration of sound
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of sound.
 * Input and output routines.
 *
 */

{
    // Set the name of the module
    module "Sound";
    import "Runlevel";

    include "sound/read_routines.ycp";
    include "sound/alsa_routines.ycp";
    include "sound/routines.ycp";

    import "Summary";


    // flag for letting the module know, that it's launched from then hardware
    // installation screen
    global boolean installation = false;

    // was the proposal already generated?
    global boolean proposal_created = false;

    //
    global boolean autoinstallation = false;
    // list for storing detected cards
    global list detected_cards = nil;

    // list of detected and unconfigured cards
    global list unconfigured_cards = nil;

    // settings to save to /etc/modules.conf (only those concerning to sound)
    global list modules_conf = [];

    // what sound system we're using (true=alsa, false=oss)
    global boolean use_alsa = true;

    // settings to save using .audio.alsa ... mixer
    global list volume_settings = [];

    // rc settings
    global map rc_vars = $[];

    // alsa sound card database
    global map db_cards = nil;
    global map db_modules = nil;
    global map db_indices = nil;
    global map db_module_index = nil;

    // flag for showing/not showing ui stuff (eg when loading alsa database)
    global boolean use_ui = false;

    /**
     * do hardware detection
     */

    global define boolean DetectHardware() ``{
	if (autoinstallation)
	{
	    detected_cards = [];
	}
	// do noop if cards were already detected
	if (detected_cards != nil)
	{
	    return true;
	}
	detected_cards  = SCR::Read(.probe.sound);
	return true;
    }


    /**
     * searches for sound alias in /etc/modules.conf
     */

    global define void ReadModulesConf() ``{
	modules_conf = read_save_info();
    }

    /**
     * update list of unconfigured cards (necessaty when deleting configured card)
     */

    global define void UpdateUnconfiguredCards() ``{
	if (autoinstallation)
	{
	    return;
	}
	unconfigured_cards = getConfigurableCards(modules_conf);
    }

    /**
     * Read all sound settings from the SCR
     * @return boolean True on success
     */
    global define boolean Read(block _unused) ``{
	// first detect sound cards
	DetectHardware();
	// load data from /etc/modules.conf
	ReadModulesConf();
	// create list of unconfigured cards
	UpdateUnconfiguredCards();
	// read rc.config values
	rc_vars = read_rc_vars ();
	// load volume settings
	volume_settings = get_vol_settings();
	UpdateUnconfiguredCards();
	return true;
    }

    /**
     * Get all sound settings from the first parameter
     * (For use by autoinstallation.)
     * @return boolean True on success
     */
    global define boolean Import(map settings) ``{
	// initialize these unneeded values
	detected_cards = [];
	unconfigured_cards = [];

	// import values
	if (lookup(settings, "modules_conf", nil) == nil)
	{
	    y2error("Import error: 'modules_conf' key is missing");
	    return false;
	}
	modules_conf = lookup(settings, "modules_conf", []);

	rc_vars = lookup(settings, "rc_vars", $[]);

	volume_settings = lookup(settings, "volume_settings", []);

	return true;
    }

    /**
     * Update the SCR according to sound settings
     * @return boolean True on success
     */
    global define boolean Write(block _unused, block _unused2) ``{
	// TODO: check return value
	map settings = Export();
	settings = add (settings, "autoinstall", false);
	CallFunction (`sound_write(settings));
	return true;
    }

    /**
     * Dump the sound settings to a single map
     * (For use by autoinstallation.)
     * @return map Dumped settings (later acceptable by Import())
     */
    global define map Export() ``{
	return $[
		"modules_conf"	    : modules_conf,
		"rc_vars"	    : rc_vars,
		"volume_settings"   : volume_settings,
		"autoinstall"	    : true
	    ];
    }

    /**
     * opens alsa sound cards database
     */

    global define void LoadDatabase() ``{
	map sound_db =$[];
	if (db_cards == nil || db_cards == $[])
	{
            string message = _("Loading the sound card database...");
	    UI::`OpenDialog(`opt(`decorated), `Label(message));
	    textdomain "sound_db";
	    y2debug("Reading card database");
	    sound_db = eval(SCR::Read (.target.yast2, "sndcards.ycp"));

	    db_cards	= lookup(sound_db, "cards", $[]);
	    db_modules	= lookup(sound_db, "modules", $[]);
	    db_indices	= lookup(sound_db, "indices", $[]);
	    db_module_index = lookup(sound_db, "mod_idx", $[]);

	    textdomain "sound";
	    UI::CloseDialog();
	}
    }

    /**
     * just writes all variables to log. don't use in Master.
     */

    global define void DumpToLog() ``{
	y2error(sformat("%1", [Sound::modules_conf, rc_vars, true, true, get_vol_settings()]));
    }

    global define string Summary() ``{
	list retlist    = [];       // return value of the module

	list keys = maplist(`e, Sound::modules_conf, ``(lookup(e, "unique_key", "...")));

	retlist = maplist(`card, Sound::modules_conf,
	``(
	    // to translators: '(sound card is) Configured as snd-card-1'
	    Summary::Device(lookup(card, "model", "Sound card"), sformat(_("Configured as %1."), 
		lookup(card, "alias", "snd-card-0")))
	));

	foreach(`card, Sound::detected_cards,
	``{
	    if (!contains(keys, lookup(card, "unique_key", "...")))
	    {
		retlist = add(retlist, Summary::Device(get_card_label(card), Summary::NotConfigured()));
	    }
	});

	return Summary::DevicesList(retlist);

    }

    /**
     *
     *
     */

    global define string CollectOptions(string modname) ``{
	// first filter out entries with other module
	list mod_entries = filter(`e, modules_conf, ``(lookup(e, "module", "off") == modname));

	// create list of options (list of maps)
	list mod_opts = maplist(`e, mod_entries, ``(lookup(e, "options", $[])));

	list opts = [];

	foreach(`a, mod_opts,
	``{
	    foreach(`b, `c, a,
	    ``{
	        opts = add(opts, b);
	    });
	});
	opts = toset(opts);
	opts = filter(`e, opts, ``(e != "snd_id"));

	map res = $[];
	// for each option collect their values
	foreach(`opname, opts,
	``{
	    boolean coma = false;
	    string value = "";
	    foreach(`s, mod_opts,
	    ``{
	        if (coma)
	        {
	            value = value + ",";
	        }
	        value = value + lookup(s, opname, "");

	        coma = true;
	    });
	    res = add(res, opname, value);
	});

	return res;

    }

    global define list CreateModprobeCommands() ``{
	list outlist = [];
	// create distinct list of all modules
        list mods = toset(maplist(`e, modules_conf, ``(lookup(e, "module", "off"))));
	maplist(`modname, mods, ``{
	    map opts = CollectOptions(modname);
	    string optstr = "";
	    maplist(`k, `v, opts, ``{
		optstr = optstr+ sformat(" %1=%2", k, v);
	    });
	    string modprobe = sformat("modprobe %1 %2", modname, optstr);
	    outlist = add(outlist, modprobe);
	});

	return outlist;

    }

    /**
     *
     * reset settings
     *
     */

    global define ForceReset() ``{
	modules_conf = [];
	DetectHardware();
	UpdateUnconfiguredCards();
	proposal_created = false;
    }

    /**
     *
     * create a proposal
     *
     */

    global define Propose() ``{
	if (proposal_created)
	{
	    return true;
	}
	ForceReset();

	// TODO: fix for nm256/opl3sa2 hack

	modules_conf = recalc_save_entries(unconfigured_cards);
	rc_vars = $[
		"LOAD_ALSA" : "yes",
		"LOAD_ALSA_SEQ": "yes"
	    ];
	proposal_created = true;
	return true;
    }

    /* settings' backup */

    list modules_conf_b = nil;
    list rc_vars_b = nil;
    list volume_settings_b = nil;

    global define void StoreSettings() ``{
	modules_conf_b = modules_conf;
	rc_vars_b = rc_vars;
	volume_settings_b = volume_settings;
    }

    global define void RestoreSettings() ``{
	if (modules_conf_b == nil)
	{
	    y2error("restoring sound setting without storing them before. bailing out.");
	}
	modules_conf = modules_conf_b;
	rc_vars = rc_vars_b;
	volume_settings = volume_settings_b;
    }

    /**
     * returns list of configured/proposed sound cards.
     * @return list of maps: [$["name": "ASDASD", "card_no": 0]...]
     *
     */

    global define list GetSoundCardList() ``{
	if (installation)
	{
	    integer pos = -1;
	    return maplist(`c, modules_conf, ``{
		    pos = pos + 1;
		    return
		    $[
			"name" : lookup(c, "model", _("Sound card")),
			"card_no": pos
		    ];
		});
	}
	else
	{
	    path cards_path = .audio.alsa.cards;

	    list cards_numbers = SCR::Dir(cards_path);

	    list cards = [];
	    if (cards_numbers != nil)
	    {
		cards =
		    maplist(`card_no, cards_numbers, ``{
			path curcard_path = add(cards_path, sformat("%1", card_no));
			return $[ "card_no" : tointeger(card_no),
                              "name" :    SCR::Read(curcard_path + .name) ];
		    });
	    }

	    y2debug("List of the sound cards: %1", cards);
	    return cards;
	}
    }

    global define void StoreMixer() ``{
	if (size(SCR::Dir(.audio.alsa.cards)) == 0)
	{
	    return;
	}
	volume_settings = [];
	path p = nil;
	list cards = SCR::Dir(.audio.alsa.cards);
	maplist(`c, cards, ``{
	    p = topath(sformat(".audio.alsa.cards.%1.channels", c));
	    list channels = SCR::Dir(p);
	    maplist(`ch, channels, ``{
		p = topath(sformat(".audio.alsa.cards.%1.channels.%2.mute", c, ch));
		if (!SCR::Read(p))
		{
		    p = topath(sformat(".audio.alsa.cards.%1.channels.%2.volume", c, ch));
		    volume_settings[tointeger(c)] = add(volume_settings[tointeger(c)]:$[],
			ch, SCR::Read(p));

		}

	    });

	});
    }

}
