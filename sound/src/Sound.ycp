/**
 * File:
 *   modules/Sound.ycp
 *
 * Package:
 *   Configuration of sound
 *
 * Summary:
 *   Input and output functions.
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * Representation of the configuration of sound.
 * Input and output routines.
 *
 */

{
    // Set the name of the module
    module "Sound";
    import "Runlevel";

    include "sound/read_routines.ycp";
    include "sound/alsa_routines.ycp";
    include "sound/routines.ycp";

    include "browser.ycp";
    import "Summary";

    global boolean autoinstallation = false;
    // list for storing detected cards
    global list detected_cards = nil;

    // list of detected and unconfigured cards
    global list unconfigured_cards = nil;

    // settings to save to /etc/modules.conf (only those concerning to sound)
    global list modules_conf = [];

    // what sound system we're using (true=alsa, false=oss)
    global boolean use_alsa = true;

    // settings to save using .audio.alsa ... mixer
    global list volume_settings = [];

    // rc settings
    global map rc_vars = $[];

    // alsa sound card database
    global map db_cards = nil;
    global map db_modules = nil;
    global map db_indices = nil;
    global map db_module_index = nil;

    /**
     * do hardware detection
     */

    global define boolean DetectHardware() ``{
	if (autoinstallation)
	{
	    detected_cards = [];
	}
	// do noop if cards were already detected
	if (detected_cards != nil)
	{
	    return true;
	}
	detected_cards  = SCR::Read(.probe.sound);
	return true;
    }


    /**
     * searches for sound alias in /etc/modules.conf
     */

    global define void ReadModulesConf() ``{
	modules_conf = read_save_info();
    }

    /**
     * update list of unconfigured cards (necessaty when deleting configured card)
     */

    global define void UpdateUnconfiguredCards() ``{
	if (autoinstallation)
	{
	    return;
	}
	unconfigured_cards = getConfigurableCards(modules_conf);
    }

    /**
     * Read all sound settings from the SCR
     * @return boolean True on success
     */
    global define boolean Read(block _unused) ``{
	// first detect sound cards
	DetectHardware();
	// load data from /etc/modules.conf
	ReadModulesConf();
	// create list of unconfigured cards
	UpdateUnconfiguredCards();
	// read rc.config values
	rc_vars = read_rc_vars ();
	// load volume settings
	volume_settings = get_vol_settings();
	UpdateUnconfiguredCards();
	return true;
    }

    /**
     * Get all sound settings from the first parameter
     * (For use by autoinstallation.)
     * @return boolean True on success
     */
    global define boolean Import(map settings) ``{
	// initialize these unneeded values
	detected_cards = [];
	unconfigured_cards = [];

	// import values
	if (lookup(settings, "modules_conf", nil) == nil)
	{
	    y2error("Import error: 'modules_conf' key is missing");
	    return false;
	}
	modules_conf = lookup(settings, "modules_conf", []);

	rc_vars = lookup(settings, "rc_vars", $[]);

	volume_settings = lookup(settings, "volume_settings", []);

	return true;
    }

    /**
     * Update the SCR according to sound settings
     * @return boolean True on success
     */
    global define boolean Write(block _unused, block _unused2) ``{
	// TODO: check return value
	map settings = Export();
	settings = add (settings, "autoinstall", false);
	CallFunction (`sound_write(settings));
	return true;
    }

    /**
     * Dump the sound settings to a single map
     * (For use by autoinstallation.)
     * @return map Dumped settings (later acceptable by Import())
     */
    global define map Export() ``{
	return $[
		"modules_conf"	    : modules_conf,
		"rc_vars"	    : rc_vars,
		"volume_settings"   : volume_settings,
		"autoinstall"	    : true
	    ];
    }

    /**
     * opens alsa sound cards database
     */

    global define void LoadDatabase() ``{
	map sound_db =$[];
	if (db_cards == nil || db_cards == $[])
	{
	    textdomain "sound_db";
	    y2debug("Reading card database");
	    sound_db = eval(SCR::Read (.target.yast2, "sndcards.ycp"));

	    db_cards	= lookup(sound_db, "cards", $[]);
	    db_modules	= lookup(sound_db, "modules", $[]);
	    db_indices	= lookup(sound_db, "indices", $[]);
	    db_module_index = lookup(sound_db, "mod_idx", $[]);

	    textdomain "sound";
	}
    }

    /**
     * just writes all variables to log. don't use in Master.
     */

    global define void DumpToLog() ``{
	y2error(sformat("%1", [Sound::modules_conf, rc_vars, true, true, get_vol_settings()]));
    }

    global define string Summary() ``{
	list retlist    = [];       // return value of the module

	list keys = maplist(`e, Sound::modules_conf, ``(lookup(e, "unique_key", "...")));

	retlist = maplist(`card, Sound::modules_conf,
	``(
	    // to translators: '(sound card is) Configured as snd-card-1'
	    Summary::Device(lookup(card, "model", "Sound card"), sformat(_("Configured as %1."), 
		lookup(card, "alias", "snd-card-0")))
	));

	foreach(`card, Sound::detected_cards,
	``{
	    if (!contains(keys, lookup(card, "unique_key", "...")))
	    {
		retlist = add(retlist, Summary::Device(get_card_label(card), Summary::NotConfigured()));
	    }
	});

	return Summary::DevicesList(retlist);

    }

}
