/**
 * File:
 *   sound_complex
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   sound complex dialog
 *
 * Authors:
 * Dan Vesely <dan@suse.cz>
 * Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 *
 * Params: 1st ... list of sound_cards
 *         2nd ... list with save_info
 *         3rd ... list with configured_unique
 */

{

    textdomain "sound";

    include "sound/mixer.ycp";
    import  "Wizard";

    /**
     * creates summary table with card labels and thier states (running/not running/dissappeared)
     * @return list table contents
     */

    global define list createTable() ``{
	list runn   = get_running_cards();
	integer pos = 0;
	list ret    = maplist(`e, Sound::modules_conf,
	``{
	    string state = "";
	    if (use_alsa)
	    {
		if (size(filter(`f, runn, ``(lookup(f, "number", -1) == pos))) !=0 )
		{
		    // to translators: "(The card is) running
		    state = _("Running");
		}
	    }
	    else
	    {
		string mname = lookup(e, "module", "");
		if( haskey (SCR::Read(.proc.modules), mname) )
		{
		    state = _("Running");
		}
	    }

	    if (state == "")
	    {
		if (lookup(e, "unique_key", "") == isa_uniq())
		// card was not autodetected
		{
		    state = _("Not running");
		}
		else
		// card was autodetected
		{
		    list audio = Sound::detected_cards;
		    audio = filter(`g, audio, ``(lookup(g, "unique_key", "") == lookup(e, "unique_key", "")));
		    if (size(audio) != 0)
		    {
			state = _("Not running");
		    }
		    else
		    {
			// to translators: sound card has been removed from the machine
			state = _("Card removed");
		    }
		}
	    }

	    term r = `item(`id(pos), sformat("[%1]", pos), lookup(e, "model", ""), state);
	    pos = pos + 1;
	    return r;

	});
	return ret;
    }

    /**
     * function for enabling relevant controls in complex dialog
     * @param val boolean enable/disable
     */

    global define void enableButtons(boolean val) ``{
	UI::ChangeWidget(`id(`b_delete),    `Enabled, val);
        UI::ChangeWidget(`id(`b_options),   `Enabled, val);
	UI::ChangeWidget(`id(`b_volume),    `Enabled, val);

    }

    /**
     * shows list of soundcards
     *
     * @return map result
     */

    global define map ComplexDialog () ``{
	// help text
	symbol ui = nil;
        string helptext = lookup(STRINGS, "ComplexDialog", "");

	y2debug(" save_info %1, agent %2", size(Sound::modules_conf), size(SCR::Dir(.audio.alsa.cards)));

	if (!Sound::autoinstallation && use_alsa && (size(Sound::modules_conf) != size(get_running_cards())))
	{
	    if (UI::YesNoPopup(_("The number of currently running cards doesn't match 
the number of configured cards in your configuration files. 
Try to restart sound system?")))

	    {
		sound_stop();
		sound_start_tmp(true);
	    }
	}

	list cc = createTable();

	boolean show_fonts = false;
	maplist(`e, Sound::modules_conf, ``{ if (HasFonts(e)) show_fonts = true;});

	term con = ComplexDlgCon(cc,
			(lookup (Sound::rc_vars, "LOAD_ALSA", "no") == "yes"),
			(lookup (Sound::rc_vars, "LOAD_ALSA_SEQ", "no") == "yes"), show_fonts);

        // dialog title
	Wizard::SetContents (_("Sound configuration"), con, helptext, true, true);
	// Finish - button label
	UI::ChangeWidget(`id(`next), `Label, UI::FinishButtonLabel());

	if (size (cc) == 0)
	{
	    enableButtons(false);
	}
	else
	{
	    UI::ChangeWidget(`id(`configured_table), `CurrentItem, 0);
	}

	if (lookup (Sound::rc_vars, "LOAD_ALSA", "") != "yes")
	{
	    UI::ChangeWidget(`id(`b_seq), `Enabled, false);
	}

	do
	{
	    if (!Sound::autoinstallation)
	    {
		SCR::Execute(.audio.alsa.restore, 0, 0);
	    }

	    ui = UI::`UserInput ();
	    if (ui == `b_delete)
	    {
		ui = `delete;
		// global variable card_id
		card_id = UI::QueryWidget (`id(`configured_table), `CurrentItem);
	    }
	    else if (ui == `b_options)
	    {
		integer card_id = UI::QueryWidget (`id(`configured_table), `CurrentItem);

		map entry = select(Sound::modules_conf, card_id, $[]);

		map res = sound_options(entry);
		if (lookup(res, "ui", nil) == `next)
		{
		    map oldentry = entry;

		    entry = lookup(res, "return", $[]);
		    entry = add_common_options(entry, card_id);

		    integer pos = 0;
		    Sound::modules_conf = maplist(`e, Sound::modules_conf,
		    ``{
			if (pos != card_id)
			{
			    pos = pos + 1;
			    return e;
			}
			else
			{
			    pos = pos + 1;
			    return entry;
			}
		    });
		    if (oldentry != entry)
		    {
			if (UI::YesNoPopup(_("To apply changes, the sound system
must be restarted.
Restart sound system now?
")))
			{
			    sound_stop();
			    sound_start_tmp(true);
			}
		    }
		}
		else if (lookup(res, "ui", nil) == `abort || lookup(res, "ui", nil) == `cancel)
		{
		    return $["ui" : `abort];
		}
		UI::ChangeWidget(`id(`next), `Label, UI::FinishButtonLabel());

		Wizard::SetContents (_("Sound configuration"), con, helptext, true, true);
		cc = createTable();
		UI::ChangeWidget (`id(`configured_table), `Items, cc);
		UI::ChangeWidget(`id(`configured_table), `CurrentItem, 0);
	    }
	    else if (ui == `b_volume)
	    {
		integer card_id = UI::QueryWidget (`id(`configured_table), `CurrentItem);
		map res = mixerDialog(card_id);
		if (lookup(res, "ui", nil) == `abort || lookup(res, "ui", nil) == `cancel)
                {
                    return $["ui": `abort];
                }

		UI::ChangeWidget(`id(`next), `Label, UI::FinishButtonLabel());

                Wizard::SetContents (_("Sound configuration"), con, helptext, true, true);
                cc = createTable();
                UI::ChangeWidget (`id(`configured_table), `Items, cc);
                UI::ChangeWidget(`id(`configured_table), `CurrentItem, 0);
	    }
	    else if (ui == `b_fonts)
	    {
		InstallFonts("", true);
	    }
	    else if (ui == `b_alsa)
	    {
		string value = UI::QueryWidget(`id(`b_alsa), `Value) ?  "yes" : "no";
		Sound::rc_vars = add(Sound::rc_vars, "LOAD_ALSA", value);
		UI::ChangeWidget(`id(`b_seq), `Enabled, value == "yes");
	    }
	    else if (ui == `b_seq)
	    {
		string value = UI::QueryWidget(`id(`b_seq), `Value) ? "yes" : "no";
		Sound::rc_vars = add(Sound::rc_vars, "LOAD_ALSA_SEQ", value);
	    }
	    else if (ui == `b_conf2)
	    // add soundcard
	    {
		Sound::UpdateUnconfiguredCards();
//		if (size(cards) != 0)
//		{
//		    cards = maplist(`e, cards, ``(add (e, "module", get_module (e))));
//		    cards = filter(`e, cards, ``(lookup(e, "module", $[]) != $[]));
//		    cards = filter_configured(save_info, cards);
//		}


		if (size(Sound::unconfigured_cards) == 0)
		{
		    ui = `add_manual;
		}
		else
		{
		    ui = `add_select;
		}
	    }
	    else if (ui == `cancel || ui == `abort)
	    {
		if (ReallyAbort())
		{
		    break;
		}
		else
		{
		    ui = `skip_event;
		}
	    }


	} while (!contains([`back, `next, `cancel, `abort, `add_manual, `add_select, `delete], ui));


	return $["ui": ui];
    }

// ===== MAIN =====

    /**
     * just calls ComplexDialog
     * @return map passed from ComplexDialog
     */

    global define map sound_complex() ``{

    list to_delete	= [];
    boolean config_mode = false;

    return ComplexDialog ();

}
}
