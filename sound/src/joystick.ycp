/**
 *
 *
 * File:
 *   joystick.ycp
 *
 * Module:
 *   Sound
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * YaST2 joystick configuration client
 *
 *
 */

{

    textdomain "sound";

    import "Arch";

    include "wizard/sequencer.ycp";
    import  "Wizard_hw";
    include "ui/common_popups.ycp";
    include "sound/joy_dialog.ycp";
    import  "Wizard";

    import  "Joystick";
    import  "Sound";


    // global variables:

    // selected soundcard id
    integer selected_card = nil;

    // label for `next button in joystick configuration dialog
    symbol label = `next;

    /**
     * First cofiguration dialog - if more than one sound card which support joystick is found display them,
     * if there is exactly one card skip to joystick selection, if no card was found ask user to start
     * sound configuration module.
     * @return symbol Symbol of pressed button
     */

    global define symbol joystick_configuration() ``{

	string helptext = _("<P>Two or more sound cards in your system support joystick.<P>
<P>To configure joystick select sound card and press button <B>Configure joystick</B>.</P>");

	boolean restart = false;

	if (label == `finish)
	{
	    // one joystick already configured - end
	    return `next;
	}

	do
	{
	    // get list of installed sound cards
	    list cards = Sound::GetSoundCardList();

	    // cards which support joysticks
	    list filtered = Sound::GetSoundCardListWithJoy();

	    y2milestone("Configured sound cards: %1", cards);
	    y2milestone("Cards with joystick support: %1", filtered);

	    if (Mode::test == true)
	    {
		cards = [$["card_no":0, "name":"VIA 82C686A/B"], $["card_no":1, "name":"Sound Blaster Live!"]];
		filtered = [$["card_no":0, "name":"VIA 82C686A/B"], $["card_no":1, "name":"Sound Blaster Live!"]];
	    }

	    if (size(filtered) == 1)
	    {
		selected_card = (lookup(select(filtered, 0, $[]), "card_no", 0));
		label = `finish;

		// skip to configuration dialog if exactly one card was found
		return `config;
	    }
	    else if (size(filtered) == 0)
	    {
		Wizard::SetContents(_("Joystick configuration"), `Empty(), "", false, false);

		string message = (size(cards) > 0) ? _("The configured cards do not support the joystick.") : _("No configured sound card was found.");

		message = message + "\n" + _("Start sound card configuration?");

		if (UI::YesNoHeadlinePopup(_("No joystick port to configure was found."), message) == true)
		{
		    // start sound module - joystick can be configured there
		    // so after sound config abort this module
		    WFM::CallModule("sound", []);
		}

		return `abort;		// nothing to configure
	    }
	    else
	    {
		list tcont = maplist(map c, filtered, ``{
			map jconf = select(Joystick::joystick, lookup(c, "card_no", 0), 0);
			string jmodel = lookup(jconf, "model", "");

			// translate generic joystick
			if (jmodel == Joystick::generic_joystick)
			{
			    jmodel = Joystick::generic_joystick_translated;
			}

			return `item(`id(lookup(c, "card_no", 0)), sformat("%1", lookup(c, "card_no", 0)), lookup(c, "name", "Sound card"), jmodel);
		    }
		);

		term dialog = `VBox(
		    `Table(`id(`cards), `header(_("No."), _("Sound card"), _("Joystick")), tcont),
		    `PushButton(`id(`config), _("&Configure joystick"))
		);

		Wizard::SetContents(_("Configured sound cards with joystick support"), dialog, helptext, true, true);
		Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel()));

		// preselect first card
		UI::ChangeWidget(`id(`cards), `CurrentItem, lookup(select(filtered, 0, $[]), "card_no", 0));
	    }

	}
	while (restart);

	symbol ret = nil;

	do
	{
	    ret = UI::UserInput();
	}
	while (ret != `next && ret != `abort && ret != `back && ret != `cancel && ret != `config);

	if (ret == `cancel)
	{
	    ret = `abort;
	}

	selected_card = UI::QueryWidget(`id(`cards), `CurrentItem);

	return ret;
    }

    /**
     * Save joystick configuration
     * @return symbol Return `next (for wizard sequencer)
     */

    global define symbol saveconfig() ``{
	Joystick::Write(``{});
	return `next;
    }


    /**********************  MAIN  ************************/

    // sequence of dialogs
    map sequence = $[
	"ws_start" : "detect",

	"detect" : $[
	    `next	: "save",
	    `abort	: `abort,
	    `config	: "joystick"
	],

	"joystick" : $[
	    `abort	: `abort,
	    `next	: "detect"
	],

	"save" : $[
	    `next	: `ws_finish
	]

    ];

    // aliases for dialogs
    map aliases = $[
	"detect"	: ``(joystick_configuration()),
	"joystick"	: [ ``(joy_dialog(selected_card, label)), true ],
	"save"		: ``(saveconfig())
    ];

    // create wizard dialog
    Wizard::CreateDialog();

    // read sound card configuration
    Sound::Read(``{});
    Sound::LoadDatabase();

    // read joystick configuration
    Joystick::Read(``{});

    y2debug("Read joystick configuration: %1", Joystick::joystick);

/*  TODO: test mode
    if (Mode::test == true)
    {
	// display all dialogs
    }
    else*/
    {
	// start wizard sequencer
	WizardSequencer(aliases, sequence);
    }

    // close dialog
    Wizard::CloseDialog();

}
