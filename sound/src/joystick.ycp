/**
 *
 *
 * File:
 *   joystick.ycp
 *
 * Module:
 *   Sound
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *   Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 *
 * YaST2 joystick configuration client
 *
 *
 */

{

    textdomain "sound";

    import "Arch";

    include "wizard/sequencer.ycp";
    import  "Wizard_hw";
    include "ui/common_popups.ycp";
    import  "Wizard";

    import  "Joystick";
    import  "Sound";


    // global variables:

    // selected soundcard id
    integer selected_card = nil;

    // joystick was configured
    boolean configured = false;

    /**
     * Joystick configuration dialog. Configuration of joystick attached to specified sound card.
     * @param card_id Sound card card_id
     * @return symbol Id of pressed button in the dialog
     */

    global define symbol joy_dialog(integer card_id) ``{

	y2milestone("Configuration of joystick: %1", card_id);

	if (card_id == nil)
	{
	    return `back; /*FIXME: return value */
	}

	string caption = _("Joystick configuration");
	string helptext =
_("<P>In this dialog, specify your joystick type. If your
joystick type is not in the list, select <B>Generic analog joystick</B>
(the first item in the list).</P>
") +

_("<P><B>Note:</B> Connect your joystick to your computer
before pressing <B>Next</B>.</P>");


	map joysticks = SCR::Read(.target.yast2, "include/sound/joysticks.ycp");

	list joylist = [];

	joylist = flatten (maplist(`k, `v, joysticks, ``(maplist(`l, v, ``([k, l])))));

	joylist = sort(`k, `v, joylist, ``(select(k, 1, "") <= select(v, 1, "")));

	joylist = prepend(joylist, ["analog", _("Generic analog joystick")]);

	y2milestone("joylist: %1", joylist);

	integer index = 0;
	list boxitems = [];

	foreach(list l, joylist, ``{
		boxitems = add(boxitems, `item(`id(index), select(l, 1, "")));
		index = index + 1;
	    }
	);

	y2milestone("for widget: %1", boxitems);

	term contents =
	    `VBox(
		`VSpacing(3),
		`HBox(
		    `HSpacing(6),
		    `SelectionBox(`id(`os), _("&Select your joystick type:"), boxitems),
		    `HSpacing(6)
		),
		`VSpacing(3)
	    );


	Wizard::SetContents (caption, contents, helptext, true, true);

	symbol s = nil;
	do
	{
	    s = UI::UserInput();

	    if (s == `abort && !ReallyAbort())
	    {
		s = `skip_event;
	    }

	} while (!contains([`next, `back, `abort, `cancel], s));

	if (s == `next)
	{
	    string modname = lookup(select(Sound::modules_conf, card_id, $[]), "module", "");
	    map joy_entry = Sound::GetJoystickSettings(modname);

	    integer joymodidx = UI::QueryWidget(`id(`os), `CurrentItem);

	    string joymod = select(select(joylist, joymodidx, ["none", ""]), 0, "none");
	    string model = select(select(joylist, joymodidx, ["none", ""]), 1, "");

	    // do not translate model in /etc/sysconfig/joystick
	    if (model == _("Generic analog joystick"))
	    {
		model = "Generic analog joystick";
	    }

	    y2milestone("selected modul: %1   model: %2", joymod, model);

	    joy_entry = add(joy_entry, "JOYSTICK_MODULE", joymod);
	    joy_entry = add(joy_entry, "model", model);

	    Joystick::joystick[card_id] = joy_entry;

	    y2milestone("Joystick config: %1", joy_entry);
	}

	return s;
    }


    global define symbol joystick_configuration() ``{
	boolean restart = false;

	if (configured == true)
	{
	    // one joystick already configured - end
	    return `next;
	}

	do
	{
	    // get list of installed sound cards
	    list cards = Sound::GetSoundCardList();

	    // cards which support joysticks
	    list filtered = Sound::GetSoundCardListWithJoy();

	    y2milestone("Configured sound cards: %1", cards);
	    y2milestone("Cards with joystick support: %1", filtered);

	    if (size(filtered) == 1)
	    {
		selected_card = (lookup(select(cards, 0, $[]), "card_no", 0));
		configured = true;

		// skip to configuration dialog if exactly one card was found
		return `config;
	    }
	    else if (size(filtered) == 0)
	    {
		string message = (size(cards) > 0) ? _("Already configured cards do not support joysticks.") : _("No configured sound card was found.");

		message = message + "\n" + _("Do you want to start sound card configuration?");

		if (UI::YesNoHeadlinePopup(_("Start sound card configuration?"), message) == true)
		{
		    CallModule("sound", []);
		    restart = true;
		}
		else
		{
		    return `abort;		// nothing to configure
		}
	    }
	    else
	    {
		list tcont = maplist(map c, filtered, ``{return `item(`id(lookup(c, "card_no", 0)), sformat("%1", lookup(c, "card_no", 0)), lookup(c, "name", "Sound card"), "joystick");});

		term dialog = `VBox(
		    `Table(`id(`cards), `header(_("No."), _("Sound card"), _("Joystick")), tcont),
		    `PushButton(`id(`config), _("&Configure attached joystick"))
		);

		Wizard::SetContents(_("Configured souncards with joystick support"), dialog, _("help"), true, true);
		Wizard::ReplaceNextButton(`PushButton(`id(`next), `opt(`default), FinishButtonLabel()));

		// preselect first card
		UI::ChangeWidget(`id(`cards), `CurrentItem, lookup(select(filtered, 0, $[]), "card_no", 0));
	    }

	}
	while (restart);

	symbol ret = nil;

	do
	{
	    ret = UI::UserInput();
	}
	while (ret != `next && ret != `abort && ret != `back && ret != `cancel && ret != `config);

	if (ret == `cancel)
	{
	    ret = `abort;
	}

	selected_card = UI::QueryWidget(`id(`cards), `CurrentItem);

	return ret;
    }

    global define symbol saveconfig() ``{
	Joystick::Write(``{});
	return `next;
    }


    /**********************  MAIN  ************************/

    // sequence of dialogs
    map sequence = $[
	"ws_start" : "detect",

	"detect" : $[
	    `next	: "save",
	    `abort	: `abort,
	    `config	: "joystick"
	],

	"joystick" : $[
	    `abort	: `abort,
	    `next	: "detect"
	],

	"save" : $[
	    `next	: `ws_finish
	]

    ];

    // aliases for dialogs
    map aliases = $[
	"detect"	: ``(joystick_configuration()),
	"joystick"	: [ ``(joy_dialog(selected_card)), true ],
	"save"		: ``(saveconfig())
    ];

    // create wizard dialog
    Wizard::CreateDialog();

    // read sound card configuration
    Sound::Read(``{});
    Sound::LoadDatabase();

    // read joystick configuration
    Joystick::Read(``{});

    y2milestone("read joystick configuration: %1", Joystick::joystick);

/*  TODO: test mode
    if (Mode::test == true)
    {
	// display all dialogs
    }
    else*/
    {
	// start wizard sequencer
	WizardSequencer(aliases, sequence);
    }

    // close dialog
    Wizard::CloseDialog();

}
