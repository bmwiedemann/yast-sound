/**
 * File:
 *   sound_manual.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Module for manual selection of sound card from the database
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 *
 */

{

    textdomain "sound";
    import "Wizard";
    import "Sound";
    import "Label";

    /**
     *	dialog for manual settings
     *  @return map result
     */


    global define map ManualDialog () ``{


	string helptext	    = lookup(STRINGS, "ManualDialog", "");
	list module_names   = get_module_names();
	string initial = Sound::use_alsa ? "all" : select(select(module_names, 0, []), 1, "");
	list card_names	    = get_card_names(initial);
	term con	    = `VBox ();

	con = add (con, `VBox (
	    `HBox (
		`ReplacePoint (`id (`rep_drv),
		    `SelectionBox (`id (`sel_drv), `opt(`notify),
		    // selection box title
		    _("Sound card &driver"), module_names)
		),
		`ReplacePoint(`id(`rep_mod),
		    `SelectionBox (`id (`sel_mod), `opt(`notify),
		    // selection box title
		    _("Sound card &model"), card_names)
		    )
		),
		`VSpacing (),
		// textetry label
		`TextEntry (`id(`search), `opt(`notify), _("&Search")),
		`VSpacing ()
	));

	// dialog title
	Wizard::SetContentsButtons (_("Manual sound card selection"), con,
	    helptext, Label::BackButton(), Label::NextButton());

	// set current item here
	if (Sound::curr_driver == "")
	    Sound::curr_driver = select(module_names[0]:[], 1, "");
	if (Sound::curr_model == "")
	    Sound::curr_model = card_names[0]:"";

	UI::ChangeWidget(`id(`sel_drv), `CurrentItem, Sound::curr_driver);
	UI::ChangeWidget(`id(`sel_mod), `CurrentItem, Sound::curr_model);

	UI::SetFocus (`id(`sel_drv));
	symbol ui = nil;
	do
	{
	    ui = UI::UserInput ();

	    if (ui == `sel_drv)
	    {
		string drv = UI::QueryWidget (`id(`sel_drv), `CurrentItem);
		card_names = get_card_names (drv);

		UI::ReplaceWidget (`id(`rep_mod), `SelectionBox (`id (`sel_mod),
		    // To translators: selection box title
		    _("Sound card &model"), card_names));

		if (contains (card_names, Sound::curr_model))
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			Sound::curr_model);
		else
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[0]:"");
	    }
	    else if (ui == `search)
	    {
		string entry = UI::QueryWidget (`id(`search), `Value);
		integer card_id = search_card_id (entry);
		card_names = get_card_names ("all");
		// always "all" field in drivers list
		UI::ChangeWidget(`id(`sel_drv),`CurrentItem,
		    select(module_names[0]:[], 1, ""));
		if (card_id >= 0)
		{
		    UI::ReplaceWidget (`id(`rep_mod),
			// To translators: selection box title
			`SelectionBox (`id (`sel_mod), _("Sound card &model"),
			    card_names));

		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[card_id]:"");
		}
	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if (ReallyAbort())
		{
		    ui = `abort;
		    break;
		}
	    }

	} while (!contains([`next, `back], ui));

	map ret = $["ui" : ui];

	string model   = UI::QueryWidget (`id(`sel_mod), `CurrentItem);
	string modname = UI::QueryWidget (`id(`sel_drv), `CurrentItem);

	if (ui == `next)
	{
	    Sound::curr_driver = modname;
	    Sound::curr_model = model;

	    if (modname == "all")
	    {
		modname = get_module_by_cardname(model);
	    }
	    ret = $["ui" : `next, "module" : modname, "model" : model];
	}
	return ret;
    }

    /**
     * just calls ManualDialog
     * @return map passed result from ManualDialog
     */

    global define map sound_manual() ``{
    // ==== main ====

	return ManualDialog ();
    }
}
