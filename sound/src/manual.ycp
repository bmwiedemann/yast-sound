/**
 * File:
 *   manual.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Module for manual selection of sound card from the database
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 *
 */

{

    textdomain "sound";
    import "Wizard";
    import "Sound";
    import "Label";

    /**
     * Dialog for manual settings
     * (shows the lists of Kernel Modules and Card Models)
     * @return map result
     */
    global define map ManualDialogModules () ``{

	string helptext		= STRINGS["ManualDialog"]:"";
	list module_names	= get_module_names();
	string initial		= Sound::use_alsa ? "all" :
				    select(module_names[0]:[], 1, "");
	list card_names		= get_card_names(initial);

	term con = `VBox (
	    `HBox (
		`ReplacePoint (`id (`rep_drv),
		    `SelectionBox (`id (`sel_drv), `opt(`notify),
		    // selection box title
		    _("Sound card &driver"), module_names)
		),
		`ReplacePoint(`id(`rep_mod),
		    `SelectionBox (`id (`sel_mod), `opt(`notify),
		    // selection box title
		    _("Sound card &model"), card_names)
		    )
		),
		`VSpacing (),
		// textetry label
		`TextEntry (`id(`search), `opt(`notify), _("&Search")),
		`VSpacing ()
	);

	// dialog title
	Wizard::SetContentsButtons (_("Manual sound card selection"), con,
	    helptext, Label::BackButton(), Label::NextButton());

	// set current item here
	if (Sound::curr_driver == "")
	    Sound::curr_driver = select(module_names[0]:[], 1, "");
	if (Sound::curr_model == "")
	    Sound::curr_model = card_names[0]:"";

	UI::ChangeWidget(`id(`sel_drv), `CurrentItem, Sound::curr_driver);
	UI::ChangeWidget(`id(`sel_mod), `CurrentItem, Sound::curr_model);

	UI::SetFocus (`id(`sel_drv));
	symbol ui = nil;
	do
	{
	    ui = UI::UserInput ();

	    if (ui == `sel_drv)
	    {
		string drv = UI::QueryWidget (`id(`sel_drv), `CurrentItem);
		card_names = get_card_names (drv);

		UI::ReplaceWidget (`id(`rep_mod), `SelectionBox (`id (`sel_mod),
		    // To translators: selection box title
		    _("Sound card &model"), card_names));

		if (contains (card_names, Sound::curr_model))
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			Sound::curr_model);
		else
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[0]:"");
	    }
	    else if (ui == `search)
	    {
		string entry = UI::QueryWidget (`id(`search), `Value);
		integer card_id = search_card_id (entry);
		card_names = get_card_names ("all");
		// always "all" field in drivers list
		UI::ChangeWidget(`id(`sel_drv),`CurrentItem,
		    select(module_names[0]:[], 1, ""));
		if (card_id >= 0)
		{
		    UI::ReplaceWidget (`id(`rep_mod),
			// To translators: selection box title
			`SelectionBox (`id (`sel_mod), _("Sound card &model"),
			    card_names));

		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[card_id]:"");
		}
	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if (ReallyAbort())
		{
		    ui = `abort;
		    break;
		}
	    }

	} while (!contains([`next, `back], ui));

	map ret = $["ui" : ui];

	string model   = UI::QueryWidget (`id(`sel_mod), `CurrentItem);
	string modname = UI::QueryWidget (`id(`sel_drv), `CurrentItem);
	if (ui == `next)
	{
	    Sound::curr_driver = modname;
	    Sound::curr_model = model;

	    if (modname == "all")
	    {
		modname = get_module_by_cardname(model);
	    }
	    ret = $["ui" : `next, "module" : modname, "model" : model];
	}
	return ret;
    }

    /**
     * Dialog for manual adding the sound card
     * (shows the lists of Vendors and Models)
     *  @return map result
     */
    global define map ManualDialogVendors () ``{

	string helptext		= STRINGS["ManualDialog"]:"";
	list vendor_names	= get_vendor_names ();
	list card_names		= get_card_names (Sound::curr_vendor);

	term contents = `VBox (
	    `HBox (
		`ReplacePoint (`id (`rep_vendor),
		    `SelectionBox (`id (`sel_ven), `opt(`notify),
		    // selection box title
		    _("Sound card &vendor"), vendor_names)
		),
		`ReplacePoint (`id(`rep_mod),
		    `SelectionBox (`id (`sel_mod), `opt(`notify),
		    // selection box title
		    _("Sound card &model"), card_names)
		)
	    ),
	    `VSpacing (),
	    // textetry label
	    `TextEntry (`id(`search), `opt(`notify), _("&Search")),
	    `VSpacing ()
	);

	// dialog title
	Wizard::SetContentsButtons (_("Manual sound card selection"), contents,
	    helptext, Label::BackButton(), Label::NextButton());

	// set current item here
	if (Sound::curr_vendor == "")
	    Sound::curr_vendor = select (vendor_names[0]:[], 1, "");
	if (Sound::curr_model == "")
	    Sound::curr_model = card_names[0]:"";

	UI::ChangeWidget(`id(`sel_ven), `CurrentItem, Sound::curr_vendor);
	UI::ChangeWidget(`id(`sel_mod), `CurrentItem, Sound::curr_model);

	UI::SetFocus (`id(`sel_ven));
	symbol ui = nil;
	do
	{
	    ui = UI::UserInput ();

	    if (ui == `sel_ven)
	    {
		string vendor = UI::QueryWidget (`id(`sel_ven), `CurrentItem);
		card_names = get_card_names (vendor);

		UI::ReplaceWidget (`id(`rep_mod), `SelectionBox (`id (`sel_mod),
		    // To translators: selection box title
		    _("Sound card &model"), card_names));

		if (contains (card_names, Sound::curr_model))
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			Sound::curr_model);
		else
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[0]:"");
	    }
	    else if (ui == `search)
	    {
		string entry = UI::QueryWidget (`id(`search), `Value);
		integer card_id = search_card_id (entry);
		card_names = get_card_names ("all");
		// always "all" field in vendors list
		UI::ChangeWidget (`id(`sel_ven),`CurrentItem, "all");
		if (card_id >= 0)
		{
		    UI::ReplaceWidget (`id(`rep_mod),
			// To translators: selection box title
			`SelectionBox (`id (`sel_mod), _("Sound card &model"),
			    card_names));

		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem,
			card_names[card_id]:"");
		}
	    }
	    else if ((ui == `abort || ui == `cancel) && ReallyAbort())
	    {
		ui = `abort;
		break;
	    }

	} while (!contains([`next, `back, `abort], ui));

	map ret = $["ui" : ui];


	if (ui == `next)
	{
	    string vendor	= UI::QueryWidget (`id(`sel_ven), `CurrentItem);
	    string model	= UI::QueryWidget (`id(`sel_mod), `CurrentItem);
	    string longmodel	= model;

	    if (vendor != "all")
	    {
		// vendor is included in model name
		if (vendor != "other")
		    longmodel = sformat ("%1, %2", model, vendor);
	    }
	    else
	    {
		// get vendor from cardname (for "all")
		list allcard = splitstring (model, ",");
		vendor = select (allcard, 1, "other");
		if (substring (vendor, 0,1) == " ")
		   vendor = substring (vendor, 1);
		model = allcard[0]:model;
	    }
	    string modname = get_module_by_cardname (longmodel);

	    Sound::curr_vendor	= vendor;
	    Sound::curr_model	= model;

	    ret = $["ui" : `next, "module" : modname, "model" : model];
	}
	return ret;
    }

    /**
     * Update the settings for manualy choosed card: get the default options
     * and check if it tha card wasn't detected
     * @param card_map the current card (map with at least "module" entry)
     * @return updated map of current card
     */
    global define map update_manual_card (map card_map) ``{

	string uniq_k	= isa_uniq();
	string label	= card_map["model"]:"Sound card";
	string modname	= card_map["module"]:"";

	// set default values for options
	map optlist = Sound::db_modules[modname]:$[];
	map options = $[];
	maplist(string name, map val, optlist["params"]:$[], ``{
	    if (haskey(val, "default"))
	    {
	        options = add (options, name, val["default"]:"");
	    }
	});

	// if user selects the soundcard that has been already autodetected,
	// use the detected card instead of manual selection (because it causes
	// some problems with uniq. keys)
	list det_cards = filter (map card, Sound::unconfigured_cards, ``(
	    card["module"]:nil == modname));

	y2debug("%1", det_cards);
	if (size(det_cards) > 0)
	{
	    label  = det_cards[0, "model"]:label;
	    uniq_k = det_cards[0, "unique_key"]:uniq_k;
	}

	return $[
	    "module"     : modname,
	    "model"	 : label,
	    "unique_key" : uniq_k,
	    "options"    : options
	];
    }

    /**
     * just calls ManualDialog
     * @return map passed result from ManualDialog
     */
    global define map sound_manual() ``{

	return Sound::use_alsa ? ManualDialogVendors (): ManualDialogModules();
    }
}
