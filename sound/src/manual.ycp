/**
 * File:
 *   sound_manual.ycp
 * 
 * Module:
 *   Sound
 * 
 * Summary:
 *   Module for manual selection of sound card from the database
 * 
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 * 
 *
 * $Id$
 *
 */

{

    textdomain "sound";

//    include "sound/routines.ycp";
//    include "sound/ui.ycp";
//    include "sound/texts.ycp";
    
//    map STRINGS = STRINGS_();
 
    /**
     *	dialog for manual settings
     *  @return list
     */


    global define ManualDialog () ``{
	string helptext	    = lookup(STRINGS, "ManualDialog", "");
	list module_names   = get_module_names();

	string initial = use_alsa ? "all" : select(select(module_names, 0), 1);
	list card_names	    = get_card_names(initial);//get_cards ("All");
	term con	    = `VBox ();
	
//	module_names = prepend(module_names, `item(`id("all"), _("All")));

	con = add (con, `VBox
	    (
		`HBox 
		(
		    `ReplacePoint (`id (`rep_drv),
			    // To translators: selection box title
			       `SelectionBox (`id (`sel_drv), `opt(`notify), _("Sound card &driver"), module_names)
		    ),
		    `ReplacePoint(`id(`rep_mod),
			    // To translators: selection box title
			      `SelectionBox (`id (`sel_mod), `opt(`notify), _("Sound card &model"), card_names)
		    )
		),
		`VSpacing (),
			    // textetry label
		`TextEntry (`id(`search), `opt(`notify), _("&Search")),
		`VSpacing ()
	    ));
			    // To translators: text entry label

	    // dialog title
	UI::SetWizardContents (_("Manual sound card selection"), con, helptext, true, true);
	UI::ChangeWidget(`id(`sel_drv), `CurrentItem, select(select (module_names, 0), 1, select (module_names, 0)));
	UI::ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0));
	    // Next - button label
	UI::ChangeWidget(`id(`next), `Label, UI::NextButtonLabel());

	any ui = nil;

	do 
	{
	    ui = UI::UserInput ();
	        
	    if (ui == `sel_drv) 
	    {
		any drv = UI::QueryWidget (`id(`sel_drv), `CurrentItem);
		card_names = get_card_names (drv);

		UI::ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
		    `SelectionBox (`id (`sel_mod), _("Sound card &model"), card_names));		

		// TODO: this would be nice to have from libyui instead of replacing widget
		UI::ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0));
	    }
	    else if (ui == `search) 
	    {
		string entry = UI::QueryWidget (`id(`search), `Value);
		integer card_id = search_card_id (entry);
		card_names = get_cards ("all");
		// always "all" field
		UI::ChangeWidget(`id(`sel_drv), `CurrentItem, select (module_names, 0));
		if (card_id >= 0) 
		{
		    UI::ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
				       `SelectionBox (`id (`sel_mod), _("Sound card &model"), card_names));
		
		    UI::ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, card_id));
		}
	    }
	    else if (ui == `abort || ui == `cancel)
	    {	
		if (ReallyAbort())
		{   
		    ui = `abort;
		    break;
		}
	    }	

	} while (!contains([`next, `back], ui));


	map ret = $["ui" : ui];

	any model   = UI::QueryWidget (`id(`sel_mod), `CurrentItem);
	any modname = UI::QueryWidget (`id(`sel_drv), `CurrentItem);
    
	if (ui == `next) 
	{
	    if (modname == "all")
	    {
		modname = get_module_by_cardname(model);
	    }
	    ret = $["ui" : `next, "module" : modname, "model" : model];
	}
	return ret;
    }

    global define sound_manual() ``{
    // ==== main ====

	return ManualDialog ();
    }
}
