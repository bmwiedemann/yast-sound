/**
 * File:
 *   sound_select
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   sound card selection dialog
 *
 * Authors:
 * Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 * $Id$
 *
 * Params: 1st ... list of strings of new hardware
 *         2nd ... list of strings of configured hardware
 */

{
    textdomain "sound";
    import "Wizard";

    /**
     * returns intfield (if we are running in ncurses) or
     * slider (for qt)
     * @param label label for slider
     * @param value initial value
     * @param spec true-slider false-intfield
     *
     */

    global define term volElement(string label, integer value, boolean spec) ``{
	if (spec)
	{
	    return `Slider(`id(label), `opt(`notify), label, 0, 100, value);
	}
	else
	{
	    return `IntField(`id(label), `opt(`notify), label, 0, 100, value);
	}
    }

    /**
     * creates a mixer widget with channels obtained from 1st param
     * @param channels channels to be shown
     * @return term widget
     */

    global define term mixerWidget(list channels) ``{
        term widget = `VBox();


        boolean spec = UI::HasSpecialWidget(`Slider);

	integer nchan = size(channels)-2;	 // don't count in 'Master' and 'PCM'
	integer ncols = 4; //tointeger(tofloat(nchan) / 4.0 + 0.999);	 // how many columns will we have?

	integer chansPerCol = tointeger(tofloat(nchan) / tofloat(ncols) +0.999); // how many channels per column

	term mainGroup = `Frame(_("&Master volume"));

	// group first two elements to one Frame

	integer pos = 0;

	term ttmp = nil;
	if (spec)
	{
	    ttmp = `VBox();
	}
	else
	{
	    ttmp = `HBox();
	}



	while (pos < 2 && pos < size(channels))
	{
	    string lab	= select(select(channels, pos, []), 0, "");
	    integer vol = select(select(channels, pos, []), 1, "");

	    ttmp = add(ttmp, volElement(lab, vol, spec));
	    pos = pos + 1;
	}

	ttmp = add(ttmp, `VSpacing(1));

	mainGroup = `Frame(_("&Master volume"), `HBox(`HSpacing(3), ttmp, `HSpacing(3)));

	// now group elements to columns

        integer counter = 0;
        term col = `HBox(`HSpacing(2));

	while (pos < size(channels))
	{
	    if (ncols == counter)
	    {
		widget = add(widget, `Top(col));
		if (!spec)
                {
                    widget=add(widget, `HStretch());
                }

                col = `HBox(`HSpacing(2));
                counter = 0;
	    }

	    string lab = select(select(channels, pos, []), 0, "");
	    integer vol = select(select(channels, pos, []), 1, "");

	    col = add(col, `HWeight(1, volElement(lab, vol, false)));
	    col = add(col, `HSpacing(2));

	    pos = pos + 1;
	    counter = counter + 1;
	}

	while (counter < ncols)
	{
	    col = add(col, `HWeight(1, `Label(" ")));
	    col = add(col, `HSpacing(2));
	    counter = counter + 1;
	}

        widget = add(widget, `Top(col));

        return `VBox(mainGroup, `Frame(_("&Other channels"), widget));
    }


    // show the dialog

/**
 * shows mixer dialog for respective card
 * @param card_id
 *
 */

global define map mixerDialog(integer card_id) ``{

    path pth		= topath(sformat(".audio.alsa.cards.%1.channels", card_id));
    list channels	= []; //use_alsa ? SCR::Dir(pth) : ["Master"];

    string modname = "";

    if (use_alsa)
    {
	modname = lookup(select(Sound::modules_conf, card_id, $[]), "module", "snd-card-dummy");
	if (modname != "snd-card-dummy")
	{
	    y2error("module found: %1", modname);
	}
	channels = lookup(lookup(Sound::db_modules, modname, $[]), "mixer_elements", SCR::Dir(pth));
    }
    else
    {
	channels = ["Master"];
    }

    list muted		= [];

    pth = topath(sformat(".audio.alsa.cards.%1.name", card_id));
    string card_name	= use_alsa ? SCR::Read(pth) : sformat("%1", card_id);

    // get list of muted channels
    if (use_alsa)
    {
	foreach(`e, channels,
	``{
	    path pth2 = topath(sformat(".audio.alsa.cards.%1.channels.%2.mute", card_id, e));
	    if (SCR::Read(pth2))
	    {
		muted = add(muted, e);
	    }
	});

        y2debug(sformat("%1", muted));

	// put 'Master', 'PCM' to list head
	if (contains(channels, "PCM"))
	{
	    channels = filter(`e, channels, ``(e!="PCM"));
	    channels = prepend(channels, "PCM");
	}


	string master_channel = lookup(lookup(Sound::db_modules, modname, $[]), "main_volume", "Master");
	if (modname != "")
	if (contains(channels, master_channel))
	{
	    channels = filter(`e, channels, ``(e!=master_channel));
	    channels = prepend(channels, master_channel);
	}

	channels = maplist(`e, channels,
	``{
	    if (contains(muted, e))
	    {
		return [e, 0];
	    }
	    else
	    {
	    return [e, SCR::Read(topath(sformat(".audio.alsa.cards.%1.channels.%2.volume", card_id, e)))];
	    }
	});
    }
    else
    {
	integer vol = SCR::Read(topath(sformat(".audio.oss.cards.%1.channels.Master", card_id)));
	channels = [["Master", vol]];
    }

    string help = _("<P>With this dialog you can set volume for each channel of the selected sound card. 
Press <B>Next</B> to save your volume settings, press <B>Back</B> to restore the original settings.</P>");

    term con = mixerWidget(channels);
    Wizard::SetContents (sformat(_("Volume settings for card '%1'"), card_name),con, help, true, true);
    UI::ChangeWidget(`id(`next), `Label, UI::NextButtonLabel());

    any	    ui = nil;	// 'any' is essential here- value can be `next `abort... or string (channel name,
			//  whose name is dynamical)
    integer value = 0;

    repeat
    {
	ui = UI::UserInput();

	if (is(ui, string))
	{
	    // unmute if neccessary
	    if (contains(muted, ui))
	    {
		path pth3 = topath(sformat(".audio.alsa.cards.%1.channels.%2.mute", card_id, ui));
		SCR::Write(pth3, false);
	    }
	    // set volume
	    if (use_alsa)
	    {
		pth = topath(sformat(".audio.alsa.cards.%1.channels.%2.volume", card_id, ui));
		value = UI::QueryWidget(`id(ui), `Value);
		SCR::Write(pth, value);
	    }
	    else
	    {
		SetVolume("Master", card_id, UI::QueryWidget(`id(ui), `Value));
	    }
	}
	else if (ui == `abort && ReallyAbort())
	{
	    return $["ui": `abort];
	}

    } until (ui == `back || ui == `next);

    if (ui == `next)
    {
	// store volume settings
	path pth = topath(sformat(".audio.alsa.cards.%1.store", card_id));
	SCR::Execute(pth, 0, 0);
    }
    else
    {
	// restore volume settings
        path pth = topath(sformat(".audio.alsa.cards.%1.restore", card_id));
        SCR::Execute(pth, 0, 0);
    }


    return $["ui": ui];

}

}
