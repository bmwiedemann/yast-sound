/**
 *
 * File:
 *   sound_options.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Module for setting options passed to the module
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>, Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * parameters: 1st: parameter list
 *
 */

{

    textdomain "sound";
    import "Wizard";

    /**
     * default widget when there are no known values
     * @return term widget
     */

    global define term defWidget() ``{
	return `Label(_("Possible value:\nnot known"));
    }

    /**
     * widget for choosing one value from list
     * @param tail string with values eg. "12,3,4,6"
     * @param default string default value (preselected in combo)
     * @return term combobox widget
     */

    global define term gen_list(string tail, string default) ``{
	list vals = splitstring(tail, ",");
	vals = maplist(`e, vals, ``(`item(`id(e), sformat("%1", e))));

	return `ComboBox(`id(`poss), `opt(`notify), _("&Possible value:"), vals);
    }

    /**
     * integer widget
     * @param tail string range description "1-19"
     * @param default string default value
     * @return intfield widget
     */

    global define term gen_intfield(string tail, string default) ``{
	list rng = splitstring(tail, "-");
	if (size(rng) < 2)
	{
	    return defWidget();
	}
	integer lower = 0;
	integer upper = 100;
	lower = tointeger(select(rng, 0, "0"));
	upper = tointeger(select(rng, 1, "0"));
	return `IntField(`id(`poss), `opt(`notify), _("&Possible value:"), lower, upper, tointeger(default));
    }

    /**
     * combo with values 0/1
     * @param default boolean preselected value
     * return combobox widget
     */

    global define term gen_bool(string default) ``{
	return `ComboBox(`id(`poss), `opt(`notify), _("&Possible value:"), [`item(`id("0"), "0", default == "0"),
	    `item(`id("1"), "1", default == "1")]);
    }

    /**
     * irq selector widget
     * @param default
     * @return combo wodget
     */

    global define term gen_irq(string default) ``{
	list irqs = ["3", "5", "7", "9", "10", "11", "12", "15"];
	irqs = maplist(`e, irqs, ``(`item(`id(e), e, default == e)));
	return `ComboBox(`id(`poss), `opt(`notify), _("&Possible value:"), irqs);
    }

    /**
     * dma selector widget
     * @param default string preselected value
     * @return combo widget
     */

    global define term gen_dma(string default) ``{
	list dmas = ["-1", "0", "1", "3", "5", "6", "7"];
	dmas = maplist(`e, dmas, ``(`item(`id(e), e, default==e)));
        return `ComboBox(`id(`poss), `opt(`notify), _("&Possible value:"), dmas);
    }

    /**
     * dma size value selector
     * @param default string
     */

    global define term gen_dma_size(string default) ``{
	return gen_intfield("4-64", default);
    }

    /** replaces `reppoint replacePoint by widget due to value contents.
     *   for list it's combobox, for range it's ... widget
     * @param values string
     * @param default string
     */

    global define void updatePossibleValues(string values, string default) ``{
	if (values == "")
	{
	    UI::ReplaceWidget(`id(`reppoint), defWidget());
	    return;
	}
	values = substring(values, 1, size(values) - 2);
	term widg = defWidget();

	list slist = splitstring(values, "=");
	if (values == "BOOL")
	{
	    widg = gen_bool(default);
	}
	else if (values == "IRQ")
	{
	    widg = gen_irq(default);
	}
	else if (contains(["DMA", "DMA8", "DMA16"],values))
	{
	    widg = gen_dma(default);
	}
	else if (contains(["DMA_SIZE", "DMA8_SIZE", "DMA16_SIZE"], values))
	{
	    widg = gen_dma_size(default);
	}
	else if (size(slist) == 2)
	{
	    string head = select(slist, 0, "");
	    string tail = select(slist, 1, "");
//	    y2error(sformat("'%1' '%2'", head, tail));
	    if (head == "list")
	    {
		widg = gen_list(tail, default);
	    }
	    else if (head == "range")
	    {
		widg = gen_intfield(tail, default);
	    }
	}

	UI::ReplaceWidget(`id(`reppoint), widg);

    }

    /**
     * displays dialog with card options
     *
     * @param cardlabel string label for the card
     * @param options list. list where each item is map
     *        with keys: name, value, type, default, description.
     *	      values in map are strings
     * @return map
     *
     */

    global define map OptionsDialog (string cardlabel, map opts) ``{


	string help_text = lookup(STRINGS, "OptionsDialog", "");

	term con = `VBox ();

	map origOptions = opts;
//	y2error(sformat("%1", origOptions));
				    // always omit these options -- they are assigned dynamically
//	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_id"));
//	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_index"));
	list options = maplist (`e, `f, opts, ``($["description" : lookup (f, "descr", _("No description available")),
						//mysformat (lookup (e, "descr", [])),
						// if no option name is available
						"name"         : e,
						"value"        : lookup (f, "value", ""),
						"type"         : lookup (f, "type", "string"),
						"default"      : lookup (f, "default", "")]));

	list itemized_descriptions = create_table (options, ["description", "name", "value"]);

	integer current_option = 0;
	string current_option_name = lookup (select (options, 0, ""), "name", "");

	if (size (itemized_descriptions) > 0)
	{
	    con = OptionsCon(cardlabel, itemized_descriptions, current_option, current_option_name);
	}
	else			// there are no options
	{
	    con = `VBox (//`Top(`Label ( cardlabel)),
			       // To translators: label message
			       `HVCenter (`Label (_("There are no options for this module"))));

	}


		// dialog title
	Wizard::SetContents (_("Sound card advanced options"), con, help_text, true, true);
	if (size (itemized_descriptions) > 0)
	{
	    UI::ChangeWidget(`id(`table), `CurrentItem, 0);
	}

	symbol ui = nil;

	repeat
	{
	    ui = UI::UserInput ();

	    if (ui == `table)
	    {
		current_option = UI::QueryWidget (`id(`table), `CurrentItem);
		current_option_name = select(UI::QueryWidget(`id(`table), `Item(current_option)), 2, "");

		    // to translators: name of currently selected option: eg. 'Option: snd_asdf'
		UI::ChangeWidget(`id(`des), `Label, sformat("%1 %2", _("Option: "),current_option_name));
		UI::ChangeWidget(`id(`des), `Value, select(UI::QueryWidget(`id(`table), `Item(current_option)), 3, ""));

		    // update possible values
		list tmp = filter(`e, origOptions, ``(lookup(e, "name", "")==current_option_name));
		string vals = "";
		if (size(tmp) == 0)
		{
		    vals = "";
		}
		else
		{
		    vals = lookup(select(tmp, 0, ""), "values", "");
		}

		updatePossibleValues(vals, select(UI::QueryWidget(`id(`table), `Item(current_option)), 3, ""));

	    }
	    if (ui == `poss)
	    {
		current_option = UI::QueryWidget (`id(`table), `CurrentItem);
                current_option_name = select(UI::QueryWidget(`id(`table), `Item(current_option)), 2, "");

		string value = sformat("%1", (UI::QueryWidget(`id(`poss), `Value)));

		UI::ChangeWidget(`id(`des), `Value, value);
	    }
	    if (ui == `set)	// ui ==`set) set button pressed
	    {
		string value = UI::QueryWidget(`id(`des), `Value);

		if (size (value) == 0)  // we don't care  about empty values
		{
		    UI::ChangeWidget(`id(`table), `Item(current_option, 2), "");
		    continue;
		}

		list possible_values = parse_values(lookup (select (options, current_option, ""), "values", ""));

		string err = check_value (value,
						  lookup (select (options, current_option, ""), "type", "string"),
						  []); //possible_values);

		if (size (err) > 0)  // error - wrong value
		{
		    UI::MessagePopup (err);
		    UI::ChangeWidget(`id(`des), `Value, "");

		}
		else		// value is correct
		{

		    UI::ChangeWidget(`id(`table), `Item(current_option, 2), value);
		    list tmp = [];
		    maplist (`e, itemized_descriptions, ``{
				  if (current_option == select(select (e, 0, ""), 0, ""))
				      tmp = add (tmp, `item(select (e, 0, ""), 
					    select (e, 1, ""), select (e, 2, ""), value));
				  else
				      tmp = add (tmp, e);
			      });
		    itemized_descriptions = tmp;
		}

	    }
	    else if (ui == `reset && UI::YesNoPopup(_("Do you really want to reset all values?")))
	    {
		UI::ChangeWidget(`id(`des), `Value, "");

		integer i = 0;
		while (i < size (itemized_descriptions))
		{
		  UI::ChangeWidget(`id(`table), `Item(i, 2), lookup (select(options, i, ""), "default", ""));
		  i = i + 1;
		}

	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if (ReallyAbort())
		{
		    ui = `abort;
		    break;
		}
	    }
	} until (((ui == `back) || (ui == `next) || ui == `cancel));

	return $["ui" : ui, "return" : itemized_descriptions];
    }

// ===== MAIN =====

    /**
     * just calls options dialog
     * @param save_entry map with card configuration
     * @return symbol
     */

    global define map sound_options(map save_entry) ``{


//    map save_entry	= Args(0);
    string modname	= lookup(save_entry, "module", "");
    string cardlabel	= lookup(save_entry, "model", "");
    map params		= get_module_params(modname);


    map p2 = restore_mod_params(params, lookup(save_entry, "options", []));

    params = restore_mod_params(params, lookup(save_entry, "options", []));

    UI::ChangeWidget(`id(`next), `Label, UI::NextButtonLabel());

    // now show the dialog
    map result  = OptionsDialog (cardlabel, params);
    list vals	= lookup(result, "return", []);

      // convert from table entries back to card
    map opts = $[];
    foreach(`v, vals,
    ``{
	if (select(v, 3, "") != "")
	{
	    opts = add(opts, select(v, 2, ""), select(v, 3, ""));
	}

    });

    save_entry = add(save_entry, "options", opts);

    return $["ui" : lookup (result, "ui", `cancel), "return" : save_entry];
}

}
