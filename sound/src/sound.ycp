/**
 *
 *
 * File:
 *   sound.ycp
 *
 * Module:
 *   Sound 	 
 *
 * Authors:
 *   Dan Veselý	<dan@suse.cz>
 *
 * $Id$
 *
 * Installation of the sound card. If the sound card was not auto-detected ask user.
 *		     
 *
 */

{

    textdomain "sound";

    include "misc_defines.ycp";
    include "sound/routines.ycp";
    include "sound/ui.ycp";
    include "sound/texts.ycp";

//    include "browser.ycp";

    // text constants for sound module
    map STRINGS=STRINGS_();
  
    // Menuentry for the YaST2 menu
    if (Args() == [ "get_menuentry" ])
    {
	return [ "sound", $[
	    `menuentry    : UI(_("Hardware/Sound")),
	    `arguments    : [ ],
	    `widget       : `RichText(
	    //
	    UI(_("Launch this module to configure your sound card."))
	    +
	    UI(_("<p>You need to be logged in as <i>root</i> in order to do this.</p>"))),
	    `codefragment : nil ]
	];
    }

    
    /**
     * Wizard steps: 1. displayname 
     * <br>
     * 2. modprobe and volume settings
     * @param   card_info as returned by libhd
     * @param	car_id index of configured car
     * @param	ui 
     * @param	flags defines which radioboxes has to be enabled (0x1 - first, 0x2 second, 0x4 third...)
     * @param	finish true if no complex dialog is to be called (then the popup "Config will be saved.." will appear)
     * @return  list with save info, as required by sound_write for one cards
     */
    global define OneCardWizard (map card, integer card_id, any ui, integer flags, boolean finish) ``{
	    // 3rd param for "sound_module" will be defined later

	list dialog = [``(DisplayName (hardware_name (card), sformat("snd-card-%1", card_id), card_id, flags)),
		    ``(CallModule ("sound_volume", [card, card_id, finish, quick] ))]; 
	integer id = 0;
	if (ui == `back)
	{
	    id = size (dialog) - 1;
	}
	any result = $[];
	any ui = nil;

	boolean success = false;
	any act_dialog = nil;

	boolean quick=false;

	while ((id >= 0) && (id < size (dialog))) 
	{

	    act_dialog = select (dialog, id);

	    if (id+1 == size (dialog))
	    {
		if (!nm256hack(card)) 
		{
		    id = 0;
		    continue;
		}
	    }

 
	    result=eval(act_dialog);

	    ui = lookup(result, "ui", `cancel);

	    if (ui == `skip)
	    {	
		break;
	    }
	      // case: next
	    else if (ui == `next || ui == `quick) 
	    {
		if(ui == `quick) quick=true;
		else quick=false;
		id = id + 1;

		if (id == size (dialog)) 
		{
		    success = lookup (result, "return", false);
		}
		else 
		{
		    if (act_dialog == ``(CallModule ("sound_options", [card]))) 
		    {
			card = lookup (result, "return", $[]);
		    }
		}
	    }
		// case: back
	    else if (ui == `back) 
	    {
		id = id - 1;
		if (id == 0) 
		{
		    dialog = filter (`e, dialog, ``(e != ``(CallModule ("sound_options", [card]))));
		}
	    }
		// case: options
	    else if (ui == `options) 
	    {
		list nd   = [];
		integer i = 0;
		// insert into the pre-last position
		foreach (`e, dialog, ``{
		    if ((size (dialog) - 1) == i) 
		    {
			nd = add (nd, ``(CallModule ("sound_options", [card])));
		    }
		    nd = add (nd, select(dialog, i));
		    i = i + 1;
		});
		dialog = nd;
		id = id + 1;
	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		{
		    return $["ui": `abort];
		}
	    }
	}
	map ret = $[];

	if (((ui == `next) && success) || (ui == `back)) 
	{
	    result = create_save_info (card, card_id);
	    if (size (result) > 0)
	    {
		ret = add (ret, "return", result);
	    }
	}

	if (no_alsa_exception (card, config_mode))
	{
	    ret = add (ret, "use_alsa", false);
	}
	return add (ret, "ui", ui);
    }

    // ========== MAIN ==========
    OpenMainDialog();
    InitializingDialog ();

    UI(`DisableWizardAbortButton());

    boolean test_mode     = false;
    boolean config_mode   = false;
    boolean autoinst_mode = false;
    boolean use_alsa      = true;	// default
    boolean from_menu     = false;

    integer arg_n = size (Args ()) - 1;
    while (arg_n >= 0) 
    {
	if (Args(arg_n) == .test)
	{ 
	    test_mode     = true;
	}
	if (Args(arg_n) == .autoinst_mode) 
	{
	    autoinst_mode = true;
	}
	if (Args(arg_n) == .conf_mode)    
	{
	    config_mode   = true;
	}
	if (Args(arg_n) == .from_menu)
	{
	    from_menu     = true;
	}
	arg_n = arg_n - 1;
    }
    list sound_cards  = get_audio (test_mode, config_mode);

    list save_info    = read_save_info ();
   
    // filter out save_info of non-present hardware
/*    list obs=get_obsoletes(sound_cards, read_unique_keys());
    integer obs_pos=size(obs)-1;
    string pth="";
    while(obs_pos>=0)
    {
	// first remove alias
	pth=sformat("snd-card-%1", obs_pos);
	SCR(`Write(.modules.alias, nil, pth));	
    
	save_info=remove(save_info, select(obs, obs_pos));
	obs_pos=obs_pos-1;
    }   
*/
    // TODO: save modules.conf now if changed

    CreateTmpModulesConf();
 
    map rc_vars       = $[];
    integer card_id   = 0;

    integer n_cards   = 0;
    map result        = $[];
    any ui            = nil;
    boolean cont      = true;
    boolean call_complex_dialog = false;	
    list configured_unique = []; // list of unique keys, that was configured

    boolean exit = false;
    list db = GetCardDatabase(); 
    if (db==nil) 
    {
	UI(`MessagePopup (_("The Sound card database cannot be found.\nPlease check your installation")));
	exit = true;
    }

    // get all the apropriate information from the database
    sound_cards =  maplist(`e, sound_cards, ``(add (e, "module", get_module (e))));

//    BrowseTree(sound_cards);

    // filter out modules with unspecified module name (sound card not supported by alsa / not autodetected)
    sound_cards = filter(`e, sound_cards, ``(lookup(e, "module", $[])!=$[]));

    integer all_cards_num=size(sound_cards);

  //  list already=read_unique_keys();
    list already=get_present_unique_keys(sound_cards, read_unique_keys());
    
//    y2error(sformat("alredy configured: %1", already));
    configured_unique=already;
	// filter out cards that had been already configured
    sound_cards = filter (`e, sound_cards, ``(!contains (already, lookup (e, "unique_key", ""))));
    integer new_cards_num=size(sound_cards);

    if(exit)
    {	// no sound cards database present, shutting down
	UI(`CloseDialog ());
	return;
    }


    boolean skipped = false;
//    call_complex_dialog = ( size (sound_cards) != 1 );	
    if(all_cards_num == new_cards_num && all_cards_num == 1)
    {
	call_complex_dialog=false;
    }
    else
    {
	call_complex_dialog=true;
    }
    
    nm256_opl3sa2_warn(sound_cards);

    while (cont) 
    {
		    // wizards ...
	while ((card_id >= 0) && (card_id < size (sound_cards))) 
	{

	    result = OneCardWizard (select (sound_cards, card_id), size (save_info), 
				    condition (skipped, `next, ui), 15, !call_complex_dialog);


	    ui       = lookup (result, "ui", `cancel);
	    use_alsa = lookup (result, "use_alsa", true);

	    if (ui == `cancel || ui == `abort)
	    {	
		UI(`CloseDialog());
		return;
		//break;
	    }
	    if (ui == `skip) 
	    {
		card_id = card_id + 1;
		call_complex_dialog=true;
		skipped = true;
	    }
	    if (ui == `back) 
	    {
		map rem = lookup (result, "return", $[]);
		save_info = filter (`e, save_info, ``(e != rem));
		configured_unique = filter (`e, configured_unique, ``(lookup (select (sound_cards, card_id), "unique_key", "") != e));
		card_id = card_id - 1;
	    }
	    if (ui == `next) 
	    {
		map new = lookup (result, "return", $[]);
		save_info = add (save_info, new);
		configured_unique = add (configured_unique, lookup (select (sound_cards, card_id), "unique_key", ""));
		card_id = card_id + 1;
		skipped = false;
	    }
    
	}

	if (ui == `abort || ui == `cancel) 
	{
	    UI(`CloseDialog());
	    return;
	}

	if (ui == `back) 
	{   // exit module
	    break;
	}
    
	if (call_complex_dialog) 
	{
	    result = CallModule ("sound_complex", [get_audio(false, false)/*sound_cards*/, save_info, configured_unique]);
	    //BrowseTree(["result from complex", result]);
	}
	else
	{
	    result = $["ui" : `next, "save_info" : save_info];
	}

	ui = lookup (result, "ui", `cancel);
	if(ui == `abort)
	{
	    UI(`CloseDialog());
	    return;
	}

	if ((ui == `next) && (size (sound_cards) != 1)) 
	{
	
      // confirmation popup message
	    string warn_msg = lookup(STRINGS, "ConfigSaveWarn", "");

	    if (size(filter (`e, lookup (result, "save_info", $[]), ``((size (e) > 0) && (lookup (e, "name", "off") != "off")))) == 0)
	    {
	// confirmation popup message		
		warn_msg = lookup(STRINGS, "ConfigSaveWarn2", "");
	    }

	// Yes, No - button label
	    cont = !(UI (`YesNoPopup (warn_msg)));
	
	    if (call_complex_dialog) 
	    {
		save_info = lookup (result, "save_info", $[]);
		rc_vars   = lookup (result, "rc", $[]);
		configured_unique = lookup (result, "configured_unique", []);
	    }
	    else
	    {
		skipped = true;
	    }
	}
	else 
	{
	    if ((size (sound_cards) != 1))
	    {
		cont = false;
	    }
	    else 
	    {
		if (ui == `back) 
		{
		    card_id = card_id - 1;
		}
	    }

	}
	if ((size (sound_cards) == 1)) 
	{
// !!!!!!!!
	    if (call_complex_dialog)
            {
                save_info = lookup (result, "save_info", $[]);
                rc_vars   = lookup (result, "rc", $[]);
                configured_unique = lookup (result, "configured_unique", []);
            }
// !!!!!!!
	    cont = false;
	}
    }
			    // filter out empty enries
    save_info = filter (`e, save_info, ``(size (e) > 0));
    n_cards = size (save_info);

    map save_map = $[];

    if ((n_cards > 0) && (ui == `next)) 
    {
	if (use_alsa) 
	{
	    string snd_name = "off";

	    if (size (filter (`e, save_info, ``(lookup (e, "name", "off") != "off"))) > 0)
	    {
		snd_name = "snd";
	    }

	    save_info = prepend (save_info, $["name"   : snd_name,
				      "modules" : $["alias"  : "char-major-116",
						    "options" : $["snd_cards_limit" : sformat ("%1", n_cards),
						     "snd_major"        : "116"]]]);

	    save_map = add (save_map, "cards",  save_info);
	    save_map = add (save_map, "system", $["modules" : alsa_oss (n_cards),
					     "rc"       : rc_vars]);
	    save_map = add (save_map, "other",  ``(AlsaFinish ()));

	}
	else 
	{
	// no alsa
	    string mod_name = lookup (select (sound_cards, 0), "module", "");
	    if (size (mod_name) > 0)
	    {
		save_map = add (save_map, "system", no_alsa (mod_name));
	    }
	}

    //UI(`DebugDialog (save_info));


	CallModule ("sound_write", [save_map, test_mode]);

    
    }    

    if (ui == `next) 
    {
    // always save unique keys 
	save_unique_keys (get_audio (test_mode, config_mode), configured_unique);

	if (lookup (rc_vars, "START_ALSA", "no") == "no")
	{
	    SCR(`Execute (.target.bash, "/etc/init.d/alsasound stop", $[]));
	}
	else
	{
	    SCR(`Execute (.target.bash, "/sbin/depmod", $[]));
	    SCR(`Execute (.target.bash, "/etc/init.d/alsasound restart", $[]));
	}
    }

    UI(`CloseDialog ());
}
