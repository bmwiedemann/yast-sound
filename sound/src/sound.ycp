/**
 *
 *
 * File:
 *   sound.ycp
 *
 * Module:
 *   Sound 	 
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * Installation of the sound card. If the sound card was not auto-detected ask user.
 *		     
 *
 */

{

    textdomain "sound";

    include "misc_defines.ycp";

    include "wizard/sequencer.ycp";
    include "ui/wizard_hw.ycp";
    include "ui/common_popups.ycp";
    include "ui/wizard_dialog.ycp";

    include "sound/alsa_routines.ycp";
    include "sound/card_wizard.ycp";
    include "sound/read_routines.ycp";
    include "sound/routines.ycp";
    include "sound/texts.ycp";
    include "sound/ui.ycp";
    include "sound/write_routines.ycp";

    // text constants for sound module
    map STRINGS=STRINGS_();
    float oldf=0.0; 

    // just cover functions for wizard sequencer
    // these global variables are used and modified: 
    //	  save_info
    //	  card_id
    //    sound_cards  

    /*
     * card selection
     *
     */


    map save_entry=$[];

    global define _snd_select() ``{
	list nh=maplist(`e, sound_cards, ``(lookup(e, "model", "")));
	if(size(nh)==0)
	{
	    return `detail;
	}

        list ch=maplist(`e, save_info, ``(lookup(e, "model", ""))); 
	map res=CallFunction(`sound_select(nh, save_info));
	card_id=lookup(res, "id", -1);
	if(card_id==-1)
	{
	    return `manual;
	}
	return lookup(res, "ui", `abort);
    }

    /**
     *
     *
     */

    global define _snd_quick() ``{
	save_entry=select(sound_cards, 0);
	card_id=0;
	string modelname=lookup(save_entry, "model", "");
	map res=quickConfig(modelname, "snd-card-0", card_id, 15);
	symbol ui=lookup(res, "ui", nil);
//	if(ui==`next)
//	{
//	    save_info=[save_entry];
//	}
	return ui;	
    }

    global define _snd_quick2(boolean type) ``{
	save_entry=add_common_options(save_entry, 0);
	save_entry=add_alias(save_entry, 0);
	map res=CallFunction (`sound_volume(save_entry, 0, true, type, []));
	symbol ui=lookup(res, "ui", nil);
	if(ui==`next)
	{
	    save_info=[save_entry];
	}
	return ui;
    }

    /*
     * card selection
     *
     */

    global define _snd_manual() ``{
	map res = add_card_manually(save_info);
	symbol ui = lookup(res, "ui", `abort);
	if(ui == `next)
	{
	    save_info = add(save_info, lookup(res, "return", $[]));
	}	
	return ui;
    }

    /*
     * card selection
     *
     */

    global define _snd_options() ``{

    }

    /*
     * card selection
     *
     */

    global define _snd_config() ``{
	map save_entry=select(sound_cards, card_id);
	map res=OneCardWizard(save_entry, size(save_info), false, 15, false, save_info);

        symbol ui=lookup(res, "ui", nil);
        if(ui==`next)
        {
            save_info=add(save_info, lookup(res, "return", $[]));
            sound_cards=remove(sound_cards, card_id);
            // TODO: another dialog should be called
        }
	return ui;
    }

    /*
     * card selection
     *
     */

    global define _snd_complex() ``{
	map res=CallFunction(`sound_complex(save_info));
        symbol ui=lookup(res, "ui", nil);
        if(ui==`next)
        {
            save_info=lookup(res, "save_info", []);
            rc_vars=lookup(res, "rc_vars", []);
            state=`save;
        }
	return ui;
    }

    /*
     *
     * ========== MAIN ==========
     *
     */


    OpenMainDialog();
    InitializingDialog ();

    UI::DisableWizardAbortButton();
    boolean test_mode     = false;
    boolean config_mode   = false;
    boolean autoinst_mode = false;
    boolean use_alsa      = true;	// default
    boolean from_menu     = false;

    integer arg_n = size (Args ()) - 1;
    while (arg_n >= 0) 
    {
	if (Args(arg_n) == .test)
	{ 
	    test_mode     = true;
	}
	if (Args(arg_n) == .autoinst_mode) 
	{
	    autoinst_mode = true;
	}
	if (Args(arg_n) == .conf_mode)    
	{
	    config_mode   = true;
	}
	if (Args(arg_n) == .from_menu)
	{
	    from_menu     = true;
	}
	arg_n = arg_n - 1;
    }
    list sound_cards  = get_audio ();

    list save_info    = read_save_info ();
 
    map rc_vars       = $[];
    integer card_id   = 0;

    integer n_cards   = 0;
    map result        = $[];
    any ui            = nil;
    boolean cont      = true;
    boolean call_complex_dialog = false;	
    list configured_unique = []; // list of unique keys, that was configured

    boolean exit = false;
    list sound_db = nil;

    if(!fileexist("/usr/lib/YaST2/sndcards.ycp"))
    {
	UI::MessagePopup(_("Sound card database not found. Please check your installation."));
	UI::CloseDialog();
	return;			
    }
    sound_cards=filter_configured(save_info, sound_cards);
    if(size(sound_cards)>0)
    {
	// get all the apropriate information from the database
	sound_cards =  maplist(`e, sound_cards, ``(add (e, "module", get_module (e))));

    // filter out modules with unspecified module name (sound card not supported by alsa / no module found)
	sound_cards = filter(`e, sound_cards, ``(lookup(e, "module", $[])!=$[]));
    // create save_info entries
	sound_cards = convert_to_save_info(sound_cards);
    }
    integer all_cards_num=size(sound_cards);

    if(exit)
    {	// no sound cards database present, shutting down
	UI::CloseDialog ();
	return;
    }
    SCR::Execute(.target.bash, "rm /tmp/modules.conf > /dev/null 2>&1; touch /tmp/modules.conf > /dev/null 2>&1", $[]);
//    SaveModulesEntry(save_info, [], true);
    boolean skipped = false;
    if(all_cards_num == 1)
    {
	call_complex_dialog=false;
    }
    else
    {
	call_complex_dialog=true;
    }
    
    nm256_opl3sa2_warn(sound_cards);

    symbol state=`card_select;

    
    // test data
//    save_info=[];
//    sound_cards=[$["model":"Pokusna karta", "module": "snd-card-emu10k1", "unique_key":"kx", "options": []]];

    string initial="intro";

    if(size(sound_cards)==1 && size(save_info)==0)
    {
	card_id=0;
	initial="quick";
    }
    else if(size(sound_cards)==0)
    {
	initial="complex";
    }
    

    map m_aliases=$[
	    "intro"	: ``(_snd_select()),
	    "config"	: ``(_snd_config()),
	    "options"	: ``(_snd_options()),
	    "manual"	: ``(_snd_manual()),
	    "complex"	: ``(_snd_complex()),
	    "quick"	: ``(_snd_quick()),
	    "quick2"	: ``(_snd_quick2(true)),
	    "quick3"	: ``(_snd_quick2(false))
	];

    map m_sequence=$[
	    "ws_start"	: initial,
	    "quick"	:
		$[
		    `quick	    :	"quick2",
		    `normal	    :	"quick3",
		    `abort	    :	`abort,
		    `intro	    :	"intro"
		    
		],
	    "quick2"	:
		$[
		    `next	    :	`finish,
		    `abort	    :	`abort
		],
	    "quick3"	:
		$[
		    `next	    :	`finish,
		    `abort	    :	`abort
		],
	    "intro"	: 
		$[
		    `next	    :	`finish,
		    `configure	    :   "config",
		    `options	    :	"options",
		    `manual	    :	"manual",
		    `detail	    :	"complex",
		    `abort	    :	`abort
		],
	    "config"	: 
		$[
		    `next	    :	"intro",
		    `skip	    :	"manual",
		    `abort	    :   `abort
		],
	    "options"	:
		$[
		    `next	    :	"intro",
		    `abort	    :	`abort
		],
	    "manual"	: 
		$[
		    `next	    :	"intro",
		    `abort	    :	`abort		
		],		
	    "complex"	:
		$[
		    `next	    :	`finish,
		    `abort	    :	`abort
		]
	];

    symbol ui=WizardSequencer(m_aliases, m_sequence);

    if(ui==`back || ui==`abort)
    {
	UI::CloseDialog();
	return;
    }

    y2error("final save_info: %1", save_info);
			    // filter out empty enries
    save_info = filter (`e, save_info, ``(size (e) > 0));
    n_cards = size (save_info);

    map save_map = $[];

    if (ui == `finish) 
    {
	CallFunction (`sound_write(save_info, rc_vars));

    // always save unique keys 
	save_unique_keys (maplist(`e, save_info, ``(lookup(e, "unique_key", ""))));

//	if (lookup (rc_vars, "START_ALSA", "yes") == "no")
//	{
//	    SCR(`Execute (.target.bash, "/etc/init.d/alsasound stop", $[]));
//	}
//	else
//	{
//	    SCR(`Execute (.target.bash, "/sbin/depmod", $[]));
//	    SCR(`Execute (.target.bash, "/etc/init.d/alsasound restart", $[]));
//	}
    }

    UI::CloseDialog ();
}
