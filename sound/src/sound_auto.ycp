/**
 * File:
 *   sound_auto.ycp
 *
 * Package:
 *   Configuration of sound
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of x settings
 * @return boolean success of operation
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = CallModule ("x_auto", [ mm ]);
 */

{
    textdomain "sound";

    import "Sound";
    import "Mode";
    import "Summary";
    import "Wizard";
    Mode::config = true;
    Sound::autoinstallation = true;

    list args = Args ();
    if ( size (args) <= 0 )
    {
	y2error ("Did not get the settings, probably some mistake...");
	return false;
    }
    if ( !is ( Args (0), map ) )
    {
	y2error ("Bad argument for sound_auto: %1", Args (0));
	return false;
    }
    
    // The settings are in the first argument
    map settings = $[];    
    {
	integer i = 0;
	while (i < size (Args()))
	{
	    if (is (Args (i), map) && nil != Args (i))	settings = Args (i);	    
	    i = i + 1;
	}
    }
         
    Sound::Import ( settings );
    y2milestone("Imported: (%1)", settings);

    define set_contents() ``{	
	term contents =
	    `VBox(
		  `VSpacing(1),
		  `RichText( `id(`summary), Sound::Summary()),
		  `VSpacing(),
		  `HBox(
			`PushButton(`id(`configure), _("&Configure Sound")),
			`HStretch(),
			`PushButton(`id(`reset), _("&Reset Configuration"))
			)
				
		  );		
	Wizard::SetContents(_("Sound Configuration"),	
			    contents, "", true, true);
    }

    set_contents();
    any result = nil;
    any ret = nil;
    repeat {
	ret = UI::UserInput();
	if (ret == `configure)
	{	    	       
	    result =  CallFunction(`sound());
	    y2milestone("result: %1", result);
	    if (result == `next || result == `finish)
	    {
		settings = Sound::Export ();
	    } 
	    Sound::Set(settings);
	    set_contents();
	}
	else if ( ret == `reset)
	{
	    settings= $[];
	    Sound::Set(settings);
	    set_contents();
	}		
    } until (ret == `back || ret == `next || ret ==`key);   
  
    return [ret, settings];
           
}
