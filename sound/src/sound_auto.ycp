/**
 * File:
 *   sound_auto.ycp
 *
 * Package:
 *   Configuration of sound
 *
 * Summary:
 *   Client for autoinstallation
 *
 * Authors:
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * This is a client for autoinstallation. It takes its arguments,
 * goes through the configuration and return the setting.
 * Does not do any changes to the configuration.
 */

/**
 * @param first a map of x settings
 * @return boolean success of operation
 * @example map mm = $[ "FAIL_DELAY" : "77" ];
 * @example map ret = WFM::CallModule ("x_auto", [ mm ]);
 */

{
	textdomain "sound";

	y2milestone("----------------------------------------");
	y2milestone("Sound auto started");

	import "Sound";
	import "Mode";
	import "Summary";
	import "Wizard";
	Mode::config = true;

	any ret = nil;
	string func = "";
	map param = $[];

	/* Check arguments */
	if(size(Args()) > 0 && is(Args(0), string)) {
		func = WFM::Args(0);
		if(size(Args()) > 1 && is(Args(1), map))
			param = WFM::Args(1);
	}
	y2debug("func=%1", func);
	y2debug("param=%1", param);

	/* Create a  summary*/
	if(func == "Import") {
		ret = Sound::Import(param);
	}
	/* Create a  summary*/
	else if(func == "Summary") {
		ret = Sound::Summary();
	}
	/* Reset configuration */
	else if (func == "Reset") {
		Sound::Import($[]);
		ret = $[];
	}
	/* Change configuration (run AutoSequence) */
	else if (func == "Change") {
		ret =  WFM::CallFunction(`sound());
	}
	/* Return required package list */
	else if (func == "Packages") {
		ret = $[];
	}
	/* Return actual state */
	else if (func == "Export") {
		ret = Sound::Export();
	}
	else if (func == "Read") {
		ret = Sound::Read(``{});
	}
	/* Write givven settings */
	else if (func == "Write") {
		import "Progress";
		Progress::off();
		map settings = Sound::Export();
		Sound::write_only = true;
		WFM::CallFunction (`sound_write(settings));
		Progress::on();
		return ret;
	}
	/* Unknown function */
	else {
		y2error("Unknown function: %1", func);
		ret = false;
	}

	y2debug("ret=%1", ret);
	y2milestone("Sound auto finished");
	y2milestone("----------------------------------------");

	return ret;

	/* EOF */
}
