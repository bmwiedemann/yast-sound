/**
 * File:
 *   sound_complex
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   sound complex dialog
 *
 * Authors: 
 * Dan Vesely <dan@suse.cz>
 * 
 * 
 * $Id$
 * 
 * Params: 1st ... list of sound_cards
 *         2nd ... list with save_info
 *         3rd ... list with configured_unique
 */

{

    textdomain "sound";

    include "misc_defines.ycp";
    include "sound/sound_routines.ycp";
    include "lan/lan_routines.ycp";

  /**
   * Detected, but not configured
   *
   * @return list
   */
    define get_not_yet () ``{
	list all = get_audio (test_mode, config_mode);
	list not_yet = get_unique_not (all, ["configured"], "sound", false, config_mode);

	return not_yet;
    }

    /**
     *
     *
     * @return list
     */

    define get_running_cards () ``{
    
	if (fileexist("/proc/asound/cards")) 
	{
	    list asound = SCR(`Read(.proc.asound.cards));
	    if (is(select (asound, 0), map)) 
	    {
		return asound;
	    }
	}
	return [];
    }

  /**
   * reads variables from rc.config
   * @return list
   */
    define read_rc_vars (list vars) ``{
	return listmap (`k, vars, ``([k, SCR(`Read(topath(sformat (".rc.system.%1", k))))]));
    }

  /**
   * marks cards in save_info to "off"
   * from to_delete list and resets options
   * @return list
   */
    define mark_off (list to_delete) ``{
	list tmp   = [];
	foreach (`e, save_info, 
	``{
	    if (contains (to_delete, lookup (e, "name", ""))) 
	    {
		tmp = add (tmp, $["name"   : "off", 
	    	     "modules" : lookup (e, "modules")]);
	    }
	    else
	    {
		tmp = add (tmp, e);
	    }
	});
	return tmp;
    }

  /**
   * just decides which way to go
   * manual or autodetected
   * @return map
   */
    define WhichDialog ()	``{
    // help text 

	string helptext=lookup(STRING, "WhichDialog");

	list nc = [];
	integer i = 0;

	list not_yet = get_not_yet ();

	maplist (`e, not_yet, 
	``{
	    nc = add (nc, `item(`id(i), mergestring(splitstring(hardware_name (e), "\n"), " ")));
	 	  i = i + 1;
	});
    

	term con = `HBox(
	    `HSpacing (3),
	// frame label
	    `Frame
	    (`id(`frame), _("Select"), 
		`HBox 
		(
		    `HSpacing (1),
		    `VBox 
		    (
			`RadioButtonGroup 
			(`id(`rg), 
			    `VBox 
			    (
				`VSpacing (1),
				`Left(`VBox
				(
		      // label of radiobutton
				    `Left(`RadioButton(`id(`auto), `opt (`notify), _("&Autodetected"), (size (nc) > 0))),
			   // label of list with autodetected cards
				    `VSquash(`SelectionBox(`id(`sel), _("List of autodetected"), nc))
		
				)),
				`VSpacing (1),
		       // label of radio button
				`Left(`RadioButton (`id(`manual), `opt(`notify), _("&Manual selection"), (size (nc) == 0))),
				`VSpacing (1)
			    )
			)
		    ),
		    `HSpacing (1)
		)
	    ),
	    `HSpacing (3)
	);



	// dialog title
	UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
	// Next - button label
	UI(`ChangeWidget(`id(`next), `Label, _("&Next")));

	if (size (nc) == 0) 
	{
	    UI(`ChangeWidget (`id(`sel), `Enabled, false));
	    UI(`ChangeWidget (`id(`auto), `Enabled, false));
	}
	else
	{
	    UI(`ChangeWidget(`id(`sel), `CurrentItem, 0));
	}

	any ui = nil;


	repeat 
	{
	    ui = UI(`UserInput ());
	
	    if (ui == `manual)
	    {
		UI(`ChangeWidget (`id(`sel), `Enabled, false));
	    }
	    else 
	    {
		if (ui == `auto)
		{
		    UI(`ChangeWidget (`id(`sel), `Enabled, true));
		}
	    }	
	} until ((((ui == `back) || (ui == `next) || ui == `cancel))); 


	return $["ui" : ui,
	        "way" : UI(`QueryWidget (`id(`rg), `CurrentButton)),
		"id"  : UI(`QueryWidget(`id(`sel), `CurrentItem))];

    }


    /**
     * 
     *
     * @return map
     */

    define ComplexDialog () ``{
	// help text 
        string helptext=lookup(STRINGS, "ComplexDialog");

	list conf_cards = get_running_cards ();
	list cc = maplist (`e, conf_cards, 
	    ``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
    
	term con = `HBox
	    (
		`HSpacing (3),
		`VBox 
		(
		    `Table (`id(`configured_table), `opt (`notify, `immediate), 
		    // table header labels
			`header(_("Number"), _("Card name")), cc),
		    `VSpacing (0.5),
	    // Delete - button label
		    `HBox
		    (
			`PushButton (`id(`b_delete), _("Delete")),
			`HStretch (),
		  // Add soundcard ... - button label
			`PushButton (`id(`b_conf2), _("Add soundcard ..."))
		    ),
		    `VSpacing (0.5),
		    `HBox
		    (
			`HStretch (),
		  // check button label
			`VBox 
			(
			    `Left(`CheckBox(`id(`b_alsa), `opt(`notify), _("Start ALSA"), (lookup (rc_vars, "START_ALSA", "no") == "yes"))),
			 // check button label
			    `Left(`CheckBox(`id(`b_seq), `opt(`notify), _("Start sequencer"), (lookup (rc_vars, "START_ALSA_SEQ", "no") == "yes")))
			)
		    ),
		    `VSpacing (0.5)
		),
		`HSpacing (3)
	    );


        // dialog title
	UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
	// Finish - button label
	UI(`ChangeWidget(`id(`next), `Label, _("&Finish")));
    
	if (size (cc) == 0) 
	{
	    UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
	}
	else 
	{
	    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	}
    
	if (lookup (rc_vars, "START_ALSA") != "yes")
	{
	    UI(`ChangeWidget(`id(`b_seq), `Enabled, false));
	}

	repeat 
	{
	    ui = UI (`UserInput ());
	    if (ui == `b_delete) 
	    {
		integer fuser = SCR(`Execute (.target.bash, "/bin/fuser /dev/dsp* /dev/audio* /dev/mixer* /dev/midi* /dev/mixer*", $[]));

		if (fuser == 0) 
		{
				// To translators: To reset the sound configuration these programs must be terminated
				// To translators: label message
		    string msg=lookup(STRINGS, "WhichDialogMsg");
			// Yes, No - button labels
		    boolean terminate = UI(`YesOrNo (msg, _("&Yes"), _("&No")));
		    if (terminate)
		    {
			SCR(`Execute (.target.bash, "/bin/fuser -k /dev/dsp* /dev/audio* /dev/mixer* /dev/midi* /dev/mixer*", $[]));
		    }
		    else
		    {
			continue;
		    }
		}
		integer card_id = UI(`QueryWidget (`id(`configured_table), `CurrentItem));
		if (contains (SCR(`Read(.modules.alias)), sformat ("snd-card-%1", card_id))) 
		{
		    // card in modules.conf
		    string mod = SCR(`Read(.modules.alias, sformat ("snd-card-%1", card_id)));
		    SCR(`Execute(.target.modprobe, sformat ("-r %1", mod), ""));
		    to_delete = add (to_delete, mod);
		}
		else if (size (conf_cards) > card_id) 
		{
		    // card just in the internal structure

		    list m = filter (`e, save_info, ``(lookup (lookup (e, "modules", $[]), "alias", "") == sformat ("snd-card-%1", card_id)));
		    string mod = "";

		    if (size (m) > 0)
		    {
			mod = lookup (select (m, 0), "name", "");
		    }

		    if (size (mod) > 0) 
		    {
			SCR(`Execute(.target.modprobe, sformat ("-r %1", mod), ""));
			to_delete = add (to_delete, mod);
		    }
		}
		else 
		{
		    // error popup message
		    UI (`DisplayMessage (_("Cannot delete this entry!")));
		}

		conf_cards = get_running_cards ();
		cc = maplist (`e, conf_cards, 
		    ``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
		UI(`ChangeWidget (`id(`configured_table), `Items, cc));
		if (size (cc) == 0) 
		{
		    SCR(`Execute (.target.bash, "/etc/init.d/alsasound stop", $[]));
		    UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
		}
		else
		{ 
		    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
		}
	    }
	    else if (ui == `b_alsa) 
	    {
		string value = condition(UI(`QueryWidget(`id(`b_alsa), `Value)), "yes", "no");
		rc_vars = add(rc_vars, "START_ALSA", value);
		UI (`ChangeWidget(`id(`b_seq), `Enabled, value == "yes"));
	    }
	    else if (ui == `b_seq) 
	    {
		string value = condition(UI(`QueryWidget(`id(`b_seq), `Value)), "yes", "no");
		rc_vars = add(rc_vars, "START_ALSA_SEQ", value);
	    }
	    else if (ui == `b_conf2) 
	    {
		repeat 
		{

		    map result = $[];
		    if (size (get_not_yet ()) > 0)
		    {
			result = WhichDialog ();
		    }
		    else 
		    {
			result = $["ui" : `next, "way" : `manual];
		    }
		    ui = lookup (result, "ui", `cancel);
		    if (ui == `next) 
		    {
			if (lookup (result, "way") == `auto) 
			{
			    integer i = lookup (result, "id");
			    map card = select (get_not_yet (), i, $[]);
		    
			    if (size (card) > 0) 
			    {
				map result = OneCardWizard (card, size (save_info), ui);
				any ui     = lookup (result, "ui", `cancel); 
				if (ui == `next) 
				{
				    save_info = add (save_info, lookup (result, "return"));
				    configured_unique = add (configured_unique, lookup (card, "unique_key", ""));
				}
				else if (ui == `back)
				{
				    configured_unique = filter (`e, configured_unique, ``(lookup (card, "unique_key", "") != e));
				}
			    }
			    if (ui == `back) 
			    {
				ui = nil;
			    }
			}
			else if (lookup (result, "way") == `manual) 
			{

			    list dialog = [``(CallModule ("sound_manual", []))];
			    integer id      = 0;

			    while ((id >= 0) && (id < size (dialog))) 
			    {
		
				result = eval (select (dialog, id));
				ui     = lookup (result, "ui", `cancel);

				if (ui == `back) 
				{
				    dialog = filter (`e, dialog, ``(e == ``(CallModule ("sound_manual", []))));
				    id = id - 1;
				}
				else if ((ui == `cancel) || (ui == `skip))
				{
				    break;
				}
				else if (ui == `next) 
				{

				    if (id == 0)
				    {
					dialog = add (dialog, ``(OneCardWizard (lookup (result, "return"), size (save_info), ui)));
				    }
				    if (id == 1) 
				    {
					save_info = add (save_info, lookup (result, "return"));
				    }
				    id = id + 1;
				}
			    }

			    if (ui == `back) 
			    {   
				break;
			    }
			}
		    }
		    else if (ui == `cancel)
		    {
			break;
		    }
		} until ((ui == `back) || (ui == `next) || (ui == `cancel) || (ui == `skip));
	    
		ui = nil;

		conf_cards = get_running_cards ();
		cc = maplist (`e, conf_cards, 
		``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
		// dialog title
		UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
		UI(`ChangeWidget(`id(`configured_table), `Items, cc));
		// Finish - button label
		UI(`ChangeWidget(`id(`next), `Label, _("&Finish")));
	    
		if (size (cc) == 0) 
		{
		    UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
		}
		else
		{
		    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
		}
	    }
	
	
	} until (((ui == `back) || (ui == `next) || ui == `cancel));
    

      //to_delete = filter (`e, to_delete, ``(e == lookup (lookup (lookup (result, "return"), "modules"), "alias")));
	if (size (to_delete) > 0)
	{
	    save_info = mark_off (to_delete);
	}

	return $["ui"       : ui,
		"save_info" : save_info,
		"configured_unique" : configured_unique,
			   "rc"        : rc_vars];
    }

// ===== MAIN =====

    list cards     = Args(0);
    list save_info = Args(1);
    list configured_unique = Args(2);

    list to_delete = [];
    boolean config_mode = false;

    map rc_vars = read_rc_vars (["START_ALSA", "START_ALSA_SEQ"]);


    if (size(lookup (rc_vars, "START_ALSA")) == 0)
    {
	rc_vars = add (rc_vars, "START_ALSA", "yes");
    }

    if (size (lookup (rc_vars, "START_ALSA_SEQ")) == 0)
    {
	rc_vars = add (rc_vars, "START_ALSA_SEQ", "yes");
    }

    return ComplexDialog ();
}
