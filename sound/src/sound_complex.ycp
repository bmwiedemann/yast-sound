/**
 * File:
 *   sound_complex
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   sound complex dialog
 *
 * Authors: 
 * Dan Vesely <dan@suse.cz>
 * 
 * 
 * $Id$
 * 
 * Params: 1st ... list of sound_cards
 *         2nd ... list with save_info
 *         3rd ... list with configured_unique
 */

{

    textdomain "sound";

//    include "misc_defines.ycp";
//    include "sound/routines.ycp";
//    include "sound/ui.ycp";
//    include "sound/texts.ycp";	
//    include "sound/alsa_routines.ycp";
//    include "sound/write_routines.ycp";
//    include "sound/card_wizard.ycp";


    map STRINGS=STRINGS_();


  /**
   * marks cards in save_info to "off"
   * from to_delete list and resets options
   * @return list
   */
    define mark_off (list to_delete) ``{
	list tmp   = [];
	foreach (`e, save_info, 
	``{
	    if (contains (to_delete, lookup (e, "name", ""))) 
	    {
		tmp = add (tmp, $["name"   : "off", 
	    	     "modules" : lookup (e, "modules")]);
	    }
	    else
	    {
		tmp = add (tmp, e);
	    }
	});
	return tmp;
    }

  /**
   * just decides which way to go-
   * manual or autodetected
   * @return map with new save_info_entry
   */
    define WhichDialog ()	``{
    // help text 

	string helptext=lookup(STRINGS, "WhichDialog");

	list nc = [];
	integer i = 0;

	list sound_cards  = get_audio ();
//	if(db==nil)
//	{
//	    db=GetCardDatabase();
//	}


	sound_cards = maplist(`e, sound_cards, ``(add (e, "module", get_module (e))));
	sound_cards = filter(`e, sound_cards, ``(lookup(e, "module", $[])!=$[]));
	sound_cards = filter_configured(save_info, sound_cards);
	sound_cards = convert_to_save_info(sound_cards);


	maplist (`e, sound_cards, 
	``{
	    nc = add (nc, `item(`id(i), lookup(e, "model", "")));
	 	  i = i + 1;
	});
    
	term con = WhichDlgCon(nc);

	// dialog title
	UI(`SetWizardContents (_("Configure a sound card"), con, helptext, true, true));
	// Next - button label
	UI(`ChangeWidget(`id(`next), `Label, UI(`NextButtonLabel())));

	if (size (nc) == 0) 
	{
	    UI(`ChangeWidget (`id(`sel), `Enabled, false));
	    UI(`ChangeWidget (`id(`auto), `Enabled, false));
	}
	else
	{
	    UI(`ChangeWidget(`id(`sel), `CurrentItem, 0));
	}

	any ui = nil;


	repeat 
	{
	    ui = UI(`UserInput ());
	
	    if (ui == `manual)
	    {
		UI(`ChangeWidget (`id(`sel), `Enabled, false));
	    }
	    else if (ui == `auto)
	    {
		UI(`ChangeWidget (`id(`sel), `Enabled, true));
	    }	
	    else if (ui == `abort || ui == `cancel)
	    {
		if(ReallyAbort())
		{
		    break;
		}
	    }
	} until ((((ui == `back) || (ui == `next) || ui == `cancel))); 

	map new_entry=$[];

	symbol way=UI(`QueryWidget (`id(`rg), `CurrentButton));
	if(way == `auto)
	{
	    integer index=UI(`QueryWidget(`id(`sel), `CurrentItem));
	    new_entry=select(sound_cards, index);
	}
	else if(way == `manual)
	{
	    new_entry=$["unique_key": isa_uniq()];
	}


	return $["ui" : ui,
		"entry"  : new_entry];

    }

    define createTable(list save_info) ``{
	list runn=get_running_cards();
	integer pos=0;
	list ret=maplist(`e, save_info, 
	``{
	    string state="";
	    if(size(filter(`f, runn, ``(lookup(f, "number", -1)==pos)))!=0)
	    {
		// to translators: "(The card is) running
		state=_("Running");
	    }
	    else
	    {
		if(lookup(e, "unique_key", "")==isa_uniq())
		// card was not autodetected
		{
		    state=_("Not running");
		}
		else
		// card was autodetected	
		{
		    list audio=get_audio();
		    audio=filter(`g, audio, ``(lookup(g, "unique_key", "")==lookup(e, "unique_key", "")));
		    if(size(audio)!=0)
		    {
			state=_("Not running");
		    }
		    else
		    {
			// to translators: sound card has been removed from the machine
			state=_("Card removed");
		    }
		}
	    }

	    any r=`item(`id(pos), sformat("[%1]", pos), lookup(e, "model", ""), state);
	    pos=pos+1;
	    return r;

	});
	return ret;
    }


    define enableButtons(boolean val) ``{
	UI(`ChangeWidget(`id(`b_delete), `Enabled, val));
        UI(`ChangeWidget(`id(`b_options), `Enabled, val));
	UI(`ChangeWidget(`id(`b_volume), `Enabled, val));

    }

    /**
     * shows list of soundcards 
     *
     * @return map
     */

    define ComplexDialog () ``{
	// help text 
	any ui=nil;
        string helptext=lookup(STRINGS, "ComplexDialog");

	if(size(save_info) != size(SCR(`Dir(.audio.alsa.cards)))) //get_running_cards()))
	{
//	    y2error("size(save_info)=%1 size(Dir)=%2", size(save_info), size(Dir(.audio.alsa.cards)));
//	    if(UI(`YesNoPopup(_("There is configured sound card, but is not functional at
// the moment, because the kernel modules are not present. Try to load them?"))))
	    if(UI(`YesNoPopup(_("Number of currently running cards doesn't match 
the number of configured cards in configureation files. 
Try to restart sound system?"))))
 
	    {
		SCR(`Execute(.target.bash, "/etc/init.d/alsasound stop", $[]));
		alsasound_start_tmp(true);

//		SCR(`Execute (.target.bash, "/etc/init.d/alsasound restart", $[]));
//		y2error("alsa restarted");
	    }
	}

	list cc = createTable(save_info);
 
	boolean show_fonts=false;
	maplist(`e, save_info, ``{ if(HasFonts(e)) show_fonts=true;});
	
	term con = ComplexDlgCon(cc, 
			(lookup (rc_vars, "START_ALSA", "no") == "yes"), 
			(lookup (rc_vars, "START_ALSA_SEQ", "no") == "yes"), show_fonts);

        // dialog title
	UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
	// Finish - button label
	UI(`ChangeWidget(`id(`next), `Label, UI(`FinishButtonLabel())));
    
	if (size (cc) == 0) 
	{
	    enableButtons(false);
	}
	else 
	{
	    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	}
    
	if (lookup (rc_vars, "START_ALSA") != "yes")
	{
	    UI(`ChangeWidget(`id(`b_seq), `Enabled, false));
	}

	repeat 
	{
	    SCR(`Execute(.audio.alsa.restore, 0, 0));

	    ui = UI (`UserInput ());
	    if (ui == `b_delete && UI(`YesNoPopup(_("Really delete this entry?")))) 
	    {
		boolean terminate=stop_programs();
		if(terminate==false)
		{
		    continue;
		}
		integer card_id = UI(`QueryWidget (`id(`configured_table), `CurrentItem));

		string modname=lookup(select(save_info, card_id), "module", "");

		// we have to rember volume/mute settings because after a card removal
		// everything is muted and set to 0.
		list vol_settings=get_vol_settings();

		list rem=get_indices_for_removal(save_info, modname);
		save_info=remove_save_entries(save_info, rem);
		vol_settings=multi_remove(vol_settings, rem);

		SaveModulesEntry (save_info, [], true);

		SCR(`Execute (.target.bash, "/etc/init.d/alsasound stop ", $[]));
		alsasound_start_tmp(true);
		y2error(sformat("%1", vol_settings));
		set_vol_settings(vol_settings);
		
		cc=createTable(save_info);
    
		UI(`ChangeWidget (`id(`configured_table), `Items, cc));
		if (size (cc) == 0) 
		{
		    SCR(`Execute (.target.bash, "/etc/init.d/alsasound stop", $[]));
		    enableButtons(false);
		}
		else
		{ 
		    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
		}
	    }
	    else if (ui == `b_options)
	    {
		integer card_id = UI(`QueryWidget (`id(`configured_table), `CurrentItem));

		map entry=select(save_info, card_id);    
	
		map res=CallFunction(`sound_options(entry));
		if(lookup(res, "ui")==`next)
		{
		    entry=lookup(res, "return", $[]);
		    entry=add_common_options(entry, card_id);
		    integer pos=0;
		    save_info=maplist(`e, save_info, 
		    ``{
			if(pos!=card_id)
			{
			    pos=pos+1;
			    return e;
			}
			else
			{
			    pos=pos+1;
			    return entry;
			}
		    });
		}
		else if(lookup(res, "ui") == `abort || lookup(res, "ui") == `cancel)
		{
		    return $["ui": `abort];
		}
		UI(`ChangeWidget(`id(`next), `Label, UI(`FinishButtonLabel())));

		UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
		cc=createTable(save_info);
		UI(`ChangeWidget (`id(`configured_table), `Items, cc));
		UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	    }
	    else if (ui == `b_volume)
	    {
		integer card_id = UI(`QueryWidget (`id(`configured_table), `CurrentItem));	
		map res=CallFunction(`sound_mixer(card_id));
		if(lookup(res, "ui") == `abort || lookup(res, "ui") == `cancel)
                {       
                    return $["ui": `abort];
                }

		UI(`ChangeWidget(`id(`next), `Label, UI(`FinishButtonLabel())));
        
                UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
                cc=createTable(save_info);
                UI(`ChangeWidget (`id(`configured_table), `Items, cc));
                UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	    }
	    else if (ui == `b_fonts)
	    {
		InstallFonts("", true);
	    }
	    else if (ui == `b_alsa) 
	    {
		string value = condition(UI(`QueryWidget(`id(`b_alsa), `Value)), "yes", "no");
		rc_vars = add(rc_vars, "START_ALSA", value);
		UI (`ChangeWidget(`id(`b_seq), `Enabled, value == "yes"));
	    }
	    else if (ui == `b_seq) 
	    {
		string value = condition(UI(`QueryWidget(`id(`b_seq), `Value)), "yes", "no");
		rc_vars = add(rc_vars, "START_ALSA_SEQ", value);
	    }
	    else if (ui == `b_conf2) 
	    // add soundcard
	    {
		repeat 
		{
		    map result = $[];
		    list cards=get_audio();
	    
		    if(size(cards)!=0)
		    {
			cards = maplist(`e, cards, ``(add (e, "module", get_module (e))));
			cards = filter(`e, cards, ``(lookup(e, "module", $[])!=$[]));
			cards = filter_configured(save_info, cards);
		    }

		    if (size (cards) > 0)
		    {
			result = WhichDialog ();
		    }
		    else 
		    {
			result = $["ui" : `next, "entry" : $["unique_key": isa_uniq()]];
		    }
		    ui = lookup (result, "ui", `cancel);
		    map entry=lookup(result, "entry", $[]);
		    if (ui == `next) 
		    {
			string uni=lookup(entry, "unique_key", "");
			boolean showMan=false;
			map res=$[];
			if(uni==isa_uniq())
			{
			    showMan=true;
			}
			map res=$[];
			if(showMan)
			{
			    map res=add_card_manually(save_info);
			}
			else
			{
			    res=OneCardWizard(entry,  size(save_info), `next, 6, false, save_info);
			}
			symbol ui=lookup(res, "ui", nil);
			if(ui == `abort)
			{
			    return $["ui": `abort];
			}
			else if(ui == `next)
			{
			    entry=lookup(res, "return");
			    save_info=add(save_info, entry);
			}    
	
		    }
		    else if (ui == `cancel || ui == `abort)
		    {
			return $["ui" : `abort];
			break;
		    }
		} until ((ui == `back) || (ui == `next) || (ui == `cancel) || (ui == `skip));
	    
		ui = nil;

		cc = createTable(save_info);

		// dialog title
		UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
		UI(`ChangeWidget(`id(`configured_table), `Items, cc));
		// Finish - button label
		UI(`ChangeWidget(`id(`next), `Label, UI(`FinishButtonLabel())));
	    
		if (size (cc) == 0) 
		{
		    enableButtons(false);
		}
		else
		{
		    UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
		    enableButtons(true);
		}
	    }
	    else if(ui == `cancel || ui == `abort)
	    {
		if(ReallyAbort())
		{
		    break;
		}   
	    }
	
	
	} until (((ui == `back) || (ui == `next) || ui == `cancel));
    

	return $["ui"       : ui,
		"save_info" : save_info,
//		"configured_unique" : configured_unique,
			   "rc"        : rc_vars];
    }

// ===== MAIN =====

    // read the db if needed
  //  list db=nil;

    list save_info = Args(0);
  //  list configured_unique = Args(1);

    list to_delete = [];
    boolean config_mode = false;

    map rc_vars = read_rc_vars (["START_ALSA", "START_ALSA_SEQ"]);


    if (size(lookup (rc_vars, "START_ALSA")) == 0)
    {
	rc_vars = add (rc_vars, "START_ALSA", "yes");
    }

    if (size (lookup (rc_vars, "START_ALSA_SEQ")) == 0)
    {
	rc_vars = add (rc_vars, "START_ALSA_SEQ", "yes");
    }

    return ComplexDialog ();
}
