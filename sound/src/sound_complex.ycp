{

include "misc_defines.ycp";
include "sound/sound_routines.ycp";
include "lan_routines.ycp";

/*
 * Detected, but not configured
 */
define get_not_yet () ``{
    list all = get_audio (test_mode, config_mode);
    list not_yet = get_unique_not (all, ["configured"], "sound", false);

    
    return not_yet;

}


define get_running_cards () ``{
    // TODO: no alsa drivers ...
    if (fileexist("/proc/asound/cards")) return SCR(`Read(.proc.asound.cards));
    return [];
}


/*
 * marks cards in save_info to "off"
 * from to_delete list and resets options
 */
define mark_off (list to_delete) ``{

    list tmp   = [];
    foreach (`e, save_info, ``{
	if (contains (to_delete, lookup (e, "name", ""))) {
	    tmp = add (tmp, $["name"   : "off", 
			     "modules" : lookup (e, "modules")]);
	}
	else
	    tmp = add (tmp, e);
    });



    return tmp;

}


define ComplexDialog () ``{
    
    // help text 1/3
    string helptext = UI(_("<p>The complete sound cards list. Use the <i>Finish</i> button \
to save sound card information.</p>"));
    // help text 2/3
    helptext = helptext + UI(_("<p>Use <i>Delete</i> button to remove configured sound card. \
<i>Manual</i> button can be used for adding sound card that was not autodetected.</p>"));

    

    list conf_cards = get_running_cards ();
    list cc = maplist (`e, conf_cards, ``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
    list nc = [];
    integer i = 0;
    maplist (`e, get_not_yet (), ``{
	nc = add (nc, `item(`id(i), mergestring(splitstring(hardware_name (e), "\n"), " ")));
	i = i + 1;
    });
    
    term con = `VBox (
	`Table (`id(`configured_table), `opt (`notify, `immediate), 
		`header(_("Number"), _("Card name")), cc),
	`PushButton(`id(`b_delete), _("Delete"))
	);

    term config_buttons = `HBox (`PushButton(`id(`b_manual), _("Manual")));

    if (size (nc) > 0) {
	helptext = helptext + UI(_("<p>You can choose autodeted sound card from the list \
and using <i>Configue</i> button configure this card</p>"));

	config_buttons = add (config_buttons, `PushButton(`id(`b_conf), _("Configure")));
	con = add (con, `SelectionBox (`id(`not_configured), `opt(`notify), _("Not configured yet"), nc));
	con = add (con, add (`VCenter (), config_buttons));
    }
    else {
	con = add (con, config_buttons);
    }

    UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
    UI(`ChangeWidget(`id(`next), `Label, _("&Finish")));
    
    if (size (cc) == 0) {
	UI(`ChangeWidget(`id(`configured_table), `Enabled, false));
	UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
    }
    else 
	UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));

    repeat {
	
	ui = UI (`UserInput ());

	if (ui == `b_delete) {
	    
	    integer fuser = SCR(`Execute (.target.bash, "/bin/fuser /dev/dsp* /dev/audio* /dev/mixer* /dev/midi* /dev/mixer*", $[]));

	    if (fuser == 0) {
		
				// To translators: To reset the sound configuration these programs must be terminated
				// To translators: label message
		string msg = UI (_("There are programs running that are currently using the audio device.\n"));
				// To translators: label message
		msg = msg + UI (_("To reset the configuration these programs must be terminated. Proceed?"));
		
		boolean terminate = UI(`YesOrNo (msg, _("&Yes"), _("&No")));
		if (terminate)
		    SCR(`Execute (.target.bash, "/bin/fuser -k /dev/dsp* /dev/audio* /dev/mixer* /dev/midi* /dev/mixer*", $[]));
		else
		    continue;
	    }

	    

	    integer card_id = UI(`QueryWidget (`id(`configured_table), `CurrentItem));

	    if (contains (SCR(`Read(.modules.alias)), sformat ("snd-card-%1", card_id))) {
		// card in modules.conf
		string mod = SCR(`Read(.modules.alias, sformat ("snd-card-%1", card_id)));
		
		SCR(`Execute(.target.modprobe, sformat ("-r %1", mod), ""));

		to_delete = add (to_delete, mod);
	    }
	    else if (size (cards) > card_id) {
		// card just in the internal structure
		string mod = lookup (lookup (select (cards, card_id, $[]), "module", $[]), "name", "");
		if (size (mod) > 0) {
		    SCR(`Execute(.target.modprobe, sformat ("-r %1", mod), ""));
		    to_delete = add (to_delete, mod);
		}
		
	    }
	    else {
		UI (`DisplayMessage (_("Cannot delete this entry!")));
	    }

	    conf_cards = get_running_cards ();
	    cc = maplist (`e, conf_cards, ``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
	    UI(`ChangeWidget (`id(`configured_table), `Items, cc));
	    if (size (cc) == 0) {
		
		SCR(`Execute (.target.bash, "/sbin/init.d/alsasound stop", $[]));

		UI(`ChangeWidget(`id(`configured_table), `Enabled, false));
		UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
	    }
	    else 
		UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	    
	}
	else if (ui == `b_manual) {
	    list dialog = [``CallModule ("sound_manual", [])];
	    map result  = $[];
	    integer id  = 0;
	    any ui      = nil;

	    while ((id >= 0) && (id < size (dialog))) {
		
		result = eval (select (dialog, id));
		ui     = lookup (result, "ui", `cancel);

		if (ui == `back) {
		    dialog = filter (`e, dialog, ``(e == ``CallModule ("sound_manual", [])));
		    id = id - 1;
		}
		else if ((ui == `cancel) || (ui == `skip))
		    break;
		else if (ui == `next) {

		    if (id == 0)
			dialog = add (dialog, ``OneCardWizard (lookup (result, "return"), size (save_info), ui));
		    if (id == 1) {
			
			save_info = add (save_info, lookup (result, "return"));
			
		    }
		    id = id + 1;
		}
	    }


	    conf_cards = get_running_cards ();
	    cc = maplist (`e, conf_cards, ``(`item(`id(lookup (e, "number", 0)), sformat ("   [%1]", lookup (e, "number", 0)), lookup (e, "line1")))); 
	    UI(`SetWizardContents (_("Sound configuration"), con, helptext, true, true));
	    UI(`ChangeWidget(`id(`configured_table), `Items, cc));
	    UI(`ChangeWidget(`id(`next), `Label, _("&Finish")));
	    
	    if (size (cc) == 0) {
		UI(`ChangeWidget(`id(`configured_table), `Enabled, false));
		UI(`ChangeWidget(`id(`b_delete), `Enabled, false));
	    }
	    else
		UI(`ChangeWidget(`id(`configured_table), `CurrentItem, 0));
	}
	else if (ui == `b_conf) {
	    integer i = UI(`QueryWidget(`id(`not_configured), `Value));
	    map card = select (get_not_yet (), i, $[]);
	    
	    if (size (card) > 0) {
		map result = OneCardWizard (card, size (save_info), ui);
		any ui     = lookup (result, "ui", `cancel); 
		if (ui == `next)
		    save_info = add (save_info, lookup (result, "return"));
	    }
	}
	
    } until (((ui == `back) || (ui == `next) || ui == `cancel));
    

    //to_delete = filter (`e, to_delete, ``(e == lookup (lookup (lookup (result, "return"), "modules"), "alias")));
    if (size (to_delete) > 0)
	save_info = mark_off (to_delete);

    return $["ui" : ui,
	    "save_info" : save_info];
}

// ===== MAIN =====

list cards     = Args(0);
list save_info = Args(1);
list to_delete = [];

return ComplexDialog ();


}

