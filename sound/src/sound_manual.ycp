/*
 * Module for manual selection of sound card from the database
 * Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 */

{

    /*
     * Used for searching
     */
    define search_card_id (string name) ``{
	list all_cards = get_cards ("all");
	integer pos = 0;
	integer len = size (name);
	while (pos < size (all_cards)) {
	    if (substring (tolower(select (all_cards, pos)), 0, len) == tolower(name)) 
		return pos;
	    pos = pos + 1;
	};
	return -1;
    }


    /*
     * creates "libhd entry" from db info
     */
    define get_card (string module_name, string card_name) ``{
	map ret = $[];
	map db_entry = $[];
	
	if (tolower (module_name) == "all") {
	    list tmp = filter (`e, db, ``(contains(lookup (e, "cards"), card_name)));
	    if (size (tmp) > 0)
		db_entry = select (tmp, 0);
	    else
		db_entry = select (filter (`e, db, ``(lookup (e, "name", "") == card_name)), 0, $[]);
	}
	else
	    db_entry = select (filter (`e, db, ``(lookup (e, "name", "") == module_name)), 0, $[]);



	if (size (db_entry) == 0) {
	    y2error ("Db entry not found");
	    return ret;
	}
	
	map module_entry = $["params" : lookup (db_entry, "params", []),
			    "module"  : lookup (db_entry, "module", $[])];

	ret = add (ret, "module", module_entry);
	ret = add (ret, "sub_vendor", card_name);
	if (tolower (module_name) == "all")
	    ret = add (ret, "sub_device", sformat ("(%1)", card_name));
	else
	    ret = add (ret, "sub_device", sformat ("(%1)", module_name));
	map libhd = select (lookup (db_entry, "libhd", []), 0, $[]);
	ret = add (ret, "vendor_id", lookup (libhd, "vendor_id", 0));

	if (is (lookup (libhd, "device_id"), list)) {
	    ret = add (ret, "device_id", select (lookup (libhd, "device_id", 0), 0));
	    ret = add (ret, "bus", "PCI");
	}
	else {
	    ret = add (ret, "device_id", lookup (libhd, "device_id", 0));
	    ret = add (ret, "bus", "ISA");
	}


	return ret;
    }

    /*
     * returns list of sound cards
     */
    define get_cards (string module_name) ``{
	list ret = [];

	if (tolower(module_name) == "all") {
	    maplist (`e, db, ``{
		if (size (lookup (e, cards)) > 0) ret = add (ret, lookup (e, cards));
		else ret = add (ret, [lookup (e, "name")]);
	    });
	}
	else {
	    ret = maplist (`c, filter (`e, db, ``(lookup (e, "name", "") == module_name)), ``(lookup (c, "cards", [])));
	    ret = filter (`e, ret, ``(size(e) > 0));

	    if (size (ret) == 0)
		ret = add (ret, [module_name]);
	}

	return sort(flatten(ret));
    }

    /*
     * Itemize list for selection box
     */
    define itemize_list (list l, integer default) ``{
	integer i = 0;
	list itemized_list = [];
	integer s = size (l);
	while (i < s) {
	    itemized_list = add (itemized_list, `item (`id(i), select (l, i), (i == default)));
	    i = i + 1;
	}
	
	return itemized_list;
    };


    define ManualDialog () ``{

	    // Help text - manual configuration 1/2
	string helptext = UI(_("<p>Please <b>manually</b> choose the sound\
 card, you want to configure. You can search for a particular sound\
 card by entering the name in the search box.</p>"));
	    // Help text - manual configuration 2/2
	helptext = helptext + UI(_("<p>Select <b>All</b> if you want\
 to see the whole list of supported sound card models.</p>"));


	list module_names = sort (maplist (`e, db, ``(lookup (e, "name", _("Unknown module name")))));
	module_names = prepend (module_names, _("All"));
	list card_names = get_cards ("All");

//	list tree = sort(maplist (`e, db, ``(`item(`id(0), lookup (e, "name"), false, maplist (`c, lookup (e, "cards"), ``(`item(`id(0), c)))))));

	term con = `VBox ();

//	term con = `VBox (`VSquash(`Tree(`id(`tree), `opt(`hstretch), "Select", tree)));

    	con = add (con, `HBox (
    	    `ReplacePoint (`id (`rep_drv),
    			   // To translators: selection box title
    			   `SelectionBox (`id (`sel_drv), `opt(`notify), _("Sound card driver"), module_names)
    		),
    	    `ReplacePoint(`id(`rep_mod),
    			  // To translators: selection box title
    			  `SelectionBox (`id (`sel_mod), `opt(`notify), _("Sound card model"), card_names)
    		)
    	    ));
  	// To translators: text entry label
  	con = add (con, `TextEntry (`id(`search), `opt(`notify), _("Search")));

	UI(`SetWizardContents (_("Sound manual configuration"), con, helptext, true, true));
	UI(`ChangeWidget(`id(`sel_drv), `CurrentItem, select (module_names, 0)));
	UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0)));
	UI(`ChangeWidget(`id(`next), `Label, _("&Next")));

	any ui = nil;

	repeat {
	    ui = UI(`UserInput ());
	    
	    if (ui == `sel_drv) {
		string drv = UI (`QueryWidget (`id(`sel_drv), `CurrentItem));
		card_names = get_cards (drv);

		UI(`ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
				   `SelectionBox (`id (`sel_mod), _("Sound card model"), card_names)));		

		// TODO: this would be nice to have from libyui instead of replacing widget
		// UI(`ChangeWidget(`id(`sel_mod), `Items, card_names));
		UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0)));
	    }
	    else if (ui == `search) {
		string entry = UI(`QueryWidget (`id(`search), `Value));
		integer card_id = search_card_id (entry);
		card_names = get_cards ("all");
		// always "all" field
		UI(`ChangeWidget(`id(`sel_drv), `CurrentItem, select (module_names, 0)));
		if (card_id >= 0) {
		    UI(`ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
				       `SelectionBox (`id (`sel_mod), _("Sound card model"), card_names)));
		
		    UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, card_id)));
		}
	    }

	} until (((ui == `back) || (ui == `next) || ui == `cancel));


	map ret = $["ui" : ui];

	if (ui == `next) {
	   
	    ret = add (ret, "return", get_card (UI (`QueryWidget (`id(`sel_drv), `CurrentItem)),
						 UI (`QueryWidget (`id(`sel_mod), `CurrentItem))));

	    
	}

	return ret;

    }


    // ==== main ====


    list|void db = ReadY2 ("sndcards.ycp");
    
    if (is (db, void)) {
	UI(`DisplayMessage ("The Sound card database cannot be found!!!"));
	return $["ui" : `back];
    }


    return ManualDialog ();
}
