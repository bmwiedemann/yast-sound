/**
 * File:
 *   sound_manual.ycp
 * 
 * Module:
 *   Sound
 * 
 * Summary:
 *   Module for manual selection of sound card from the database
 * 
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *
 * $Id$
 *
 */

{

    textdomain "sound";

    include "sound/routines.ycp";
    include "sound/ui.ycp";
    include "sound/texts.ycp";
    
    map STRINGS=STRINGS_();

    /**
     *	dialog for manual settings
     *  @return list
     */


    define ManualDialog () ``{
	string helptext=lookup(STRINGS, "ManualDialog");
	    // label if no module name found
	list module_names=get_module_names();
	module_names=prepend(module_names, `item(`id("all"), _("All")));
	
	list card_names = get_card_names("all");//get_cards ("All");

	term con = `VBox ();

	con = add (con, `VBox
	    (
		`HBox 
		(
		    `ReplacePoint (`id (`rep_drv),
			    // To translators: selection box title
			       `SelectionBox (`id (`sel_drv), `opt(`notify), _("Sound card driver"), module_names)
		    ),
		    `ReplacePoint(`id(`rep_mod),
			    // To translators: selection box title
			      `SelectionBox (`id (`sel_mod), `opt(`notify), _("Sound card model"), card_names)
		    )
		),
		`VSpacing (),
			    // textetry label
		`TextEntry (`id(`search), `opt(`notify), _("Search")),
		`VSpacing ()
	    ));
			    // To translators: text entry label

	    // dialog title
	UI(`SetWizardContents (_("Manual sound card selection"), con, helptext, true, true));
	UI(`ChangeWidget(`id(`sel_drv), `CurrentItem, select(select (module_names, 0), 1, select (module_names, 0))));
	UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0)));
	    // Next - button label
	UI(`ChangeWidget(`id(`next), `Label, _("&Next")));

	any ui = nil;

	repeat 
	{
	    ui = UI(`UserInput ());
	        
	    if (ui == `sel_drv) 
	    {
		any drv = UI (`QueryWidget (`id(`sel_drv), `CurrentItem));
		card_names = get_card_names (drv);

		UI(`ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
		    `SelectionBox (`id (`sel_mod), _("Sound card model"), card_names)));		

		// TODO: this would be nice to have from libyui instead of replacing widget
		UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, 0)));
	    }
	    else if (ui == `search) 
	    {
		string entry = UI(`QueryWidget (`id(`search), `Value));
		integer card_id = search_card_id (entry);
		card_names = get_cards ("all");
		// always "all" field
		UI(`ChangeWidget(`id(`sel_drv), `CurrentItem, select (module_names, 0)));
		if (card_id >= 0) 
		{
		    UI(`ReplaceWidget (`id(`rep_mod),
				// To translators: selection box title
				       `SelectionBox (`id (`sel_mod), _("Sound card model"), card_names)));
		
		    UI(`ChangeWidget(`id(`sel_mod), `CurrentItem, select (card_names, card_id)));
		}
	    }
	    else if (ui == `abort || ui == `cancel)
	    {	
		if(ReallyAbort())
		{   
		    ui=`abort;
		    break;
		}
	    }	

	} until (((ui == `back) || (ui == `next) ));


	map ret = $["ui" : ui];

	any model=UI(`QueryWidget (`id(`sel_mod), `CurrentItem));
	any modname=UI(`QueryWidget (`id(`sel_drv), `CurrentItem));
    
	if (ui == `next) 
	{
	    if(modname=="all")
	    {
		modname=get_module_by_cardname(model);
	    }
	    ret=$["ui": `next, "module": modname, "model": model];
	}
	return ret;
    }


    // ==== main ====

    
    list db = GetCardDatabase(); 
    
    if (db==nil) 
    {
	UI(`MessagePopup(_("The Sound card database cannot be found!!!")));
	return $["ui" : `back];
    }
    return ManualDialog ();
}
