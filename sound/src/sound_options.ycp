/*
 * Module for setting options passed to the module
 * Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 * parameters: 1st: name of the module, String
 *             2nd: kernel driver options, List of maps, see below
 *             3rd: already entered options
 *             4th: last visited option
 *
 * kernel driver keys:
 * "name"        : String, name
 * "type"        : String, int or string
 * "description" : String, description
 *
 * returns map with:
 * "args"   : String, module arguments, arguments used for loading module
 * "conf"   : String, conf.modules entry, data for conf.modules
 * "entered" : Map, options (if modified and accepted by next button), otherwise empty
 * 
 */

{

				// converts hex num to integer
				// keeps decimal number as is
	define hextoi (string num) ``{
	    
	    if (filterchars (num, "0123456789") == num)
		return tointeger (num);
	    
	    if (tolower(substring (num, 0, 2)) != "0x")
		return 0;
	    
	    integer ret = 0;
	    integer pos = size (num) - 1;
	    integer times = 1;
	    
	    while (pos > 1) {
		
		string num_char = tolower (substring (num, pos, 1));
		
		if (num_char == "f")
		    ret = ret + 15 * times;
		else if (num_char == "e")
		    ret = ret + 14 * times;
		else if (num_char == "d")
		    ret = ret + 13 * times;
		else if (num_char == "c")
		    ret = ret + 12 * times;
		else if (num_char == "b")
		    ret = ret + 11 * times;
		else if (num_char == "a")
		    ret = ret + 10 * times;      
		else 
		    ret = ret + tointeger (num_char) * times;      
		
		times = times * 16;
		pos = pos - 1;
	    }
	    
	    return ret;
	};
	

				// Chooses one message according to
				// the language, used for translating
				// sndcard options 
	define Trans (map|void msgs, string lang) ``{
	    string|void message = "";
	    if (msgs != nil) {
		message = lookup(msgs, lang);
		if (message == nil)
		    message = lookup(msgs, "default");
		if (message == nil)
		    message = "";             // Everything has failed.
	    }
	    return message;
	};


				// tries to extract list of values from description
				// these value are generated from alsa modules
				// and can be in form
				// [list=value,value,..] or
				// [range=1-19] or something not
				// recognized

	define parse_values (string des) ``{
	    list ret = [];
	    integer pos = 0;
	    integer len = size (des);
	    while ((pos < len) && (substring (des, pos, 1) != "[")) {
		pos = pos + 1;
	    }
	    pos = pos + 1;
	    
	    if (pos < len) {		// found "["
		if (tolower(substring (des, pos, 5)) == "list=") {
		    pos = pos + 5;
		    integer s = pos;
		    while ((pos < len) && substring (des, pos, 1) != "]") {
			if (substring (des, pos, 1) == ",") {
			    ret = add (ret, hextoi (substring (des, s, pos - s))); 
			    s = pos + 1;
			}
			pos = pos + 1;
		    }
		    ret = add (ret, hextoi (substring (des, s, pos - s))); 
		}
		else if (tolower(substring (des, pos, 6)) == "range=") {
		    pos = pos + 6;
		    integer s = pos;
		    integer range_start = 0;
		    while ((pos < len) && substring (des, pos, 1) != "]") {
			if (substring (des, pos, 1) == "-") {
			    range_start = tointeger(substring (des, s, pos - s));
			    s = pos + 1;
			}
			pos = pos + 1;
		    }
		    integer range_stop = tointeger(substring (des, s, pos - s));
				// now create the range list
		    while (range_start <= range_stop) {
			ret = add (ret, range_start);
			range_start = range_start + 1;
		    }
		}
		else if (tolower(substring (des, pos, 4)) == "bool") {
		    ret = [0, 1];
		}
	    }
	    
	    return ret;
	};
	
				// 1st: checks if value is type,
				// 2nd: if poss is nonempty, checks if value is one of them
				// returns error message, empty string if ok
	define check_value (string value, string type, list poss) ``{

	    if (type == "int") {
		if (tolower(substring (value, 0, 2)) == "0x") {		// hex number
		    string rest = tolower(substring (value, 2));
		    if (filterchars(rest, "0123456789abcdef") != rest)
			    // To translators: popup message, wrong value
			return sformat (UI(_("The value: %1 must be a number")), value);
		}
		else {		// decimal number
		    string rest = value;
		    if (substring (value, 0, 1) == "-")	 // negative number
			rest = substring (value, 1);
		    if (filterchars(rest, "0123456789") != rest)
			    // To translators: popup message, wrong value
			return sformat (UI(_("The value: %1 must be a number")), value);
		}
	    }
	    else if (type == "string") {
		if (filterchars (tolower (value), "abcdefghijklmnopqrstuvwxyz_0123456789") != value) {
		    
		    integer wrong_pos = findfirstnotof (tolower (value), "abcdefghijklmnopqrstuvwxyz_0123456789");
		    string wrong_char = substring (value, wrong_pos, 1);
		    if (wrong_char == " ") {
				// To translators: "space" means blank character
			wrong_char = wrong_char + " " + UI(_("(space)"));
		    }
			// To translators: popup message, wrong value
		    return  sformat (UI(_("String cannot contain: %1")), wrong_char);
		}
	    }

				// now check for poss list
	    if (size (poss) > 0) {
		
		list poss_list = [];
		
		if (type == "int")
		    poss_list = maplist (`v, poss, ``(hextoi (value) == v));
		else
		    poss_list = maplist (`v, poss, ``(value == v));
		
		if (!contains (poss_list, true))
			// To translators: popup message, wrong value
		    return sformat (UI(_("The value must be one of %1")), poss);
	    }
	    
	    return "";		// ok :-)
	    
	};
	

				// creates itemized table entries,
				// params: 1st: list of maps to take keys from
				//         2nd: list of keys to look for in 1st param
	define create_table (list lm, list lk) ``{
	    integer i = 0;
	    list itemized_list = [];
	    integer s = size (lm);
	    term val = `item ();
	    
	    while (i < s) {
		val = `item (`id(i));
		foreach (`k, lk, ``{
		    val = add (val, lookup (select (lm, i), k, ""));
		});
		itemized_list = add (itemized_list, val);
		i = i + 1;
	    }
	    
	    return itemized_list;
	};

	
	    // ===== main =====

	list options = Args (1);
	map entered_options = Args (2);
	integer current_option = Args (3);

	string help_text = "<p>";
	
					// Help text for options 1/4
	help_text = help_text + UI(_(
"Here, you can modify the options for the sound modules.\n"));
				// Help text for options 2/4
	help_text = help_text + UI(_(
"If you are not <b>absolutely sure</b> what you are doing, please leave this dialog untouched."));

	help_text = help_text + "</p>";
	
				// Help text for options 3/4
	help_text = help_text + UI (_("<p>Choose the option you want\
 to set, use the <i>Set</i> button to enable new value. You can reset\
 all values by pressing <i>Reset</i>. Numeric values can be entered as\
 decimal or hexadecimal (hexadecimal with a <b>0x</b> prefix).</p>"));

	help_text = help_text + "<p>";
	
				// Help text for options 4/4
	help_text = help_text + UI (_("Please refer to the <b>SuSE</b>\
 help system, section 'package description', series 'snd', <b>alsa</b>\
 package for more information."));

	help_text = help_text + "</p>";
	
	map ret = $[];

	string current_option_name = "";
	list descriptions = [];
	list table_rows = [];
	list itemized_descriptions = [];

	boolean prev = true;
	boolean next = false;

	term con = `VBox ();


	    /// still omit these options until more sound cards support will be included
	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_id"));
	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_index"));

	if (size (options) > 0) {
	    
	    next = true;
	    
	    current_option_name = lookup (select (options, current_option), "name", "unknown option");
	
	    string language = UI(`GetLanguage());

	    descriptions = maplist (`p, options, ``(sformat (Trans(select (lookup (p, "description"), 0), language),
							     condition ((size (lookup (p, "description", [])) > 1), select (lookup (p, "description"), 1), "")))); // spaces, because table looks nicer
	    table_rows = add_keys ([], maplist (`p, options, ``(lookup (p, "name"))), "name");
	    table_rows = add_keys (table_rows, descriptions, "description");

	    table_rows = maplist (`p, table_rows, ``(add(p, "value", lookup (entered_options, lookup (p, "name", ""), ""))));
	
	
	    itemized_descriptions = create_table (table_rows, ["description", "name", "value"]);




	    con = `VBox (
		`VSquash(`Top(`Label (Args (0)))),
		    // To translators: Table headers "description" -- option description, "option" -- option name, "value" -- value of an option
		`Table (`id(`table), `opt (`notify, `immediate, `hshrinkable), `header(_("Description"), _("Option"),
										       `Right(_("Value"))), itemized_descriptions),
		`VBox (
		    `TextEntry (`id (`des), current_option_name,
				lookup (entered_options, current_option_name, "")),
		    `HBox (
			    // "set" button: Sets the option value
			`PushButton (`id (`set), `opt(`default), _("&Set")),
			    // "reset" button: Resets all values
			`PushButton (`id (`reset), _("&Reset"))
			)
		    )
		);
	
	}
	else {			// there are no options
	    con = `VBox (`Top(`Label (Args (0))),
			     // To translators: label message
			 `HVCenter (`Label (_("There are no options for this module"))));
	    
	}

	    // dialog title
	UI(`SetContents (_("Sound cards"), con, help_text, prev, next));

	any ui = nil;
	
	repeat {

	    ui = UI (`UserInput ());

	    if (ui == `table) {
		current_option = UI (`QueryWidget (`id(`table), `CurrentItem));
		current_option_name = select(UI(`QueryWidget(`id(`table), `Item(current_option))), 2);

		UI(`ChangeWidget(`id(`des), `Label, current_option_name));
		UI(`ChangeWidget(`id(`des), `Value, lookup (entered_options, current_option_name, "")));
		
	    }
	    if (ui == `set) {	// set button pressed
		string value = UI(`QueryWidget(`id(`des), `Value));

		if (size (value) == 0) { // we don't care  about empty values
		    entered_options = add (entered_options, current_option_name, "");
		    UI (`ChangeWidget(`id(`table), `Item(current_option, 2), ""));
		    continue;
		}
		
		list possible_values = parse_values(lookup (select (options, current_option), "values", ""));

				// add some "special" values
		    //if (lookup (select (options, current_option), "type", "string") == "int")
		    //possible_values = add (possible_values, -1);
		
		string err = check_value (value,
					  lookup (select (options, current_option), "type", "string"),
					  []); //possible_values);
		
		if (size (err) > 0) { // error - wrong value
		    UI(`DisplayMessage (err));
		    UI(`ChangeWidget(`id(`des), `Value, ""));
		    entered_options = add (entered_options, current_option_name, ""); // clear it
					   
		}
		else {		// value is correct
		    entered_options = add (entered_options, current_option_name, value);
		    UI (`ChangeWidget(`id(`table), `Item(current_option, 2), value));
		}
		
	    }
	    else if (ui == `reset) {
		entered_options = $[];
		UI(`ChangeWidget(`id(`des), `Value, ""));

		table_rows = maplist (`p, table_rows, ``(add(p, "value", lookup (entered_options, lookup (p, "name", ""), ""))));
		integer i = 0;
		while (i < size (table_rows)) {
		    UI (`ChangeWidget(`id(`table), `Item(i, 2), ""));
		    i = i + 1;
		}

	    }
	    
	    
	} until (((ui == `back) || (ui == `next) || ui == `cancel));

	if (ui == `next) {
	    ret = add (ret, "entered", entered_options);

	    string args = "";
	    string conf = "";
	    
	    foreach (`k, `v, entered_options, ``{
				// we DO!!! ignore empty options
		if (size (v) > 0) 
		    args = args + sformat ("%1=%2 ", k, v);
	    });
	    
	    ret = add (ret, "args", args);
	    
	    foreach (`k, `v, entered_options, ``{
				// we DO!!! ignore empty options
		if ((size (v) > 0) && (k != "snd_index") && (k != "snd_id")) 
		    conf = conf + sformat ("%1=%2 ", k, v);
	    });
	    
	    ret = add (ret, "conf", conf);
	}
	
	return ret;
	
}
