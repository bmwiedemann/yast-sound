/**
 *
 * File:
 *   sound_options.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Module for setting options passed to the module
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>, 2000
 *
 * $Id$
 *
 * parameters: 1st: card
 *
 */

{

    textdomain "sound";

    include "misc_defines.ycp";
    include "sound/routines.ycp";
    include "sound/ui.ycp";
    include "sound/texts.ycp";

    map STRINGS=STRINGS_();


    /**
     * just tests, if the item exists
     * otherwise returns default
     * @return any
     */
    define myselect (list l, integer i, any default) ``{
	if (i < size (l)) 
	{
	    return select (l, i);
	}
	return default;
    }

    /**
     * displays dialog with card options
     *
     * @return map
     *
     */

    define OptionsDialog (list options) ``{


	string help_text=lookup(STRINGS, "OptionsDialog");
	    
	term con = `VBox ();
				    // still omit these options -- they are assigned dynamicly
	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_id"));
	options = filter (`op, options, ``(lookup (op, "name", "") != "snd_index"));
	options = maplist (`e, options, ``($["description" : mysformat (lookup (e, "description")),
						// if no option name is available
						"name"         : lookup (e, "name", _("No name available")),
						"value"        : lookup (e, "default", lookup (e, "value", "")),
						"type"         : lookup (e, "type", "string"),
						"default"      : lookup (e, "default", "")]));

	list itemized_descriptions = create_table (options, ["description", "name", "value"]);

	integer current_option = 0;
	string current_option_name = lookup (select (options, 0), "name");

	if (size (itemized_descriptions) > 0) 
	{
	    con=OptionsCon(card, itemized_descriptions, current_option, current_option_name);     
	}
	else 			// there are no options
	{
	    con = `VBox (`Top(`Label (hardware_name (card))),
			       // To translators: label message
			       `HVCenter (`Label (_("There are no options for this module"))));
		  
	}


		// dialog title
	UI(`SetWizardContents (_("Sound card advanced options"), con, help_text, true, true));
	if (size (itemized_descriptions) > 0) 
	{
	    UI(`ChangeWidget(`id(`table), `CurrentItem, 0));
	}

	any ui = nil;
	    
	repeat 
	{
	    ui = UI (`UserInput ());

	    if (ui == `table) 
	    {
		current_option = UI (`QueryWidget (`id(`table), `CurrentItem));
		current_option_name = select(UI(`QueryWidget(`id(`table), `Item(current_option))), 2);

		UI(`ChangeWidget(`id(`des), `Label, current_option_name));
		UI(`ChangeWidget(`id(`des), `Value, select(UI(`QueryWidget(`id(`table), `Item(current_option))), 3)));
		      
	    }
	    if (ui == `set) 	// set button pressed
	    {
		string value = UI(`QueryWidget(`id(`des), `Value));

		if (size (value) == 0)  // we don't care  about empty values
		{
		    UI (`ChangeWidget(`id(`table), `Item(current_option, 2), ""));
		    continue;
		}
		    
		list possible_values = parse_values(lookup (select (options, current_option), "values", ""));

		string err = check_value (value,
						  lookup (select (options, current_option), "type", "string"),
						  []); //possible_values);
			
		if (size (err) > 0)  // error - wrong value 
		{
		    UI(`MessagePopup (err));
		    UI(`ChangeWidget(`id(`des), `Value, ""));
						  
		}
		else 		// value is correct
		{
		    UI (`ChangeWidget(`id(`table), `Item(current_option, 2), value));
		    list tmp = [];
		    maplist (`e, itemized_descriptions, ``{
				  if (current_option == select(select (e, 0),0))
				      tmp = add (tmp, `item(select (e, 0), select (e, 1), select (e, 2), value));
				  else
				      tmp = add (tmp, e);
			      });
		    itemized_descriptions = tmp;
		}
			
	    }
	    else if (ui == `reset) 
	    {
		UI(`ChangeWidget(`id(`des), `Value, ""));
			
		integer i = 0;
		while (i < size (itemized_descriptions)) 
		{
		  UI (`ChangeWidget(`id(`table), `Item(i, 2), lookup (select(options, i), "default", "")));
		  i = i + 1;
		}

	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if(ReallyAbort())
		{
		    ui=`cancel;
		    break;
		}
	    }
		
		
	} until (((ui == `back) || (ui == `next) || ui == `cancel));
	    
	    //UI(`DebugDialog(itemized_descriptions));

	return $["ui" : ui, "return": itemized_descriptions];
    }

// ===== MAIN =====


    map card	    = Args(0);
   
    list params = [];
    if (haskey (card, "params"))
    {
	params = lookup (card, "params", []);
    }
    else
    {
	params = lookup(lookup (card, "module", $[]), "params", []);
    }
    map mod     = lookup (card, "module", $[]);
    map result  = OptionsDialog (params);

      // convert from table entries back to card

    params = maplist (`e, params, ``(
	  add (e, "value", select (select (filter (`k, lookup (result, "return", []), ``(
	      select (k, 2) == lookup (e, "name"))), 0, []), 3, ""))));

      
    mod = add (mod, "params", params);
    card = add (card, "module", mod);


    return $["ui" : lookup (result, "ui", `cancel), "return" : card];
}
