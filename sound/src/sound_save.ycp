/*
 * Provides saving /etc/modules.conf and volume.
 * Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 * no parameters required,
 * returns user input.
 */

{


	SCR(``{			// reads/writes lines from file, deletes blank lines
	    MountAgent (`ag_anyagent(
		``Description (
		    ``File("/etc/modules.conf"),         // real file name
		    "\n",                     // Comment
		    false,                     // read-only
		    ``List (
			String ("^\n"),
			"\n"
			)
		    )
		), .lines);
	    
	});
	
	


				// writes modules.conf, it makes a
				// backup and appends to the end of
				// modules.conf aliases and options
				// for the configured sound card

	define ConfModules (string file) ``{
		// first comment out all lines containing snd|sound
	    Shell ("/bin/cp -f $FILE $FILE.old; /usr/bin/sed 's/^\\([^#].*snd.*$\\|[^#].*sound.*$\\)/# \\1/' $FILE > /tmp/$FILE.sed; /bin/mv -f /tmp/$FILE.sed $FILE",
		   $["FILE" : file]);


	    list|void l = SCR(`Read(.lines));

	    if (l == nil) 
		    // To translators: just one file will be displayed
		return sformat (UI(_("Cannot find file: %1")), file);
	
	    list newl = [];

	    integer length = size (l);
    
	    integer n = 0;
	    string|void line = select (l, n);

				// read until ALSA section
	    while ((line != nil) && (n < length)  &&
		   (line != "# ALSA section {$#@begin@#$} [don't remove or move this line] vvvvv")) {
		newl = add (newl, line);
		line = select (l, n);
		n = n + 1;
	    }
				// skip ALSA section
	    while ((line != nil) &&  (n < length)  &&
		   (line != "# ALSA section {$#@_end_@#$} [don't remove or move this line] ^^^^^")) {
		line = select (l, n);
		n = n + 1;
	    }
	
	    n = n + 1;
	    if (n < length)
		line = select (l, n);
				// read the rest
	    while ((line != nil) && (n < length)) {
		newl = add (newl, line);
		line = select (l, n);
		n = n + 1;
	    }

		// possible string for SB Live!
	    list sb_live_exception = ["SB Live!",
				     "Sound Blaster Live!"];
	    boolean sb_live = contains(sb_live_exception, soundcard_name (snd_info));

	    string module_name = lookup (lookup (lookup (snd_info, "module", $[]), "module", $[]), "name", "snd-card-dummy");
	    boolean has_isapnp = contains(maplist (`p, lookup (snd_info, "params", []), ``(lookup (p, "name", "") == "snd_isapnp")), true);
	    string isapnp = condition ((selected_manually && has_isapnp), "snd_isapnp=0", "");
	    
				// and write configured card
	    newl = add (newl, "# ALSA section {$#@begin@#$} [don't remove or move this line] vvvvv");
	    newl = add (newl, "#");
	    newl = add (newl, "# ALSA native device support, generated by YaST2");
	    newl = add (newl, "#");
	    newl = add (newl, "alias char-major-116 snd");
	    newl = add (newl, "options snd snd_major=116 snd_cards_limit=1");
	    newl = add (newl, sformat ("alias snd-card-0 %1", module_name));
	    newl = add (newl, sformat ("options %1 snd_index=%2 snd_id=%3 %4 %5",
				       module_name,
				       lookup (options_entered, "snd_index", 0),
				       lookup (options_entered, "snd_id", "card1"),
				       lookup (snd_info, "conf", ""),
				       isapnp
				       ));
	    newl = add (newl, "#");
	    newl = add (newl, "# OSS/Free emulation");
	    newl = add (newl, "#");
	    newl = add (newl, "alias sound-slot-0 snd-card-0");
	    newl = add (newl, "alias sound-service-0-0 snd-mixer-oss");
	    newl = add (newl, "alias sound-service-0-1 snd-seq-oss");
	    newl = add (newl, "alias sound-service-0-3 snd-pcm-oss");
	    newl = add (newl, "alias sound-service-0-8 snd-seq-oss");
	    newl = add (newl, "alias sound-service-0-12 snd-pcm-oss");
	    newl = add (newl, "#");

	    if (sb_live) {
		newl = add (newl, "#");
		newl = add (newl, "# Analog joystick support for SBLive! boards");
		newl = add (newl, "#");
		newl = add (newl, "# alias char-major-15 joy-analog");
		newl = add (newl, "# pre-install joy-analog modprobe \"-k\" \"emu10k1-joy\" \"io=0x200\"");
		newl = add (newl, "# post-install emu10k1-joy modprobe \"-k\" \"joystick\"");
	    }
	    
	    
	    newl = add (newl, "# ALSA section {$#@_end_@#$} [don't remove or move this line] ^^^^^");

	    if (SCR(`Write(.lines, newl)) != 0)
		    // To translators: just one file will be displayed in instead parameter %1
		return sformat (UI(_("Cannot write file: %1.\nThe sound will not be started after next reboot.\nThe sound is not configured well.")), file);

	    return "";
	};


	define EnableJoystick () ``{

	    return Shell ("/usr/sbin/alsactl -f /tmp/asound.conf store;\
	    /usr/bin/sed '/\"Joystick\"/s/false/true/' /tmp/asound.conf >/etc/asound.conf;\
	    /bin/rm -f /tmp/asound.conf;\
            /usr/sbin/alsactl restore");	    

	};
  
				// 1. depmode 2. save modules.conf 3. depmode 4. alsactl store
	define save () ``{

	    string err = "";
	    
	    if (Shell("/sbin/depmod -a -F /boot/System.map-`uname -r` `uname -r`") == 127)
		return UI (_("Cannot make a list of module dependencies.\nProgram 'depmod' missing,\nplease check 'modules' package (series 'a1')."));
	    
	    err = ConfModules (modules_conf);

	    if (size (err) > 0)
		return err;

	    if (Shell("/sbin/depmod -a -F /boot/System.map-`uname -r` `uname -r`") == 127)
		return UI (_("Cannot make a list of module dependencies.\nProgram 'depmod' missing,\nplease check 'modules' package (series 'a1')."));

		//if (Shell ("/usr/sbin/alsactl store") == 127)
		//return UI(_("Cannot find 'alsactl'\nPlease check your installation of ALSA package (series 'snd1')"));
	    if (EnableJoystick () == 127)
		return UI(_("Cannot find 'alsactl'\nPlease check your installation of ALSA package (series 'snd1')"));
	    
	    return "";
	    
	};
	

	    // ======= main ========

	string modules_conf = "/etc/modules.conf";
	
				// Help text - saving configuration/volume 1/2
	string help_text = UI(_("<p>The previously adjusted <b>volume</b> will be <b>stored</b> now for later use.</p>"));
				// Help text - saving configuration/volume 2/2
	help_text = help_text + UI(_("<p>The configuration of the sound card will be <b>saved</b>.</p>"));

	boolean next = false;
	boolean back = false;

	map snd_info = Args (0);
	map options_entered = Args (1);
	
	term con = `VBox (
	    `Top (
		`Label (soundcard_name (snd_info))
		),
	    `HVCenter (
		`ReplacePoint(`id(`la),
				// To translators: label message
			      `Label (_("Saving ..."))
			      )));
	
	UI(`SetContents (_("Sound cards"), con, help_text, back, next));

	any ui = nil;

	string err = "";
	if (!test_mode)
	    err = save ();

	UI(`ChangeWidget (`id(`next), `Label, _("&Next")));

	UI(`ReplaceWidget(`id(`la), `Label("")));
	
	if (size (err) > 0) {
	    
	    UI(`ChangeWidget(`id(`back), `Enabled, true));
		    
	    UI(`ReplaceWidget(`id(`la), `Label(sformat (UI(_("The sound card configuration cannot be saved,\n due to following error:\n%1")),
							err))));

	    repeat {
		
		ui = UI(`UserInput ());
	    
	    } until (ui == `next || ui == `back || ui == `cancel);
	    
	    
	    return ui;
	    
	}
	else {

	    UI (`DisplayMessage (_("The sound card was succesfully configured and\nyou can now use it.")));
	}

	return `next;
}
