/**
 *
 * $Id$
 *
 * File:              
 *   sound_ui.ycp        
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   UI interface
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz> , Dan Meszaros <dmeszar@suse.cz>
 *
 *                   
 * Global variables:	STRINGS
 */

{
    textdomain "sound";

    include "misc_defines.ycp";
    include "sound/sound_routines.ycp";

    /** 
     *	InitializingDialog
     *  
     *
     * @return symbol
     */

    define InitializingDialog () ``{
	  // label message
	term con = `Label (sformat(UI(_("Initializing ..."))));
	string helptext = "";
	 // dialog title message
	UI(`SetWizardContents (_("YaST2\nInitializing ..."), con, helptext, false, false));

	return `next;
    };


    /**  
     *  DisplayName
     *  
     *
     * @return map
     */
	  
    define DisplayName (string name, string cname) ``{
	string helptext=lookup(STRINGS, "DisplayName");

	term con = `VBox 
	(
	  `VStretch (),
	  `HBox
	  (
	    `HSpacing (3),
	    `HVCenter
	    (
	      `VBox
	      (
			// To translators: label message 1/2 The sound card XY will be configured
		`Left(`Label (_("The sound card\n"))),
		`Label (`opt(`outputField), name),
		`VSpacing (),
			// To translators: label message 2/2 The sound card XY will be configured
		`Left(`Label (_("\nwill be configured as"))),
		`Label (`opt(`outputField), cname)
	      )
	    )
	  ),
	  `VStretch (),
	  `VBox
	  (
	    `HSquash
	    (
	      `HBox 
	      (
			// Options - button label
		`HWeight(1, `PushButton (`id(`options), _("Options"))),
			// Skip button label
		`HWeight(1, `PushButton (`id(`skip), _("Skip")))
	      )
	    ),
	    `VSpacing ()
	  )
	);

		// dialog title
	UI(`SetWizardContents (_("Sound card configuration"), con, helptext, true, true));
		// Next button label    
	UI(`ChangeWidget(`id(`next), `Label, _("&Next")));
	return $["ui" : UI(`UserInput ())];
    }

    /**
     *  
     * 	OpenMainDialog 
     *
     * @return void
     */

    define OpenMainDialog() ``{
	UI(`OpenDialog(`opt(`defaultsize), `VBox
	  (
	    `Image(`suseheader, "SuSE"),
	    `HBox
	    (
	      `HWeight(30, `RichText(`id(`help), "")),
	      `HWeight
	      (70, `VBox
		(
		  `Left(`Heading(`id(`title), _("YaST2\nInitializing ..."))),
		  `HVCenter(`ReplacePoint(`id(`contents), `Empty())),
		  `HBox
		  (
			// back pushbutton: the user input is ignored and the last dialog is called
		    `PushButton(`id(`back), `opt(`disabled), _("&Back")),
		    `HStretch (),
			// next pushbutton: the user input is checked and the next dialog is called
		    `PushButton(`id(`next), `opt(`disabled, `default), _("&Next"))
		  )
		)
	      )
	    )
	  )
	));
    }


    UI(
    ``{
    /**
     *  
     *  SetWizardContents 
     * 
     * @return void
     */
	define SetWizardContents(string title, term contents, string helptext,
				       boolean has_back, boolean has_next) 
	    ``{
	      ChangeWidget(`id(`next), `Enabled, has_next);
	      ChangeWidget(`id(`back), `Enabled, has_back);
	      ChangeWidget(`id(`help), `Value, helptext);
	      ChangeWidget(`id(`title), `Value, title);
	      ReplaceWidget(`id(`contents), contents);
	    }
	}
    );


    UI(
    ``{
    /**
     *  
     *  displays a popup message with OK button. 
     *
     * @return void
     */
	define DisplayMessage(string message) 
	``{
		    // ok pushbutton: confirm the dialog
	    OpenDialog(`opt(`decorated),
	      `HBox(
		`HSpacing(1),
		`VBox(
		  `VSpacing(0.2),
		  `Label(message),
		    // "OK" button: User confirmation
		  `PushButton(`opt(`default), _("&OK")),
		  `VSpacing(0.2)
		),
		`HSpacing(1)
	      )
	    );
	    UserInput();
	    CloseDialog();
	}
    }
    );		


    UI(
    ``{
    /**
     *  
     *  Dysplays YesOrNo dialog
     *  @param message message
     *  @param yes_button_message 'yes' button message
     *  @param no_button_message 'no' button message
     *  @return boolean true/false
     */
	define YesOrNo(any message, string yes_button_message, string no_button_message) 
	``{
	    OpenDialog(`opt(`decorated),
	      `HBox
	      (
		`HSpacing(1),
		`VBox
		(
		  `VSpacing(0.2),
		  `Label(message),
		  `HBox
		  (
		    `PushButton(`id(`yes), `opt(`default), yes_button_message),
		    `HSpacing(2),
		    `PushButton( no_button_message )
		  ),
		  `VSpacing(0.2)
		),
		`HSpacing(1)
	      )
	    );
	    any ret = UserInput();
	    CloseDialog();
	    return (ret == `yes);
	}
    }
    );	


    UI(
    ``{
    /* 
     *  
     *  DebugDialog 
     *
     * @return void
     */
	define DebugDialog(any str) 
	``{
	      // OK button user confirmation
	    OpenDialog(`VBox(`RichText(sformat("%1",str)),`PushButton(_("&OK"))));
	    any r = UserInput();
	    CloseDialog();
	}
    }
    );


    UI(
    ``{
    /* 
     *  
     *  WarnDialog 
     *
     * @return boolean
     */
	define WarnDialog(string message) 
	``{
	    OpenDialog(`opt(`decorated, `warncolor),
	      `HBox
	      (
		`HSpacing(1),
		`VBox
		(
		  `VSpacing(0.2),
		  `Heading(message),
		  `HBox
		  (
			// Yes button - user confirmation
		    `PushButton(`id(`yes),  _("&Yes")),
		    `HStretch(),
			// Yes button - user confirmation
		    `PushButton(`opt(`default), _("&No"))
		  ),
		  `VSpacing(0.2)
		),
		`HSpacing(1)
	      )
	    );
	    any ret = UserInput();
	    CloseDialog();
	    return (ret == `yes);
	}            
    }
    );

    /**
     *	UI controls for volume setting dialog
     *
     *  @param card map with card info
     *  @param vol initial volume (0-100)
     *  @return term 
     */

    define VolumeCon(map card , integer vol) ``{
	term slider = `IntField(`id(`volume), `opt(`notify), _("Volume"), 0, 100, vol);

	if (UI(`HasSpecialWidget(`Slider)))
	{
	          // slider label
	    slider = `Slider (`id(`volume), `opt(`notify), _("Volume"), 0, 100, vol);
	}

	term con = `HBox
	  (
	    `HSpacing (3),
	    `VBox 
	    (
	      `VSpacing (),
	      `Top 
	      (`VBox
		(
			// dialog title
		  `Left(`Label(_("Settings for sound card"))),
		  `Label (`opt(`outputField), hardware_name (card))
			)),
		    // To translators keep backlash here
		  `Frame 
		  (_("Volume adjust and test"), 
		    `HBox
		    (
		      `HSpacing (),
		      `VBox
		      (
			`VSpacing (0.5),
			slider,
			`VSpacing (),
			    // Test - button label
			`PushButton (`id (`test), _("&Test")),
			`VSpacing (0.5),
			    // message label
			`Label (_("Press 'Test' to start playing sound sample")),
			`VSpacing (0.5)
		      ),
		      `HSpacing ()
		    )
		  ),
		  `VStretch ()
	      ),
	      `HSpacing (3));

	return con;
    }
	    
    /**
     *	UI controls for options setting dialog
     *
     *  @param card card info
     *  @param itemized_descriptions option list (preformated using 'create_table' with tripples: description, name, value
     *  @param current_option index of initially selected item
     *  @param current_option_name initially selected item name
     *  @return term 
     *  @see sound_options#create_table
     */

    define OptionsCon(map card, list itemized_descriptions, integer current_option, string current_option_name) ``{
	con = `HBox
              (
                `HSpacing (3),
                `VBox
                (
                  `VSquash(`Top(`Label (`opt(`outputField), hardware_name (card)))),
                  `VSpacing (),
                      // To translators: Table headers "description" -- option description, "option" -- option name, "value" -- value of an option
                  `Table (`id(`table), `opt (`notify, `immediate), `header(_("Description"), _("Option"),
                                                                                             `Right(_("Value"))), itemized_descriptions),
                  `VSpacing (0.5),
                  `VBox
                  (
                    `TextEntry (`id (`des), current_option_name,
                                      lookup (select (options, current_option), "value", "")),
                    `VSpacing (0.5),
                    `HBox
                    (
                              // "set" button: Sets the option value
                      `PushButton (`id (`set), `opt(`default), _("&Set")),
                              // "reset" button: Resets all values
                      `PushButton (`id (`reset), _("&Reset"))
                    )
                  ),
                  `VSpacing (0.5)
                ),
                `HSpacing (3)
              );
	return con;
    }

    /**
     * dialog to be displayed in WhichDialog function
     *
     * @param nc list of not configured cards
     * @see WhichDialog
     */

    define WhichDlgCon(list nc) ``{
	term con = `HBox(
            `HSpacing (3),
        // frame label
            `Frame
            (`id(`frame), _("Select"),
                `HBox
                (
                    `HSpacing (1),
                    `VBox
                    (
                        `RadioButtonGroup
                        (`id(`rg),
                            `VBox
                            (
                                `VSpacing (1),
                                `Left(`VBox
                                (
                      // label of radiobutton
                                    `Left(`RadioButton(`id(`auto), `opt (`notify), _("&Autodetected"), (size (nc) > 0))),
                           // label of list with autodetected cards
                                    `VSquash(`SelectionBox(`id(`sel), _("List of autodetected"), nc))

                                )),
                                `VSpacing (1),
                       // label of radio button
                                `Left(`RadioButton (`id(`manual), `opt(`notify), _("&Manual selection"), (size (nc) == 0))),
                                `VSpacing (1)
                            )
                        )
                    ),
                    `HSpacing (1)
                )
            ),
            `HSpacing (3)
        );
	return con;
    }

    define ComplexDlgCon(list cc, boolean start_alsa, boolean start_alsa_seq) ``{
	term con = `HBox
            (
                `HSpacing (3),
                `VBox
                (
                    `Table (`id(`configured_table), `opt (`notify, `immediate),
                    // table header labels
                        `header(_("Number"), _("Card name")), cc),
                    `VSpacing (0.5),
            // Delete - button label
                    `HBox
                    (
                        `PushButton (`id(`b_delete), _("Delete")),
                        `HStretch (),
                  // Add soundcard ... - button label
                        `PushButton (`id(`b_conf2), _("Add soundcard ..."))
                    ),
                    `VSpacing (0.5),
                    `HBox
                    (
                        `HStretch (),
                  // check button label
                        `VBox
                        (
                            `Left(`CheckBox(`id(`b_alsa), `opt(`notify), _("Start ALSA"), start_alsa)),
                         // check button label
                            `Left(`CheckBox(`id(`b_seq), `opt(`notify), _("Start sequencer"), start_alsa_seq))
                        )
                    ),
                    `VSpacing (0.5)
                ),
                `HSpacing (3)
            );
	return con;
    }

}
