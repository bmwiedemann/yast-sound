/*
 * Module where an attemp of inserting module is provided,
 * if everything goes well adjusting volume is done here
 * otherwise error message is displayed
 * Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 *
 * parameters: 1st: module, Map, map of card
 *             2nd: card_id, integer
 *
 */

{

    textdomain "sound";
	
    include "misc_defines.ycp";
    include "sound/sound_routines.ycp";




				// here the test sound is played, by
				// default ist alsa whistle sound, but
				// if snd_au package is installed,
				// than it's Linus Torvals voice, the
				// if the test file cannot be found,
				// the message is displayed

    define PlayTest () ``{
	
	if (!fileexist(lookup (user_settings, "audio_file"))) {
	    string file = lookup (user_settings, "audio_file");

	    // To translators: just one file will be displayed
	    // To translators: if the test audio file can not be found this message is displayed
	    // To translators: This is just popup message, shouldn't be too long
	    string msg = sformat (UI (_("Cannot find file:\n %1\n\n(test audio file)")), file);

	    UI (`DisplayMessage (msg));
	}
	else {

	    
	    
	    string play_cmd = lookup (user_settings, "play_cmd", "");
	    string audio_file = lookup (user_settings, "audio_file", "");
	    // more cards
	    if (no_alsa)
		Shell(sformat("%1 %2 &", play_cmd, audio_file), $[]);
	    else
		Shell(sformat("%1 -c %2 %3 &", play_cmd, card_id, audio_file), $[]);

	}
    };



				// tries to insert module with options (if any)
				// return string with error message (empty string if ok)
    define probe_module (map card) ``{

	string module_name    = lookup (lookup (card, "module", $[]), "name", "");
	list params           = filter (`e, lookup (lookup (card, "module", $[]), "params", []), ``(size (lookup (e, "value")) > 0));
	string module_options = mergestring (maplist (`e, params, ``(sformat("%1=%2", lookup (e, "name", ""), lookup (e, "value", "")))), " ");
	boolean probe         = lookup (lookup (card, "module", $[]), "modprobe", true);
	boolean mod_active    = lookup (lookup (card, "module", $[]), "active", false);
	boolean no_alsa       = lookup (lookup (card, "module", $[]), "no_alsa", false);

	if (size (module_name) == 0)
	    // To translators: error message
	    return UI(_("Invalid module name."));
	
	SCR(`Execute (.target.bash, "/sbin/depmod -a -F /boot/System.map-`uname -r` `uname -r`", $[]));



	    
	if (!mod_active) {
	    if (!probe)
		SCR (`Execute (.target.insmod, module_name, module_options));
	    else
		SCR(`Execute (.target.modprobe, module_name, module_options));
	}


	if (no_alsa) {
	    user_settings = add (user_settings, "play_cmd", "/usr/bin/play");
	    user_settings = add (user_settings, "mixer", "/usr/bin/aumix \"$CHANNEL\" $VOLUME");
	}
	else
	    SCR(`Execute (.target.modprobe, "snd-pcm-oss", "")); // backwards OSS compatibility

	map pm = SCR(`Read(.proc.modules));

	if (!haskey (pm, module_name)) {

	    // To translators: label to error popup
	    return sformat (UI(_("The kernel module %1 for sound support\ncould not be loaded.")), module_name);
	}
	
	return "";
	
    };


/*
 * This dialog sipmply reads user input and call apropriate set funtion
 */
    define VolumeDialog () ``{

	//unmute these devices
	if (use_alsa)
	    maplist (`dev, ["PCM", "PCM,1", "Wave", "Master Digital", "Synth"], 
		     ``(SetVolume (lookup (user_settings, "mixer"), dev, sformat ("%1", 70), card_id)));
	    
	// Help text - adjusting volume 1/4
	string help_text = UI(_("<p>Please adjust the volume.</p>"));
				// Help text - adjusting volume 2/4
	help_text = help_text + UI(_("<p>You can test your sound card by pressing the <b>Test</b> button.</p>"));
				// Help text - adjusting volume 3/4
	help_text = help_text + UI(_("<p>After the configuration is\
 done you can use <b>amixer</b> (or any program of your choice) for\
 adjusting the volume.</p>"));

	// Help text - adjusting volume 4/4
	help_text = help_text + UI(_("<p><b>WARNING/SPECIAL\
 NOTE:</b>Please start testing your sound card with <b>very</b> low\
 volume settings to prevent an accident with too much loud\
 noise.</p>"));


	integer vol = 10;
				// TODO: add some other device ajusting here (stereo, other devices like CD, etc ...)???
	term con = `HBox(
	    `HSpacing (3),
	    `VBox (
		`VSpacing (),
		`Top (`VBox(
		    `Left(`Label(_("Settings for sound card"))),
		    `Label (`opt(`outputField), hardware_name (card))
		    )),
		// To translators keep backlash here
		`Frame (_("Level adjust \& test"), `HBox(
		    `HSpacing (),
		    `VBox(
			`VSpacing (0.5),
			`Slider (`id(`volume), `opt(`notify), _("Volume"), 0, 100, vol),
			`VSpacing (),
			`PushButton (`id (`test), _("&Test")),
			`VSpacing (0.5),
			`Label (_("Press 'Test' to start playing sound sample")),
			`VSpacing (0.5)
			),
		    `HSpacing ())),
		`VStretch ()
		),
	    `HSpacing (3));

	UI(`SetWizardContents (_("Sound cards"), con, help_text, true, true));
	SetVolume (lookup (user_settings, "mixer"), "Master", sformat ("%1", vol), card_id);

	repeat {

	    ui =  UI (`UserInput ());

	    if (ui == `volume) {
		vol = UI(`QueryWidget(`id(`volume), `Value ));

		SetVolume (lookup (user_settings, "mixer"), "Master", sformat ("%1", vol), card_id);
	    }
	    else if (ui == `test)
		if (!test_mode)
		    PlayTest ();
		
	} until ((ui == `back) || (ui == `next) || ui == `cancel);

	return ui;
    }


    define ErrorDialog (map card, string err) ``{
					// Help text - intenal YaST2 error 1/3
	string help_text = UI(_("<p>An error has occurred. </p>"));
				// Help text - intenal YaST2 error 2/3
	help_text = help_text + UI(_("<p>You should check that you have\
 correctly installed the <b>ALSA</b> package (from the series 'snd') and that\
 you are running this as a root.</p>"));
	
				// Help text - intenal YaST2 error 3/3
	help_text = help_text + UI (_("<p>If the the problem\
 persists, you can try to pass some <b>options</b> to the ALSA module.\
 If you still can't get your sound card working, you can try\
 <i>OSS/Free</i> or another module.</p>\
 <p>However, <b>YaST2</b>\
 sound configuration currently only supports ALSA.</p>"));

	
	term con = `HVCenter(
	    `VBox(
		`Label (_("An error occured during installing")),
		`VSpacing (),
		`Label (`opt(`outputField), hardware_name (card)),
		`VSpacing (),
		`Label (err)));
	
	UI(`SetWizardContents (_("Sound cards"), con, help_text, true, false));

	repeat {
	    
	    ui =  UI (`UserInput ());


	} until ((ui == `back) || ui == `cancel);

	return ui;
    }


// ===== main =====
    /*
     * Steps:
     *        1. try to insert kernel module
     *        2. on succes unmute and volume dialog
     *        3. on fail display error message
     */

    map card = Args (0);
    integer card_id = Args (1);

    if (!haskey(card, "module"))
	card = add(card, "module", get_module (card));

    map module_map = lookup (card, "module", $[]);
    
    map user_settings = $["audio_file" : "/usr/share/sounds/alsa/test.wav",
			 "play_cmd"    : "/usr/bin/aplay",
			 "mixer"       : "/usr/bin/amixer -c $CARD_NUM set \"$CHANNEL\" $VOLUME% unmute"];
    


    string err_msg = "";

    if (!test_mode)
	err_msg = probe_module (module_map);

    any ui = nil;

    if (size (err_msg) > 0)
	ui = ErrorDialog (card, err_msg);
    else
	ui = VolumeDialog ();

    if (ui == `back)
	SCR(`Execute (.target.modprobe, sformat ("-r %1", lookup (lookup (module_map, "module", $[]), "name", "")), ""));

    
    return $["ui" : ui, "return" : size (err_msg) == 0];

}


