/**
 * File:
 *   sound_manual.ycp
 * 
 * Module:
 *   Sound
 * 
 * Summary:
 *   Module where an attemp of inserting module is provided,
 *   if everything goes well adjusting volume is done here
 *   otherwise error message is displayed
 * 
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 * 
 *
 * $Id$
 *
 *
 * parameters: 1st: module, Map, map of card
 *             2nd: card_id, integer
 *             3rd: boolean - finish
 *
 */

{

    textdomain "sound";
	
//    include "misc_defines.ycp";
//    include "sound/routines.ycp";
//    include "sound/ui.ycp";
//    include "sound/texts.ycp";
//    include "sound/write_routines.ycp";


    map STRINGS=STRINGS_();

    /**
     * This dialog sipmply reads user input and calls apropriate set funtion
     *
     * @return symbol
     */

    define VolumeDialog () ``{

	    //unmute these devices
	/* help text: adjusting volume */

	string help_text=lookup(STRINGS, "VolumeDialog");

	integer vol = 10;

	term con=VolumeCon(save_entry, vol);
	    // dialog title
	UI::SetWizardContents (_("Sound card volume"), con, help_text, true, true);
	if (finish)
	{
	    UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
	}

/* Sound fonts installation */
	if(HasFonts(save_entry) && !FontsInstalled())
	{
	    InstallFonts("", false);
	}

/* end of sound fonts installation */

	

	SetVolume ("Master", card_id, vol);

	repeat 
	{
	    ui =  UI::UserInput ();

	    if (ui == `volume) 
	    {
		vol = UI::QueryWidget(`id(`volume), `Value );
		SetVolume("Master", card_id, vol);
	    }
	    else if (ui == `test) 
	    {
		if (!test_mode)
		{
		    string msg=PlayTest(user_settings, card_id);
		    if(msg != "")
		    {
			UI::MessagePopup (msg);
		    }
		}
	    }
//	    else if (ui == `next) 
//	    {
//		if (finish)
//		{
//		    if (!UI::YesNoPopup (_("The sound volume and the configuration\nfor the sound card will be saved now.")))
//		    {
//		      continue;
//		    }
//		}
//		ui = `next;
//	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if(ReallyAbort())
		{
		    ui=`abort;
		    break;
		}
	    }
		      
	} until ((ui == `back) || (ui == `next) || ui == `cancel);
	return ui;
    }

    /**
    * shows error message in wizard
    * @return symbol `back | `cancel
    */

    define ErrorDialog (map save_entry, string err) ``{
				    // Help text - intenal YaST2 error 
    
	y2error("%1", save_entry);
	string help_text=lookup(STRINGS, "ErrorDialog");
	string additional="";
	if(lookup(save_entry, "module", "") == "snd-card-cs461x")
	{
	    additional="\n\n"+_("Please try to configure this sound card manually 
using the \"Cirrus Logic CS4232\" or \"Cirrus 
Logic CS4236\" driver and configure 
its parameters using the 'Advanced setup'.");
	}
	    
	term con = `HVCenter
	  (
	    `VBox
	    (
		    // error message
	      `Label (_("An error occured during the installation of")),
	      `VSpacing (),
	      `Label (`opt(`outputField), lookup(save_entry, "model", "")),
	      `VSpacing (),
	      `Label (err+additional)
	    )
	  );
	    
	    // dialog title
	UI::SetWizardContents (ErrorMsg(), con, help_text, true, false);
	if (finish)
	{
	    UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
	}

	repeat 
	{
	    ui =  UI::UserInput ();
            if(ui == `cancel || ui == `abort)
            {
                if(ReallyAbort()) 
                {
                    return `abort;
                }
            }

	} until ((ui == `back) || ui == `cancel);

	return ui;
    }

    /**
    * shows success message in wizard
    * @return symbol `back | `cancel
    */

    define SuccessDialog (map save_entry) ``{
                                    // Help text - intenal YaST2 error 

        string help_text=lookup(STRINGS, "SuccessDialog");

        term con = `HVCenter
          (
            `VBox
            (
                    // error message
              `Label (_("Your sound card is ready for use.")),
              `VSpacing (),
              `Label (`opt(`outputField), lookup(save_entry, "model", "")),
              `VSpacing (),
              `Label ("")
            )
          );

            // dialog title
        UI::SetWizardContents (_("Success"), con, help_text, true, true);
        if (finish)
        {
            UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
        }

        repeat
        {
            ui =  UI::UserInput ();
	    if(ui == `cancel || ui == `abort)
	    {
		if(ReallyAbort()) 
		{   
		    return `abort;
		}
	    }
        } until ((ui == `back) || ui == `next);

        return ui;
    }




  // ===== main =====
      /*
       * Steps:
       *        1. try to insert kernel module
       *        2. on succes unmute and volume dialog
       *        3. on fail display error message
       */
    boolean need_restart=true;
    map save_entry = Args (0);
    integer card_id = Args (1);
    boolean finish = false;
    boolean test_mode=false;

    boolean quick = false;

    UI::DisableWizardAbortButton();

    if (size (Args ()) > 2)
    {
	finish = Args (2);
    }
    
    if (size (Args ()) >3)
    {
	quick= Args (3);
    }
    
    list save_info=[];
    if (size (Args())>4)
    {
	save_info=Args(4);
    }

    map user_settings = $["audio_file"  : "/usr/share/sounds/alsa/test.wav"];

//			  "play_cmd"    : "/usr/bin/aplay",
//			  "mixer"       : "/usr/bin/amixer -c $CARD_NUM set \"$CHANNEL\" $VOLUME% unmute"];
      
    string err_msg = "";

    stop_programs();    

    if (!test_mode)
    {
	SCR::Execute(.target.bash, "/etc/init.d/alsasound stop > /dev/null 2>&1", $[]);
	list new_save=add(save_info, save_entry);
	y2error("storing save info:%1", new_save);
	SaveModulesEntry (new_save, [], true);
	alsasound_start_tmp(true);
	err_msg = check_module(save_entry);
    }
    any ui = nil;

    if (size (err_msg) > 0)
    {
	ui = ErrorDialog (save_entry, err_msg);
    }
    else
    {
        maplist (`dev, ["Master", "PCM", "PCM,1", "Wave", "Master Digital", "Synth"],
    		    ``(SetVolume (dev, card_id, 70)));
	unmute(["Master", "PCM", "PCM,1", "Wave", "Master Digital", "Synth"], card_id);
	if(!quick)
	{
	    ui = VolumeDialog ();
	}
	else
	{
	    SetVolume ("Master", card_id, 75);
	    ui = SuccessDialog(save_entry);
	}
	storeVolume(card_id);
    }

    if (ui == `back || ui == `cancel || ui == `abort)
    {
	SaveModulesEntry(save_info, [], true);
	alsasound_start_tmp(true);	
    }
    
    if(ui==`next)
    {
	y2error("Storing volume");
//	storeVolume(-1);
    }	

    SCR::Execute(.audio.alsa.restore, 0 ,0);

    UI::ChangeWidget (`id(`next), `Label, UI::NextButtonLabel());

    return $["ui" : ui, "return" : size (err_msg) == 0];

}


