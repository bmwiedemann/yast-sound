/**
 * File:
 *   sound_write.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Provides saving /etc/modules.conf and volume.
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * Parameters are given in a map with keys:
 *         "modules_conf" ... save info- list of configured cards:
 *	   [
 *		$[
 *		    "model"	: "sb live!",
 *		    "alias"	: "snd-card-0",
 *		    "options"	: $["snd_id":"0" ...],
 *		    "module"	: "snd-emu10k1",
 *		    "unique_key": "abcd.efghijklmn"
 *		],
 *              $[
 *                  "model"     : "avi onboard!",
 *                  "alias"     : "snd-card-1",
 *                  "options"   : $["snd_id":"1" ...],
 *                  "module"    : "snd-asf",
 *                  "unique_key": "abcd.abcdefghij"
 *              ]
 *         ]
 *
 *	   "rc_vars" ... sysconfig values
 *	   $[
 *		"LOAD_SEQUENCER" : "yes"
 *         ]
 *
 *	   "vol_settings" ... volume setting (usefull only for autoconfig)
 *	   [
 *		[  // card #1
 *		    ["PCM", 32, false], ["Master", 100, true] ...
 *	        ],
 *		[  // card #2
 *		],
 *		...
 *
 *	   ]
 *
 * Steps:
 *        1. save '/etc/modules.conf'
 *        2. save '/etc/rc.config'
 *        3. save volume
 *        4. call function to provide some additional work
 *
 * Return boolean true on success, false if failed
 */
{
    textdomain "sound";


    include "sound/write_routines.ycp";
    include "sound/alsa_routines.ycp";

    import "Progress";
    import "Wizard";
    import "Runlevel";

    import "Sound";
    import "Joystick";

    // ==== MAIN ====

    map settings	= WFM::Args(0);
    map rc_values	= settings["rc_vars"]:$[];
    list save_info	= settings["modules_conf"]:[];
    list vol_settings	= settings["volume_settings"]:[];

    // do nothing when proposal is empty
    // (Sound::installation is set to true in proposal mode)
    if (Sound::installation && size(save_info) == 0)
    {
	y2debug("empty proposal. exiting.");
	return true;
    }

    list stones = [
	    // progress bar item
	    _("Save module configuration"),
	    // progress bar item
            _("Save sound card information"),
	    // progress bar item
	    _("Save sysconfig values"),
	    // progress bar item
	    _("Start sound card"),
	    // progress bar item
	    _("Store volume"),
	    // progress bar item
	    _("Store joystick settings")];

    list stones2 = [
	    // progress bar item
	    _("Saving sound card settings."),
	    // progress bar item
	    _("Saving card information..."),
	    // progress bar item
	    _("Saving sysconfig values..."),
	    // progress bar item
	    _("Starting sound card..."),
	    // progress bar item
	    _("Storing volume settings"),
	    // progress bar item
	    _("Storing joystick settings...")];


    // not really necessary for Progress stuf (it is set off in _auto client)
    if (!Sound::write_only)
    {
	// progres bar label
	Progress::New (_("Saving sound card settings."), " ", size(stones) - 1,
		// progres bar label
		stones, stones2, _("Saving sound card settings."));
        if (Sound::use_ui)
	    Wizard::DisableAbortButton();
    }

    Progress::NextStage();

    SaveModulesEntry(save_info, []);

    sleep(10);
    Progress::NextStage();

    if (!Sound::write_only)
    {
	Sound::StoreUniqueKeys();
    }

    sleep(10);
    Progress::NextStage();

    SaveRCValues(rc_values);

    sleep(10);
    Progress::NextStage();

    list configuredcards = Sound::GetSoundCardList();

    if (!Sound::write_only)
    {
	// stop joystick before restarting ALSA
	SCR::Execute(.target.bash, "/etc/init.d/joystick stop", $[]);

	// restart ALSA
	if (size(configuredcards) > 0)
	{
	    SCR::Execute(.target.bash, "/etc/init.d/alsasound start", nil);
	}
    }

    Progress::NextStage();

    if (write_only && haskey (settings, "volume_settings"))
    {
	set_vol_settings (vol_settings);
    }

    if (SCR::Read(.target.size, "/etc/asound.state") == -1)
    {
	integer i = 0;
	maplist (map e, save_info, ``{
	    Sound::InitMixer (i, e["module"]:"");
	    i = i + 1;
	});
    }

    SaveVolume();

    sleep(10);
    Progress::NextStage();

    // write joystick configuration
    Joystick::Write (``{ return false;});

    if (size(configuredcards) > 0)
    {
	// enable alsasound service in runlevels 2,3,5
	Runlevel::ServiceFinetune("alsasound", ["2", "3", "5"]);
    }
    else
    {
	// disable sound service - it's not needed, no soundcard is present
	Runlevel::ServiceAdjust("joystick", "disable");
	Runlevel::ServiceAdjust("alsasound", "disable");
    }

    return true;// TODO return value!
}
