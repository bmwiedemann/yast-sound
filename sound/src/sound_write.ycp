/**
 * File:
 *   sound_write.ycp
 * 
 * Module:
 *   Sound
 *
 * Summary:
 *   Provides saving /etc/modules.conf and volume.
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 * Params:
 *         1st ... map with information to store with these keys:
 *                 "cards"  : <list> // list with all card-dependent information
 *                 "system" : <map> // list with all system dependent information
 *                 "other"  : <term> // function to call to provide some additional work
 *
 *                  each element of cards list will be a map with these keys:
 *
 *                                   "name"    : <string> // card name
 *                                   "modules" : <map>    // map for 'modules.conf' with "alias" and
 *                                                        // "options" keys
 *                                   "volume"  : <map>    // map for storing volume, map keys should be
 *                                                        // channels
 *
 *                  system will be a map with (possibly many more) these keys:
 *
 *                                   "modules" : <list> // list of maps for 'modules.conf' - "alias",
 *                                                      // "options"; it's list because more than one entry
 *                                                      // to 'modules.conf' will be needed
 *
 *                                   "volume"  : <map>  // "mixer" ... mixer command to set-up the volume 
 *                                                                     (must include $CHANNEL and $VOLUME substrings, i.e:
 *                                                                      "/usr/bin/amixer set \"$CHANNEL\" $VOLUME% unmute")
 *                                                      // "store" ... function to call to store the info.
 *                                   "rc"      : <map>  // map with rc.config entries (i.e. START_ALSA, START_ALSA_SEQ entry etc ...)
 *                 
 *
 *        2nd ... boolean - testmode
 *
 * Steps:
 *        1. save '/etc/modules/conf'
 *        2. save '/etc/rc.config'
 *        3. save volume
 *        4. call function to provide some additional work
 *
 * Return boolean true on success, false if failed
 */

{


    textdomain "sound";
    include "sound/texts.ycp";

    map STRINGS=STRINGS_();

    include "sound/write_routines.ycp";

      // ==== MAIN ====

    boolean test_mode = false;
    map sound_info = Args (0);

y2error(sformat("%1", sound_info));

    string helptext = "";
    string err_msg = "";

      
    if (size (Args ()) > 1)
    {
	test_mode = Args (1);
    }

				  // label message
    term con = `Label(_("Saving ..."));
				  // dialog title
    UI(`SetWizardContents (_("Sound configuration"), con, helptext, false, false));

      // Step ONE: save '/etc/modules.conf'
    if (!test_mode)
    {
	map result=SaveModulesEntry (lookup (sound_info, "cards", []), lookup (lookup (sound_info, "system", $[]), "modules", []));
	err_msg=err_msg+lookup(result, "err_msg", "");
    }

    string mixer_command = lookup (lookup (lookup (sound_info, "system", $[]), "volume", $[]), "mixer", "");
    string function      = lookup (lookup (lookup (sound_info, "system", $[]), "volume", $[]), "store", "");

      // Step TWO: save '/etc.rc.config'
    if (!test_mode && size(lookup(lookup (sound_info, "system", $[]), "rc", $[])) > 0)
    {
	err_msg=err_msg+SaveRCValues (lookup(lookup (sound_info, "system", $[]), "rc", $[]));
    }

      // Step THREE: save volume
    if (!test_mode && (size (function) > 0) && (size (mixer_command) > 0))
    {
	map res=SaveVolume (function, mixer_command, lookup (sound_info, "cards", []));
	err_msg=err_msg+lookup(res, "err_msg", "");
    }


      // Step FOUR: call "other" function to handle some additional workaround
    if (!test_mode)
    {
	eval (lookup (sound_info, "other"));
    }

      // Finally let's display message

    string final_msg = "";
    if (size (err_msg) > 0)
    {
				  // Error popup message	
	  final_msg = sformat (lookup(STRINGS, "saveFinal1"), err_msg);
    }
    else 
    {	
				  // final success message
	final_msg = lookup(STRINGS, "saveFinal2");
	if (size(filter (`e, lookup (sound_info, "cards", []), ``((size (e) > 0) && (lookup (e, "name") != "off")))) == 0)
	{
					    // final success message	    
	    final_msg = lookup(STRINGS, "saveFinal3");
	}

    }

    if (test_mode)
    {
	  // message displayed just in the test mode
	  final_msg = final_msg + " " + UI(_("(TEST MODE)"));
    }
      
    UI(`DisplayMessage (final_msg));

    return (size (err_msg) == 0);
}
