/**
 * File:
 *   sound_write.ycp
 * 
 * Module:
 *   Sound
 *
 * Summary:
 *   Provides saving /etc/modules.conf and volume.
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>, 2000
 *
 * $Id$
 *
 * Params:
 *         1st ... save info- list of configured cards:
 *	   [
 *		$[
 *		    "model"	: "sb live!",
 *		    "alias"	: "snd-card-0",
 *		    "options"	: $["snd_id":"0" ...],
 *		    "module"	: "snd-card-emu10k1",
 *		    "unique_key": "abcd.efghijklmn"
 *		],
 *              $[
 *                  "model"     : "avi onboard!",
 *                  "alias"     : "snd-card-1",
 *                  "options"   : $["snd_id":"1" ...],
 *                  "module"    : "snd-card-asf",
 *                  "unique_key": "abcd.abcdefghij"
 *              ]
 *         ]
 *
 *	   2nd ... rc_values
 *	   $[
 *		"START_ALSA" : "yes",
 *		"START_SEQUENCER" : "yes"
 *         ]
 *	    
 *	   3rd ... use_alsa - boolean
 *
 *	   4th ... autoinstall mode boolean
 *
 *	   5th ... volume setting (usefull only for autoconfig)
 *	   [
 *		[  // card #1
 *		    ["PCM", 32, false], ["Master", 100, true] ...
 *	        ],
 *		[  // card #2
 *		    
 *		],
 *		...
 *
 *	   ]
 *
 * Steps:
 *        1. save '/etc/modules.conf'
 *        2. save '/etc/rc.config'
 *        3. save volume
 *        4. call function to provide some additional work
 *
 * Return boolean true on success, false if failed
 */

{


    textdomain "sound";
//    include "sound/texts.ycp";


 //   map STRINGS = STRINGS_();

    include "sound/write_routines.ycp";
    include "sound/alsa_routines.ycp";
    include "ui/progress.ycp";
    include "ui/wizard_dialog.ycp";

      // ==== MAIN ====

    boolean test_mode	= false;
    map rc_vars		= $[];

    string helptext	= "";
    string err_msg	= "";

    list save_info	= Args (0);
    boolean use_alsa	= true;
    boolean autoinstall = false;
      
    if (size (Args ()) > 1)
    {
	rc_vars = Args (1);
    }
    
    if (size(Args ()) > 2)
    {
	use_alsa = Args(2);
    }

    if (size(Args ()) > 3)
    {
	autoinstall = Args(3);
    }

    integer steps = 3;

    list stones = [
	    _("Save modules configuration"),
            _("Save RC values")];

    if (autoinstall)
    {
	stones = add(stones, _("Start sound cards"));
	steps = steps + 1;

	UI::CreateWizardDialog();
    }

    stones = add(stones, _("Store volume settings"));
				  // label message
//    term con = `Label(_("Saving ..."));
    ProgressSetup (_("Saving sound card settings."), " ", steps, 
		stones,
		"");


				  // dialog title
//    UI::SetWizardContents (_("Sound configuration"), con, helptext, false, false);
    UI::DisableWizardAbortButton();

    
    integer step = 0;

    ProgressMilestone(step, " ", step);
    step = step + 1;
    SaveModulesEntry(save_info, [], false);
    sleep(100);

    ProgressMilestone(step, " ", step);
    step = step + 1;
    save_unique_keys (maplist(`e, save_info, ``(lookup(e, "unique_key", ""))));
    sleep(100);

    ProgressMilestone(step, " ", step);
    step = step + 1;
    SaveRCValues(rc_vars);
    sleep(100);

    ProgressMilestone(step, " ", step);
    step = step + 1;

    if (autoinstall)
    {
	map out = SCR::Execute(.target.bash_output, "/usr/sbin/rcalsasound restart", nil);
    }

    ProgressMilestone(step, " ", step);
    if (size(Args()) >= 4)
    {
	set_vol_settings(Args(4));
    }
    SaveVolume();
    sleep(100);
    
    return (size (err_msg) == 0);
}
