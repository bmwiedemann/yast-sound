/**
 * File:
 *   sound_write.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Provides saving /etc/modules.conf and volume.
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * $Id$
 *
 * Params:
 *         1st ... save info- list of configured cards:
 *	   [
 *		$[
 *		    "model"	: "sb live!",
 *		    "alias"	: "snd-card-0",
 *		    "options"	: $["snd_id":"0" ...],
 *		    "module"	: "snd-emu10k1",
 *		    "unique_key": "abcd.efghijklmn"
 *		],
 *              $[
 *                  "model"     : "avi onboard!",
 *                  "alias"     : "snd-card-1",
 *                  "options"   : $["snd_id":"1" ...],
 *                  "module"    : "snd-asf",
 *                  "unique_key": "abcd.abcdefghij"
 *              ]
 *         ]
 *
 *	   2nd ... rc_values
 *	   $[
 *		"LOAD_SEQUENCER" : "yes"
 *         ]
 *
 *	   3rd ... use_alsa - boolean
 *
 *	   4th ... autoinstall mode boolean
 *
 *	   5th ... volume setting (usefull only for autoconfig)
 *	   [
 *		[  // card #1
 *		    ["PCM", 32, false], ["Master", 100, true] ...
 *	        ],
 *		[  // card #2
 *		    
 *		],
 *		...
 *
 *	   ]
 *
 * Steps:
 *        1. save '/etc/modules.conf'
 *        2. save '/etc/rc.config'
 *        3. save volume
 *        4. call function to provide some additional work
 *
 * Return boolean true on success, false if failed
 */

{


    textdomain "sound";
//    include "sound/texts.ycp";


 //   map STRINGS = STRINGS_();

    include "sound/write_routines.ycp";
    include "sound/alsa_routines.ycp";
//    include "ui/progress.ycp";
    import  "Progress";
    import  "Wizard";

    import "Sound";
    import "Joystick";

      // ==== MAIN ====

    boolean test_mode	= false;
    map rc_vars		= $[];

    string helptext	= "";
    string err_msg	= "";

    list save_info	= []; //Args (0);
    boolean use_alsa	= Sound::use_alsa;
    boolean autoinstall = false;

    map settings = Args(0);
    save_info = lookup(settings, "modules_conf", []);
    rc_vars = lookup(settings, "rc_vars", []);
    volume_settings = lookup(settings, "volume_settings", []);
    autoinstall = lookup(settings, "autoinstall", false);

    // do nothing when proposal is empty (Sound::installation is set to true in proposal mode)
    if (Sound::installation && size(save_info) == 0)
    {
	y2debug("empty proposal. exiting.");
	return true;
    }
/*
    if (size (Args ()) > 1)
    {
	rc_vars = Args (1);
    }
    
    if (size(Args ()) > 2)
    {
	use_alsa = Args(2);
    }

    if (size(Args ()) > 3)
    {
	autoinstall = Args(3);
    }
*/
    if (autoinstall)
    {
//	UI::Wizard::CreateDialog();
    }

    list stones = [
	    _("Save module configuration"),
            _("Save sound card information"),
	    _("Save sysconfig values"),
	    _("Start sound card"),
	    _("Store volume"),
	    _("Store joystick settings")];

    list stones2 = [
	    _("Saving sound card settings."),
	    _("Saving card information..."),
	    _("Saving sysconfig values..."),
	    _("Starting sound card..."),
	    _("Storing volume settings"),
	    _("Storing joystick settings...")];


    if (!autoinstall)
    {
	Progress::New (_("Saving sound card settings."), " ", size(stones) - 1,
		stones, stones2, _("Saving sound card settings."));
        Wizard::DisableAbortButton();
    }

    integer step = 0;

    if (!autoinstall) { Progress::NextStage(); }

    step = step + 1;
    SaveModulesEntry(save_info, [], false);

    if (!autoinstall) { sleep(100); Progress::NextStage(); }
    step = step + 1;
    if (!autoinstall)
    {
	Sound::StoreUniqueKeys();
    }

    if (!autoinstall) { sleep(100); Progress::NextStage(); }
    step = step + 1;
    SaveRCValues(rc_vars);

    if (!autoinstall) { sleep(100); Progress::NextStage(); }
    step = step + 1;

    if (!autoinstall)
    {
	map out = SCR::Execute(.target.bash_output, "/usr/sbin/rcalsasound start", nil);
    }

    if (!autoinstall) { Progress::NextStage(); }
    if (size(Args()) >= 4)
    {
	set_vol_settings(volume_settings);
    }
    if (SCR::Read(.target.size, "/etc/asound.state") == -1)
    {
	integer i = 0;
	maplist(`e, save_info, ``{
	    Sound::InitMixer(i, lookup(e, "module", ""));
	    i = i + 1;
	});
    }

    SaveVolume();
    if (!autoinstall) sleep(100);

    if (!autoinstall) { sleep(100); Progress::NextStage(); }
    Joystick::Write(nil);
    SCR::Execute(.target.bash_output, "/usr/sbin/rcjoystick restart", $[]);

    return (size (err_msg) == 0);
}
