/**
 *
 * $Id$
 *
 * File:              
 *   ui.ycp        
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   UI interface
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz> , Dan Meszaros <dmeszar@suse.cz>
 *
 *                   
 */

{
    textdomain "sound";

    include "misc_defines.ycp";
    include "sound/routines.ycp";
    include "sound/texts.ycp";
    include "ui/common_popups.ycp";
    include "ui/wizard_dialog.ycp";

    map STRINGS=STRINGS_();

    /** 
     *	InitializingDialog
     *  
     *
     * @return symbol
     */

    global define InitializingDialog () ``{
	  // label message
	term con = `Label (sformat(UI(_("Initializing ..."))));
	string helptext = "";
	 // dialog title message
	UI(`SetWizardContents (_("YaST2\nInitializing ..."), con, helptext, false, false));

	return `next;
    };


    /**  
     *  DisplayName
     *  
     *
     * @return map
     */
	  
    global define DisplayName (string name, string cname, integer cpos, integer flags) ``{
	string helptext=lookup(STRINGS, "DisplayName");
	term con=AutoconfDlg(name, cname, cpos);
	UI(`SetWizardContents (_("Sound card configuration"), con, helptext, true, true));
		// dialog title
	integer flagc=1;
	integer flagp=0;
	boolean selected=false;
	while(flagp<4)
	{
	    if((flagc & flags) ==0)
	    {
		UI(`ChangeWidget(`id(flagp), `Enabled, false));
	    }
	    else
	    {
		if(!selected)
		{
		    selected=true;
		    UI(`ChangeWidget(`id(`action), `CurrentButton, flagp));
		}
	    }
	    flagp=flagp+1;
	    flagc=flagc*2;
	}
		// Next button label    
	UI(`ChangeWidget(`id(`next), `Label, _("&Next")));

	symbol input=`cancel;

	while(input==`abort || input==`cancel)
	{
	    input=UI(`UserInput());
	    if(input == `cancel || input == `abort)
	    {
		if(ReallyAbort())
		{
		    return $["ui": `abort];
		}
	    }
	} 
	symbol output=input;
	if(input==`next)
	{
	    integer tmp=UI(`QueryWidget(`id(`action), `CurrentButton));
	    if(tmp==2)
	    {
		output=`options;
	    }
	    if(tmp==1)
	    {
		output=`next;
	    }
	    if(tmp==3)
	    {
		output=`skip;
	    }
	    if(tmp==0)
	    {
		output=`quick;
	    }
	}
	return $["ui" : output];
    }

    /**
     *  
     * 	OpenMainDialog 
     *
     * @return void
     */

    global define OpenMainDialog() ``{
	UI(`CreateWizardDialog());
    }

    UI(
    ``{
    /* 
     *  
     *  DebugDialog 
     *
     * @return void
     */
	global define DebugDialog(any str) 
	``{
	      // OK button user confirmation
	    OpenDialog(`VBox(`RichText(sformat("%1",str)),`PushButton(_("&OK"))));
	    any r = UserInput();
	    CloseDialog();
	}
    }
    );


    /**
     *	UI controls for volume setting dialog
     *
     *  @param card map with card info
     *  @param vol initial volume (0-100)
     *  @return term 
     */

    global define VolumeCon(map card , integer vol) ``{
	term slider = `IntField(`id(`volume), `opt(`notify), _("Volume"), 0, 100, vol);

	if (UI(`HasSpecialWidget(`Slider)))
	{
	          // slider label
	    slider = `Slider (`id(`volume), `opt(`notify), _("Volume"), 0, 100, vol);
	}

	term con = `HBox
	  (
	    `HSpacing (3),
	    `VBox 
	    (
	      `VSpacing (),
	      `Top 
	      (`VBox
		(
			// dialog title
		  `Left(`Label(_("Settings for sound card"))),
		  `Label (`opt(`outputField), hardware_name (card))
			)),
		    // To translators keep backlash here
		  `Frame 
		  (_("Volume adjust and test"), 
		    `HBox
		    (
		      `HSpacing (),
		      `VBox
		      (
			`VSpacing (0.5),
			slider,
			`VSpacing (),
			    // Test - button label
			`PushButton (`id (`test), _("&Test")),
			`VSpacing (0.5),
			    // message label
			`Label (_("Press 'Test' to start playing sound sample")),
			`VSpacing (0.5)
		      ),
		      `HSpacing ()
		    )
		  ),
		  `VStretch ()
	      ),
	      `HSpacing (3));

	return con;
    }
	    
    /**
     *	UI controls for options setting dialog
     *
     *  @param card card info
     *  @param itemized_descriptions option list (preformated using 'create_table' with tripples: description, name, value
     *  @param current_option index of initially selected item
     *  @param current_option_name initially selected item name
     *  @return term 
     *  @see sound_options#create_table
     */

    global define OptionsCon(map card, list itemized_descriptions, integer current_option, string current_option_name) ``{
	con = `HBox
              (
                `HSpacing (3),
                `VBox
                (
                  `VSquash(`Top(`Label (`opt(`outputField), hardware_name (card)))),
                  `VSpacing (),
                      // To translators: Table headers "description" -- option description, "option" -- option name, "value" -- value of an option
                  `Table (`id(`table), `opt (`notify, `immediate), `header(_("Description"), _("Option"),
                                                                                             `Right(_("Value"))), itemized_descriptions),
                  `VSpacing (0.5),
                  `VBox
                  (
                    `TextEntry (`id (`des), current_option_name,
                                      lookup (select (options, current_option), "value", "")),
                    `VSpacing (0.5),
                    `HBox
                    (
                              // "set" button: Sets the option value
                      `PushButton (`id (`set), `opt(`default), _("&Set")),
                              // "reset" button: Resets all values
                      `PushButton (`id (`reset), _("&Reset"))
                    )
                  ),
                  `VSpacing (0.5)
                ),
                `HSpacing (3)
              );
	return con;
    }

    /**
     * dialog to be displayed in WhichDialog function
     *
     * @param nc list of not configured cards
     * @see WhichDialog
     */

    global define WhichDlgCon(list nc) ``{
	term con = `HBox(
            `HSpacing (3),
        // frame label
            `Frame
            (`id(`frame), _("Select"),
                `HBox
                (
                    `HSpacing (1),
                    `VBox
                    (
                        `RadioButtonGroup
                        (`id(`rg),
                            `VBox
                            (
                                `VSpacing (1),
                                `Left(`VBox
                                (
                      // label of radiobutton
                                    `Left(`RadioButton(`id(`auto), `opt (`notify), _("&Autodetected"), (size (nc) > 0))),
                           // label of list with autodetected cards
                                    `VSquash(`SelectionBox(`id(`sel), _("List of autodetected"), nc))

                                )),
                                `VSpacing (1),
                       // label of radio button
                                `Left(`RadioButton (`id(`manual), `opt(`notify), _("&Select from list"), (size (nc) == 0))),
                                `VSpacing (1)
                            )
                        )
                    ),
                    `HSpacing (1)
                )
            ),
            `HSpacing (3)
        );
	return con;
    }

    global define ComplexDlgCon(list cc, boolean start_alsa, boolean start_alsa_seq) ``{
	term con = `HBox
            (
                `HSpacing (3),
                `VBox
                (
                    `Table (`id(`configured_table), `opt (`notify, `immediate),
                    // table header labels
                        `header(_("Number"), _("Card name")), cc),
                    `VSpacing (0.5),
            // Delete - button label
                    `HBox
                    (
                        `PushButton (`id(`b_delete), _("Delete")),
                        `HStretch (),
			`PushButton (`id(`b_options), _("Options")),
			`HStretch (),
                  // Add soundcard ... - button label
                        `PushButton (`id(`b_conf2), _("Add soundcard ..."))
                    ),
                    `VSpacing (0.5),
                    `HBox
                    (
                        `HStretch (),
                  // check button label
                        `VBox
                        (
                            `Left(`CheckBox(`id(`b_alsa), `opt(`notify), _("Start ALSA"), start_alsa)),
                         // check button label
                            `Left(`CheckBox(`id(`b_seq), `opt(`notify), _("Start sequencer"), start_alsa_seq))
                        )
                    ),
                    `VSpacing (0.5)
                ),
                `HSpacing (3)
            );
	return con;
    }
    
    global define AutoconfDlg(string name, string cname, integer cpos) ``{
	string clab="";	
    
	if(cpos<3)
	{
	    clab="\n"+sformat(select(lookup(STRINGS, "soundCount", ""), cpos), cname);
	}
	else
	{
	    clab="\n"+sformat(select(lookup(STRINGS, "soundCard", ""), 3), cname, cpos+1);
    	}

	term con=
            `VBox (
                `VSpacing (1),
		// this is the first part of message "The sound card 'cardname' will be configured as the first snd card"
                `Label (`opt (`hstretch), _("The sound card\n")),
                `HBox (`HSpacing (5), `Label (`opt (`hstretch), name)),
                `Label (`opt (`hstretch), clab),
//                `HBox (`HSpacing (5), `Label (`opt (`hstretch), cname)),
                `VSpacing (1),
                `HBox (`HSpacing (5), `RadioButtonGroup (
                    `id (`action),
                    `VBox (
                        `RadioButton (`id (0), `opt (`hstretch), _("Quick automatic setup"), true),
                        `VSpacing (0.3),
                        `RadioButton (`id (1), `opt (`hstretch), _("Normal setup")),
                        `VSpacing (0.3),
                        `RadioButton (`id (2), `opt (`hstretch), _("Advanced setup with possibility to change options")),
                        `VSpacing (0.3),
                        `RadioButton (`id (3), `opt (`hstretch), _("Skip sound card"))
                        )
                    )),
                `VStretch ()
                );
	return con;
    }

    /**
     *  dialog to be displayed when user presses 'Abort' button
     *
     */

    global define ReallyAbort()
    ``{
	return UI(`YesNoPopup(_("The installation will be aborted.")));
    }
}
