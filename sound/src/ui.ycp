/**
 *
 * $Id$
 *
 * File:
 *   ui.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   UI interface
 *
 * Authors:
 *   Dan Veselý <dan@suse.cz> , Dan Meszaros <dmeszar@suse.cz>
 *
 *
 */

{
    textdomain "sound";
    import "Wizard";

    /**
     *	InitializingDialog
     *
     *
     * @return symbol
     */

    global define InitializingDialog () ``{
	  // label message
	term con = `Label (sformat(_("Initializing ...")));
	string helptext = "";
	 // dialog title message
	Wizard::SetContents (_("YaST2\nInitializing ..."), con, helptext, false, false);

	return `next;
    };


    /**
     *  DisplayName
     *
     * @param name card model
     * @param cname sound card alias for modules conf
     * @param cpos cards position
     * @param flags enable/disable radiobuttons accordingly
     *
     * @return map
     */

    global define DisplayName (string name, string cname, integer cpos, integer flags) ``{
	string helptext = lookup(STRINGS, "DisplayName", "");
	term con = AutoconfDlg(name, cname, cpos);
	Wizard::SetContents (_("Sound card configuration"), con, helptext, true, true);
		// dialog title
	integer flagc = 1;
	integer flagp = 0;
	boolean selected = false;
	list flages = [`quick, `normal, `intro];
	while (flagp < 3)
	{
	    if ((flagc & flags) == 0)
	    {
		UI::ChangeWidget(`id(select(flages, flagp, 0)), `Enabled, false);
	    }
	    else
	    {
		if (!selected)
		{
		    selected = true;
		    UI::ChangeWidget(`id(`action), `CurrentButton, select(flages, flagp, 0));
		}
	    }
	    flagp = flagp + 1;
	    flagc = flagc * 2;
	}
		// Next button label
	UI::ChangeWidget(`id(`next), `Label, UI::NextButtonLabel());

	symbol input = `cancel;

	while (input == `abort || input == `cancel)
	{
	    input = UI::UserInput();
	    if (input == `cancel || input == `abort)
	    {
		if (ReallyAbort())
		{
		    return $["ui" : `abort];
		}
	    }
	}
	symbol output = input;
	if (input == `next)
	{
	    output = UI::QueryWidget(`id(`action), `CurrentButton);
	    if (output == `normal)
	    {
		output = `next;
	    }
	}
	return $["ui" : output];
    }

    /**
     * quick config dialog (is shown when only one card has been detected0
     * @param name card model
     * @param cname alias for modules conf
     * @param cpos position of the soud card
     * @param flags enable/disable radio buttons
     * @return symbol of pressed button
     */

    global define quickConfig(string name, string cname, integer cpos, integer flags) ``{
        string helptext = lookup(STRINGS, "quickConfig", "");
        term con = QuickconfDlg(name, cname, cpos);
        Wizard::SetContents (_("Sound card configuration"), con, helptext, true, true);
                // dialog title
        integer flagc = 1;
        integer flagp = 0;
        boolean selected = false;
	list flages = [`quick, `normal, `intro];
        while (flagp < 3)
        {
            if ((flagc & flags) == 0)
            {
                UI::ChangeWidget(`id(select(flages, flagp, 0)), `Enabled, false);
            }
            else
            {
                if (!selected)
                {
                    selected = true;
                    UI::ChangeWidget(`id(`action), `CurrentButton, select(flages, flagp, 0));
                }
            }
            flagp = flagp + 1;
            flagc = flagc * 2;
        }
                // Next button label
        UI::ChangeWidget(`id(`next), `Label, UI::NextButtonLabel());

	        symbol input = `cancel;

        while (input == `abort || input == `cancel)
        {
            input = UI::UserInput();
            if (input == `cancel || input == `abort)
            {
                if (ReallyAbort())
                {
                    return $["ui" : `abort];
                }
            }
        }
        symbol output = input;
        if (input == `next)
        {
            output = UI::QueryWidget(`id(`action), `CurrentButton);
        }
        return $["ui" : output];
    }


    /**
     *
     *	OpenMainDialog
     *
     * @return void
     */

    global define OpenMainDialog() ``{
	Wizard::CreateDialog();
    }


    /**
     *	UI controls for volume setting dialog
     *
     *  @param save_entry map with card info
     *  @param vol initial volume (0-100)
     *  @return term
     */

    global define VolumeCon(map save_entry , integer vol) ``{
	term slider = `IntField(`id(`volume), `opt(`notify), _("&Volume"), 0, 100, vol);

	if (UI::HasSpecialWidget(`Slider))
	{
	          // slider label
	    slider = `Slider (`id(`volume), `opt(`notify), _("&Volume"), 0, 100, vol);
	}

	term con = `HBox
	  (
	    `HSpacing (3),
	    `VBox
	    (
	      `VSpacing (),
	      `Top
	      (`VBox
		(
			// dialog title
		  `Left(`Label(_("Settings for sound card"))),
		  `Label (`opt(`outputField), lookup(save_entry, "model", ""))
			)),
		    // To translators keep backlash here
		  `Frame
		  (_("Volume adjust and test"),
		    `HBox
		    (
		      `HSpacing (),
		      `VBox
		      (
			`VSpacing (0.5),
			slider,
			`VSpacing (),
			    // Test - button label
			`PushButton (`id (`test), _("&Test")),
			`VSpacing (0.5),
			    // message label
			`Label (_("Press 'Test' to start playing sound sample")),
			`VSpacing (0.5)
		      ),
		      `HSpacing ()
		    )
		  ),
		  `VStretch ()
	      ),
	      `HSpacing (3));

	return con;
    }

    /**
     *	UI controls for options setting dialog
     *
     *  @param cardlabel card model string
     *  @param itemized_descriptions option list (preformated using 'create_table' with tripples: description, name, value
     *  @param current_option index of initially selected item
     *  @param current_option_name initially selected item name
     *  @return term
     *  @see sound_options#create_table
     */

    global define OptionsCon(string cardlabel, list itemized_descriptions, integer current_option, string current_option_name) ``{
	con = `HBox
              (
                `HSpacing (3),
                `VBox
                (
                  `VSquash(`Top(`Label (`opt(`outputField), cardlabel))),
                  `VSpacing (),
                      // To translators: Table headers "description" -- option description, "option" -- option name, "value" -- value of an option
                  `Table (`id(`table), `opt (`notify, `immediate), `header(_("Description"), _("Option"),
                                                                                             `Right(_("Value"))), itemized_descriptions),
                  `VSpacing (0.5),
		  `HBox
		  (
		    `TextEntry (`id (`des), `opt(`notify), current_option_name,
			 lookup (select (options, current_option, ""), "value", "")),
		    `VBox(
			`Label(""),
			`HBox(
			    `PushButton (`id (`set), _("&Set")),
			    `PushButton (`id (`reset), _("&Reset all"))
			)
		    )

		  ),
		  `Left(`ReplacePoint(`id(`reppoint), `Label(""))),
                  `VSpacing (0.5)
                ),
                `HSpacing (3)
              );
	return con;
    }

    /**
     * dialog to be displayed in WhichDialog function
     *
     * @param nc list of not configured cards
     * @see WhichDialog
     */

    global define WhichDlgCon(list nc) ``{
	term con = `HBox(
            `HSpacing (3),
        // frame label
            `Frame
            (`id(`frame), _("Select"),
                `HBox
                (
                    `HSpacing (1),
                    `VBox
                    (
                        `RadioButtonGroup
                        (`id(`rg),
                            `VBox
                            (
                                `VSpacing (1),
                                `Left(`VBox
                                (
                      // label of radiobutton
                                    `Left(`RadioButton(`id(`auto), `opt (`notify), _("&Autodetected"), (size (nc) > 0))),
                           // label of list with autodetected cards
                                    `VSquash(`SelectionBox(`id(`sel), _("&List of autodetected"), nc))

                                )),
                                `VSpacing (1),
                       // label of radio button
                                `Left(`RadioButton (`id(`manual), `opt(`notify), _("&Select from list"), (size (nc) == 0))),
                                `VSpacing (1)
                            )
                        )
                    ),
                    `HSpacing (1)
                )
            ),
            `HSpacing (3)
        );
	return con;
    }

    /**
     * widget for complex dialog
     * @param cc list of configured cards
     * @param start_alsa check/ucheck start_alsa checkbox
     * @param start_alsa_seq as previous
     * @param show_font_but show button for sound fonts installation
     * @return widget
     *
     */

    global define ComplexDlgCon(list cc, boolean start_alsa, boolean start_alsa_seq, boolean show_font_but) ``{
	term butts = nil;
	term alsabuts = `Empty();
	if  (use_alsa)
	{
	    alsabuts = `VBox
                         (
                            `Left(`CheckBox(`id(`b_alsa), `opt(`notify), _("Start &ALSA"), start_alsa)),
                         // check button label
                            `Left(`CheckBox(`id(`b_seq), `opt(`notify), _("&Start sequencer"), start_alsa_seq))
                         );
	}
	if (show_font_but)
        {
            butts = `HBox(
			alsabuts,
                        `VBox
                        (
                            `PushButton (`id(`b_fonts), _("&Install soundfonts..."))
                        )
                    );
        }
	else
	{
	    butts =  alsabuts;

	}
	term con = `HBox
            (
                `HSpacing (3),
                `VBox
                (
                    `Table (`id(`configured_table), `opt (`notify, `immediate),
                    // table header labels
                        `header(_("Number"), _("Card model"), _("State")), cc),
                    `VSpacing (0.5),
            // Delete - button label
                    `HBox
                    (
                        `PushButton (`id(`b_conf2), _("Add sound &card")),
			`PushButton (`id(`b_options), _("&Options")),
			`PushButton (`id(`b_volume), _("&Volume")),
			`HStretch (),
                        `PushButton (`id(`b_delete), _("&Delete"))
                    ),
                    `VSpacing (0.5),
                    `HBox
                    (
                        `HStretch (),
			butts
                    ),
                    `VSpacing (0.5)
                ),
                `HSpacing (3)
            );
	return con;
    }

    /**
     * quick config dialog widget
     * @param name card model
     * @param cname alias for modules conf
     * @param cpos position of the card
     * @return term with widget
     */

    global define AutoconfDlg(string name, string cname, integer cpos) ``{
	string clab = "";

	if (cpos < 3)
	{
	    clab = "\n" + sformat(select(lookup(STRINGS, "soundCount", ""), cpos, ""), cname, "");
	}
	else
	{
	    clab = "\n" + sformat(select(lookup(STRINGS, "soundCount", ""), 3, ""), cname, cpos + 1, "");
	}

	term con =
            `VBox (
                `VSpacing (1),
		// this is the first part of message "The sound card 'cardname' will be configured as the first snd card"
                `Label (`opt (`hstretch), _("The sound card\n")),
                `HBox (`HSpacing (5), `Label (`opt (`hstretch), name)),
                `Label (`opt (`hstretch), clab),
                `VSpacing (1),
                `HBox (`HSpacing (5), `RadioButtonGroup (
                    `id (`action),
                    `VBox (
                        `RadioButton (`id (`quick), `opt (`hstretch), _("&Quick automatic setup"), true),
                        `VSpacing (0.3),
                        `RadioButton (`id (`normal), `opt (`hstretch), _("Normal &setup")),
                        `VSpacing (0.3),
                        `RadioButton (`id (`options), `opt (`hstretch), _("Advanced setup with possibility to change &options"))
                        )
                    )),
                `VStretch ()
                );
	return con;
    }

    /**
     * quick conf dialog widget
     * @param name card model
     * @param cname card alias for module.conf
     * @param cpos card position
     * @return term widget
     *
     */

        global define QuickconfDlg(string name, string cname, integer cpos) ``{
        string clab = "";

        if (cpos < 3)
        {
            clab = "\n" + sformat(select(lookup(STRINGS, "soundCount", ""), cpos, ""), cname, "");
        }
        else
        {
            clab = "\n" + sformat(select(lookup(STRINGS, "soundCount", ""), 3, ""), cname, cpos + 1, "");
        }

        term con =
            `VBox (
                `VSpacing (1),
                // this is the first part of message "The sound card 'cardname' will be configured as the first snd card"
                `Label (`opt (`hstretch), _("The sound card\n")),
                `HBox (`HSpacing (5), `Label (`opt (`hstretch), name)),
                `Label (`opt (`hstretch), clab),
                `VSpacing (1),
                `HBox (`HSpacing (5), `RadioButtonGroup (
                    `id (`action),
                    `VBox (
                        `RadioButton (`id (`quick), `opt (`hstretch), _("&Quick automatic setup"), true),
                        `VSpacing (0.3),
                        `RadioButton (`id (`normal), `opt (`hstretch), _("Normal &setup")),
                        `VSpacing (0.3),
                        `RadioButton (`id (`intro), `opt (`hstretch), _("&More detailed installation of sound cards"))
                        )
                    )),
                `VStretch ()
                );
        return con;
    }


    /**
     *  dialog to be displayed when user presses 'Abort' button
     *	@return boolean
     */

    global define ReallyAbort()
    ``{
	return UI::ReallyAbortPopup(false);
    }

    /**
     * ui that displays two listbox with new and configured harwdare
     *
     * @param newHw list with new hardware
     * @param confHw list with already configured hardware
     * @return void
     */

    global define selectHardware(list newHw, string confHw) ``{
	integer index = -1;
        newHw = maplist(`e, newHw, ``{
            index = index + 1;              // select first item
            return `item(`id(index), e, index == 0);
            });

	    // to translators: the full meaning of message is: "Add other not detected soundcard"
	newHw = add(newHw, `item(`id(-1), _("Other (not detected)"), size(newHw) == 0));

	term widget=Wizard_hw::DetectedContent(_("&Sound cards to configure"), newHw, false, 
					sformat(_("<P><B>Already configured sound cards:</B>%1</P>"), confHw));

	string helptext = lookup(STRINGS, "selectHardware", "");


	Wizard::SetContents (_("Sound card configuration"), widget, helptext, true, true);

    }

    /**
     * displays a dialog that offer to configure detected or manually selected card
     * @param cards detected cards
     * @return `auto/`manual
     */

    global define WhichDialog (list cards)       ``{
    // help text

        string helptext = lookup(STRINGS, "WhichDialog", "");

        list nc = [];
        integer i = 0;

        maplist (`e, cards,
        ``{
            nc = add (nc, `item(`id(i), e));
                  i = i + 1;
        });

        term con = WhichDlgCon(nc);

	        // dialog title
        Wizard::SetContents (_("Configure a sound card"), con, helptext, true, true);
        // Next - button label
        UI::ChangeWidget(`id(`next), `Label, UI(`NextButtonLabel()));

        if (size (nc) == 0)
        {
            UI::ChangeWidget (`id(`sel), `Enabled, false);
            UI::ChangeWidget (`id(`auto), `Enabled, false);
        }
        else
        {
            UI::ChangeWidget(`id(`sel), `CurrentItem, 0);
        }

        symbol ui = nil;

	do
        {
            ui = UI::UserInput ();

            if (ui == `manual)
            {
                UI::ChangeWidget (`id(`sel), `Enabled, false);
            }
            else if (ui == `auto)
            {
                UI::ChangeWidget (`id(`sel), `Enabled, true);
            }
            else if (ui == `abort || ui == `cancel)
            {
                if (ReallyAbort())
                {
                    break;
                }
            }
        } while (!contains([`back, `next, `cancel], ui)); //(((ui == `back) || (ui == `next) || ui == `cancel)));

        integer cid = 0;

        symbol way = UI::QueryWidget (`id(`rg), `CurrentButton);
        if (way == `auto)
        {
            cid = UI::QueryWidget(`id(`sel), `CurrentItem);
        }
        else if (way == `manual)
        {
	    cid = -1;
	}


        return $["ui" : ui,
                "card_id"  : cid];

    }

}
