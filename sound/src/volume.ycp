/**
 * File:
 *   volume.ycp
 *
 * Module:
 *   Sound
 *
 * Summary:
 *   Module where an attemp of inserting module is provided,
 *   if everything goes well adjusting volume is done here
 *   otherwise error message is displayed
 *
 * Authors:
 *   Dan Vesely <dan@suse.cz>
 *   Dan Meszaros <dmeszar@suse.cz>
 *
 * String corrections by Christian Steinruecken <cstein@suse.de>, 2001/08/01
 *
 *
 * $Id$
 *
 *
 * parameters: 1st: module, Map, map of card
 *             2nd: card_id, integer
 *             3rd: boolean - finish
 *
 */

{

    textdomain "sound";
    import "Wizard";

    include "sound/joy_dialog.ycp";


    /**
     * This dialog sipmply reads user input and calls apropriate set funtion
     *
     * @return symbol next dialog
     */

    global define symbol VolumeDialog () ``{

	    //unmute these devices
	/* help text: adjusting volume */

	string help_text = lookup(STRINGS, "VolumeDialog", "");

	integer vol = 50;
/*
	if (find(lookup(save_entry, "model", ""), "(daca)") >= 0)
	{
	    vol = 75;
	}
*/

	term con = VolumeCon(save_entry, vol);
	    // dialog title
	Wizard::SetContents (_("Sound card volume"), con, help_text, true, true);

	if (Sound::autoinstallation)
	{
	    UI::ChangeWidget(`id(`test), `Enabled, false);
	}

	if (finish)
	{
	    UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
	}

/* Sound fonts installation */
	if (HasFonts(save_entry) && !FontsInstalled())
	{
	    InstallFonts("", false);
	}

/* end of sound fonts installation */

	string master_elem = lookup(lookup(Sound::db_modules, modname, $[]), 
	    "main_volume", "Master");
        setVolume (master_elem, card_id, vol);
	// some cards use Headphone instead of Master (bug #26539):
	setVolume("Headphone", card_id, vol);

	do
	{
	    ui =  UI::UserInput ();

	    if (ui == `volume)
	    {
		vol = UI::QueryWidget(`id(`volume), `Value );
		setVolume(master_elem, card_id, vol);
		setVolume("Headphone", card_id, vol);
	    }
	    else if (ui == `test)
	    {
		if (!test_mode)
		{
		    string msg = PlayTest(card_id);
		    if (msg != "")
		    {
			UI::MessagePopup (msg);
		    }
		}
	    }
	    else if (ui == `next && conf_joystick)
	    {
		symbol ret = joy_dialog(card_id, `next);
		if (ret == `back)
		{
		    con = VolumeCon(save_entry, vol);
		    // dialog header
		    Wizard::SetContents (_("Sound card volume"), con, help_text, true, true);
		    continue;
		}
		else
		{
		    ui = ret;
		    break;
		}
	    }
	    else if (ui == `abort || ui == `cancel)
	    {
		if (ReallyAbort())
		{
		    ui = `abort;
		    break;
		}
	    }
	} while (!contains([`back, `next, `cancel, `joystick], ui));
	return ui;
    }

    /**
    * shows error message in wizard
    * @param save_entry card config
    * @param err error string to be shown
    * @return symbol `back | `cancel
    */

    global define symbol ErrorDialog (map save_entry, string err) ``{
				    // Help text - intenal YaST2 error

	y2debug("%1", save_entry);
	string help_text = lookup(STRINGS, "ErrorDialog", "");
	string additional = "";
	if (lookup(save_entry, "module", "") == "snd-cs461x")
	{
	    // error message
	    additional = "\n\n" + _("Please try to configure this sound card manually 
using the \"Cirrus Logic CS4232\" or \"Cirrus 
Logic CS4236\" driver and configure 
its parameters using the 'Advanced setup'.");
	}

	term con = `HVCenter
	  (
	    `VBox
	    (
		    // error message
	      `Label (_("An error occured during the installation of")),
	      `VSpacing (),
	      `Label (`opt(`outputField), lookup(save_entry, "model", "")),
	      `VSpacing (),
	      `Label (err + additional)
	    )
	  );

	    // dialog title
	Wizard::SetContents (ErrorMsg(), con, help_text, true, false);
	if (finish)
	{
	    UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
	}

	UI::SetFocus(`id(`back));

	repeat
	{
	    ui =  UI::UserInput ();
            if (ui == `cancel || ui == `abort)
            {
                if (ReallyAbort())
                {
                    return `abort;
                }
            }

	} until ((ui == `back) || ui == `cancel);

	return ui;
    }

    /**
    * shows success message in wizard
    * @param save_entry info about card config
    * @return symbol `back | `cancel
    */

    global define symbol SuccessDialog (map save_entry) ``{
                                    // Help text - intenal YaST2 error

        string help_text = lookup(STRINGS, "SuccessDialog", "");

        term con = `HVCenter
          (
            `VBox
            (
                    // error message
              `Label (_("Your sound card is ready for use.")),
              `VSpacing (),
              `Label (`opt(`outputField), lookup(save_entry, "model", "")),
              `VSpacing (),
              `Label ("")
            )
          );

            // dialog title
        Wizard::SetContents (_("Success"), con, help_text, true, true);
        if (finish)
        {
            UI::ChangeWidget (`id(`next), `Label, UI::FinishButtonLabel());
        }

        repeat
        {
            ui =  UI::UserInput ();
	    if (ui == `cancel || ui == `abort)
	    {
		if (ReallyAbort())
		{
		    return `abort;
		}
	    }
        } until ((ui == `back) || ui == `next);

        return ui;
    }




  // ===== main =====
      /*
       * Steps:
       *        1. try to insert kernel module
       *        2. on succes unmute and volume dialog
       *        3. on fail display error message
       */

    /**
     * shows volume dialog for normal setup or success dialog for quick setup
     * in case of failure show error dialog with 'next' button disabled
     * @param save_entry card config
     * @param card_id id of currently donfigured card
     * @param finish show 'finish' button instead of 'next'
     * @param quick quick/normal config
     * @param save_info config of previuosly configured cards
     * @return map result and next dialog
     */

    global define map sound_volume(map save_entry, integer card_id, boolean finish,
				    boolean quick, list save_info) ``{


    Sound::LoadDatabase();

    boolean need_restart    = true;
    boolean test_mode	    = false;

//    if (autoinstall)
//    {
//	quick = true;
//   }

    Wizard::DisableAbortButton();

    list modules_conf_backup = Sound::modules_conf;

    string err_msg = "";

    if (Sound::autoinstallation)
    {
        stop_programs();
    }

// #################################

    if (!test_mode)
    {
	list new_save = [];
	if (card_id >= size(save_info))
	{
	    new_save = add(save_info, save_entry);
	}
	else
	{
	    integer pos = -1;
	    new_save = maplist(`e, save_info,
	    ``{
		pos = pos + 1;
		return (pos == card_id) ? save_entry :  e;
	    });
	}

	Sound::modules_conf = new_save;

	if (!Sound::autoinstallation)
	{
	    sound_stop();
	    sound_start_tmp(true/*, size(new_save)*/);
	    err_msg = check_module(save_entry, card_id);
	}
    }
// #################################
    symbol ui = nil;

    if (size (err_msg) > 0)
    {
	ui = ErrorDialog (save_entry, err_msg);
    }
    else
    {

	string modname = lookup(save_entry, "module", "snd-dummy");

	if (!Sound::autoinstallation)
	{
	    Sound::InitMixer(card_id, lookup(save_entry, "module", "snd-dummy"));
	}

	if (!quick)
	{
	    while (true)
	    {
		ui = VolumeDialog ();
		if (ui != `joystick)
		{
		    break;
		}
		symbol s = joy_dialog(card_id, `next);
		if (s == `abort || s == `cancel)
		{
		    ui = `abort;
		    break;
		}
	    }
	}
	else
	{
	    string master_elem = lookup(lookup(Sound::db_modules, modname, $[]),
		"main_volume", "Master");

	    setVolume (master_elem, card_id, 75);

	    if (conf_joystick == true)
	    {
		joy_dialog(card_id, `next);
	    }

	    ui = SuccessDialog(save_entry);
	}
	storeVolume(card_id);
    }

    Sound::modules_conf = modules_conf_backup;

    if (ui == `back || ui == `cancel || ui == `abort)
    {
	if (!Sound::autoinstallation)
	{
//	    SaveModulesEntry(save_info, [], true);

	    sound_stop();
	    sound_start_tmp(true);
	}
    }

    if (!Sound::autoinstallation)
    {
	SCR::Execute(.audio.alsa.restore, 0 ,0);
    }

    UI::ChangeWidget (`id(`next), `Label, UI::NextButtonLabel());

    SCR::Execute(.target.bash, "/usr/bin/killall aplay 2> /dev/null", $[]);

    return $["ui" : ui, "return" : size (err_msg) == 0];

}

}


